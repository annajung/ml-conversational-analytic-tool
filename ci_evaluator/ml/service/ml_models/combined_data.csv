,Repo_Name,Organization_Name,PR_Number,PR_Title,PR_Head,User,PR_Labels,URL,PR_State,PR_Body,PR_Additions,PR_Deletions,PR_Comments_Num,PR_Commits_Num,PR_Created_At,PR_Closed_At,PR_Merged,PR_Merged_At,PR_Merged_By,PR_Review_Comments_Num,PR_Updated_At,Review_Comment,Comment_Created_At,Comment_User,Comment_Updated_At,Comment,Inclusiveness,Constructiveness
0,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,False,2020-05-19 14:52:55,Jáchym Toušek,2020-05-19 14:52:55,My changes somehow broke `PosixSemaphoreTest`. I'm not sure what's wrong.,not inclusive,constructive
1,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-02 10:19:54,Niklas Keller,2020-05-19 14:56:22,Needs to keep `|null` here as well.,not inclusive,not constructive
2,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-02 10:21:35,Niklas Keller,2020-05-19 14:56:22,"If the previous release failed, this should probably not return `new Success;`. This is the kind of problems you run into once you return a promise. :P",inclusive,constructive
3,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-02 10:22:53,Niklas Keller,2020-05-19 14:56:22,I think we can keep the exception non-final.,inclusive,not constructive
4,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-02 10:23:28,Niklas Keller,2020-05-19 14:56:22,I'm not sure whether we want to directly remove it. @trowski?,not inclusive,constructive
5,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-02 14:17:23,Aaron Piotrowski,2020-05-19 14:56:22,I've found the `$id` property to be completely pointless.,inclusive,constructive
6,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-02 14:18:41,Aaron Piotrowski,2020-05-19 14:56:22,@enumag The promise from `$this->releaser` can be stored and returned here instead. We might want to remove passing `$this` to the function to avoid a circular reference.,neutral,constructive
7,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-02 14:21:50,Aaron Piotrowski,2020-05-19 14:56:22,"I'm not sure there's a lot of usage of `pthreads` anymore, so dropping support is probably fine.",not inclusive,constructive
8,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-02 14:55:30,Niklas Keller,2020-05-19 14:56:22,It's used here: https://github.com/amphp/sync/blob/b33f8b7e3b463cd864ed75f4759ad5d74436e632/src/SemaphoreMutex.php#L27,inclusive,constructive
9,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-02 15:04:02,Aaron Piotrowski,2020-05-19 14:56:22,I suppose that's helpful. I've otherwise never needed to use the ID.,inclusive,constructive
10,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-03 07:15:09,Jáchym Toušek,2020-05-19 14:56:22,All the semaphores seems to use it to some extent. For instance https://github.com/amphp/sync/blob/b33f8b7e3b463cd864ed75f4759ad5d74436e632/src/LocalSemaphore.php#L30-L51,inclusive,constructive
11,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-03 07:24:13,Jáchym Toušek,2020-05-19 14:56:22,Should the releaser be required to return a Promise?,inclusive,constructive
12,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-03 11:48:00,Niklas Keller,2020-05-19 14:56:22,"Not sure, we could also use `Amp\call` on it to automatically run as coroutine if it returns a generator.",inclusive,constructive
13,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-03 13:50:09,Jáchym Toušek,2020-05-19 14:56:22,"Nah, I'd avoid using call. I think the API should be more strict than that. I'm asking only because allowing void as well (which call wouldn't solve btw.) would be more BC friendly since that's how the releasers work now. Personally I'd simply force a Promise though.",inclusive,constructive
14,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-03 14:59:16,Aaron Piotrowski,2020-05-19 14:56:22,We use `Amp\call` on most other callbacks. It would seem unusual not to do so here as well IMO.,not inclusive,not constructive
15,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-03 15:04:09,Aaron Piotrowski,2020-05-19 14:56:22,"I guess my main point is that I've never used the ID from the consumer side of `Lock`. Here it's just an implementation detail in `LocalSemaphore`. So I guess it's not ""pointless,"" but I haven't found it particularly useful except in the case @kelunik pointed out. Turns out we do use it, so never mind, leave it as-is.",inclusive,constructive
16,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-03 15:33:42,Jáchym Toušek,2020-05-19 14:56:22,I see. Okay then.,inclusive,not constructive
17,sync,amphp,14,Next major,"PullRequestPart(sha=""10b86082474e297d06d818f50bdf823a3cb74bf3"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/14,open,"Just wanted to make a PR with things that can be considered for the next major release (whenever you decide to make it). I won't keep this up-to-date with conflicts unless you explicitly ask me to rebase it.

- https://github.com/amphp/file/pull/43#discussion_r418936134
- https://github.com/amphp/sync/issues/12
- Removed deprecated ext-pthreads support.

EDIT: Somehow it's causing a segfault on travis lol.",43,263,1,8,2020-05-02 09:55:36,,False,,,17,2020-05-19 14:56:22,True,2020-05-03 15:36:17,Jáchym Toušek,2020-05-19 14:56:22,"@trowski It's hidden from the user anyway... The user never actually creates a lock, he just gets an instance from a mutex or semaphore so he doesn't need to care about the id in __construct at all..",inclusive,constructive
18,sync,amphp,1,More semaphore tests,"PullRequestPart(sha=""60132a563a5d857ee62b2f945a8348e44b164f60"")","Chun-Sheng, Li",[],https://api.github.com/repos/amphp/sync/pulls/1,closed,"# Changed log

- add more releated semaphore tests.",61,0,1,5,2018-03-11 21:53:45,2018-04-26 19:07:09,True,2018-04-26 19:07:09,Niklas Keller,2,2018-04-26 19:07:13,False,2018-04-26 19:07:13,Niklas Keller,2018-04-26 19:07:13,Thanks!,inclusive,constructive
19,sync,amphp,1,More semaphore tests,"PullRequestPart(sha=""60132a563a5d857ee62b2f945a8348e44b164f60"")","Chun-Sheng, Li",[],https://api.github.com/repos/amphp/sync/pulls/1,closed,"# Changed log

- add more releated semaphore tests.",61,0,1,5,2018-03-11 21:53:45,2018-04-26 19:07:09,True,2018-04-26 19:07:09,Niklas Keller,2,2018-04-26 19:07:13,True,2018-03-18 15:45:49,Niklas Keller,2018-03-19 01:56:33,"Please write the permission as octal here, too (with a leading `0`).",inclusive,constructive
20,sync,amphp,1,More semaphore tests,"PullRequestPart(sha=""60132a563a5d857ee62b2f945a8348e44b164f60"")","Chun-Sheng, Li",[],https://api.github.com/repos/amphp/sync/pulls/1,closed,"# Changed log

- add more releated semaphore tests.",61,0,1,5,2018-03-11 21:53:45,2018-04-26 19:07:09,True,2018-04-26 19:07:09,Niklas Keller,2,2018-04-26 19:07:13,True,2018-03-18 15:46:13,Niklas Keller,2018-03-19 01:56:33,Please use `::class` instead of literal strings.,inclusive,constructive
21,sync,amphp,2,Add docs/asset to export-ignore,"PullRequestPart(sha=""f75b43b7d19cad9e67bd7c151220c87a11af9c4f"")",Eugene Leonovich,[],https://api.github.com/repos/amphp/sync/pulls/2,closed,Same as https://github.com/amphp/byte-stream/issues/48 and https://github.com/amphp/parallel/pull/69.,1,0,1,1,2019-01-10 16:29:22,2019-01-10 17:14:44,True,2019-01-10 17:14:44,Niklas Keller,0,2019-01-10 17:26:34,False,2019-01-10 17:14:49,Niklas Keller,2019-01-10 17:14:49,"Thanks!
",inclusive,neutral
22,sync,amphp,4,"Add KeyedSemaphore, make Mutex extend Semaphore","PullRequestPart(sha=""4e25bd867cedffde7d71f918fee1c257aee40d80"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/4,closed,,180,6,0,4,2019-11-07 00:47:57,2019-11-08 18:42:57,True,2019-11-08 18:42:57,Niklas Keller,4,2019-11-08 18:42:59,True,2019-11-07 17:07:13,Niklas Keller,2019-11-07 22:01:33,"This is the wrong way, mutex should extend semaphore, as mutex is a special form of a semaphore with size one. ",inclusive,constructive
23,sync,amphp,4,"Add KeyedSemaphore, make Mutex extend Semaphore","PullRequestPart(sha=""4e25bd867cedffde7d71f918fee1c257aee40d80"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/4,closed,,180,6,0,4,2019-11-07 00:47:57,2019-11-08 18:42:57,True,2019-11-08 18:42:57,Niklas Keller,4,2019-11-08 18:42:59,True,2019-11-07 17:19:00,Aaron Piotrowski,2019-11-07 22:01:33,"The separation here exists because a mutex indicates the lock should be exclusive, otherwise there would have been a single interface.",inclusive,constructive
24,sync,amphp,4,"Add KeyedSemaphore, make Mutex extend Semaphore","PullRequestPart(sha=""4e25bd867cedffde7d71f918fee1c257aee40d80"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/4,closed,,180,6,0,4,2019-11-07 00:47:57,2019-11-08 18:42:57,True,2019-11-08 18:42:57,Niklas Keller,4,2019-11-08 18:42:59,True,2019-11-07 19:01:45,Niklas Keller,2019-11-07 22:01:33,"Yes, noticed that I did it the wrong way. Mutex should extend semaphore. ",inclusive,neutral
25,sync,amphp,4,"Add KeyedSemaphore, make Mutex extend Semaphore","PullRequestPart(sha=""4e25bd867cedffde7d71f918fee1c257aee40d80"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/4,closed,,180,6,0,4,2019-11-07 00:47:57,2019-11-08 18:42:57,True,2019-11-08 18:42:57,Niklas Keller,4,2019-11-08 18:42:59,True,2019-11-07 19:15:13,Aaron Piotrowski,2019-11-07 22:01:33,"Yes, Mutex extending Semaphore should be fine.",inclusive,neutral
26,sync,amphp,6,Add Serializer,"PullRequestPart(sha=""2e65f97e89c8e34c44bef24c1193cf170442a667"")",Aaron Piotrowski,[],https://api.github.com/repos/amphp/sync/pulls/6,closed,,314,0,0,8,2020-03-12 15:54:16,2020-03-19 13:45:11,False,,,7,2020-03-19 13:45:11,True,2020-03-12 16:29:58,Niklas Keller,2020-03-13 05:19:43,Maybe `NativeSerializer`?,inclusive,constructive
27,sync,amphp,6,Add Serializer,"PullRequestPart(sha=""2e65f97e89c8e34c44bef24c1193cf170442a667"")",Aaron Piotrowski,[],https://api.github.com/repos/amphp/sync/pulls/6,closed,,314,0,0,8,2020-03-12 15:54:16,2020-03-19 13:45:11,False,,,7,2020-03-19 13:45:11,True,2020-03-12 16:30:51,Niklas Keller,2020-03-13 05:19:43,Maybe `allowed_classes` should be a constructor parameter?,inclusive,constructive
28,sync,amphp,6,Add Serializer,"PullRequestPart(sha=""2e65f97e89c8e34c44bef24c1193cf170442a667"")",Aaron Piotrowski,[],https://api.github.com/repos/amphp/sync/pulls/6,closed,,314,0,0,8,2020-03-12 15:54:16,2020-03-19 13:45:11,False,,,7,2020-03-19 13:45:11,True,2020-03-12 16:33:10,Niklas Keller,2020-03-13 05:19:43,I'm not sure whether it should extend `SyncException`.,inclusive,neutral
29,sync,amphp,6,Add Serializer,"PullRequestPart(sha=""2e65f97e89c8e34c44bef24c1193cf170442a667"")",Aaron Piotrowski,[],https://api.github.com/repos/amphp/sync/pulls/6,closed,,314,0,0,8,2020-03-12 15:54:16,2020-03-19 13:45:11,False,,,7,2020-03-19 13:45:11,True,2020-03-12 17:56:48,Niklas Keller,2020-03-13 05:19:43,"I thought about `NoopSerializer` as name, but not sure whether that fits.",inclusive,constructive
30,sync,amphp,6,Add Serializer,"PullRequestPart(sha=""2e65f97e89c8e34c44bef24c1193cf170442a667"")",Aaron Piotrowski,[],https://api.github.com/repos/amphp/sync/pulls/6,closed,,314,0,0,8,2020-03-12 15:54:16,2020-03-19 13:45:11,False,,,7,2020-03-19 13:45:11,True,2020-03-12 17:57:13,Niklas Keller,2020-03-13 05:19:43,Maybe `PassthroughSerializer`?,inclusive,constructive
31,sync,amphp,6,Add Serializer,"PullRequestPart(sha=""2e65f97e89c8e34c44bef24c1193cf170442a667"")",Aaron Piotrowski,[],https://api.github.com/repos/amphp/sync/pulls/6,closed,,314,0,0,8,2020-03-12 15:54:16,2020-03-19 13:45:11,False,,,7,2020-03-19 13:45:11,True,2020-03-17 18:40:53,Niklas Keller,2020-03-17 18:40:54,Should this be a lower-case `t`?,inclusive,constructive
32,sync,amphp,6,Add Serializer,"PullRequestPart(sha=""2e65f97e89c8e34c44bef24c1193cf170442a667"")",Aaron Piotrowski,[],https://api.github.com/repos/amphp/sync/pulls/6,closed,,314,0,0,8,2020-03-12 15:54:16,2020-03-19 13:45:11,False,,,7,2020-03-19 13:45:11,True,2020-03-17 18:43:07,Niklas Keller,2020-03-17 18:45:01,Should this be in `amphp/amp`?,inclusive,constructive
33,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,False,2020-04-25 20:29:02,Sascha-Oliver Prolic,2020-04-25 20:29:02,"thanks @enumag, changes are applied",inclusive,neutral
34,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,False,2020-04-26 21:48:47,Sascha-Oliver Prolic,2020-04-26 21:48:47,all requested changes applied and rebased,inclusive,neutral
35,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,False,2020-05-06 15:56:26,Niklas Keller,2020-05-06 15:56:26,Thanks! I'll going to change the API a bit after merging now.,inclusive,constructive
36,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-04-25 20:17:58,Jáchym Toušek,2020-05-06 15:45:05,"In my opinion this should return void. If you need to check that the signal resolved the promise, you can call `getCurrentCount` right after.",inclusive,constructive
37,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-04-25 20:18:47,Jáchym Toušek,2020-05-06 15:45:05,"This package requires php 7.1, you can use void return type.",inclusive,constructive
38,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-04-25 20:19:57,Jáchym Toušek,2020-05-06 15:45:05,"```suggestion
    public function reset(?int $signalCount = null)
```",neutral,constructive
39,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-04-25 20:23:50,Jáchym Toušek,2020-05-06 15:45:05,useless annotation,not inclusive,constructive
40,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-04-25 20:24:14,Jáchym Toušek,2020-05-06 15:45:05,`: void` ?,neutral,constructive
41,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-04-25 20:43:11,Jáchym Toušek,2020-05-06 15:45:05,"I don't see any point in resolving with true. The promise should be Promise\<void\> I think.
```suggestion
            $this->deferred->resolve();
```",inclusive,constructive
42,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-04-25 20:44:53,Jáchym Toušek,2020-05-06 15:45:05,"I'm considering whether calling this should maybe fail the original promise if it wasn't resolved yet. Thoughts?

Or I'd even consider dropping this method. I honestly don't see much use for it - personally I'd create a new instance anyway.",inclusive,constructive
43,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-04-26 04:37:11,Aaron Piotrowski,2020-05-06 15:45:05,You can use `AsyncTestCase` in this package to remove the need to call `Loop::run()` in tests.,inclusive,constructive
44,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-04-26 21:47:57,Sascha-Oliver Prolic,2020-05-06 15:45:05,"agree, removed",inclusive,constructive
45,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-04-26 21:48:11,Sascha-Oliver Prolic,2020-05-06 15:45:05,done,inclusive,neutral
46,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-04-26 21:48:21,Sascha-Oliver Prolic,2020-05-06 15:45:05,done,inclusive,neutral
47,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-04-27 06:01:41,Niklas Keller,2020-05-06 15:45:05,Should we name it getRemainingCount to make it even clearer that it counts down? ,inclusive,constructive
48,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-04-27 08:03:12,Sascha-Oliver Prolic,2020-05-06 15:45:05,done,inclusive,neutral
49,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-05-02 09:04:43,Niklas Keller,2020-05-06 15:45:05,`arrive` would be another possible name.,inclusive,constructive
50,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-05-02 09:05:38,Niklas Keller,2020-05-06 15:45:05,"This `if` can be removed due to the `if` below, no?",inclusive,constructive
51,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-05-02 09:06:04,Niklas Keller,2020-05-06 15:45:05,"```suggestion
        if ($this->remainingCount === 0) {
```",inclusive,constructive
52,sync,amphp,9,Add countdown barrier,"PullRequestPart(sha=""70cff619c42dc840621b78601e3341dc72b17303"")",Sascha-Oliver Prolic,[],https://api.github.com/repos/amphp/sync/pulls/9,closed,references https://github.com/amphp/amp/pull/246 and https://github.com/amphp/amp/issues/244,248,0,3,3,2020-04-25 20:13:31,2020-05-06 15:56:10,True,2020-05-06 15:56:10,Niklas Keller,17,2020-05-06 19:10:42,True,2020-05-02 09:09:30,Niklas Keller,2020-05-06 15:45:05,Should `signal` return the promise as well?,inclusive,constructive
53,sync,amphp,10,Move abstract tests,"PullRequestPart(sha=""96e31bb7c363c6c50d5ad4b8dab29d6aec4fc355"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/10,closed,Needed for https://github.com/amphp/file/pull/43,25,14,4,1,2020-05-01 04:42:03,2020-05-02 11:58:26,False,,,0,2020-05-03 07:01:33,False,2020-05-01 06:54:16,Jáchym Toušek,2020-05-01 06:54:16,Note: I'll also need a new release of amphp/sync after this is merged in order to continue my work in amphp/file.,inclusive,constructive
54,sync,amphp,10,Move abstract tests,"PullRequestPart(sha=""96e31bb7c363c6c50d5ad4b8dab29d6aec4fc355"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/10,closed,Needed for https://github.com/amphp/file/pull/43,25,14,4,1,2020-05-01 04:42:03,2020-05-02 11:58:26,False,,,0,2020-05-03 07:01:33,False,2020-05-01 20:43:57,Niklas Keller,2020-05-01 20:43:57,"I'm not a fan of making tests part of the public API, especially as PHPUnit releases many more major versions as we do in our packages.

A work around is - - prefer-source combined with an autoload-dev rule. ",inclusive,constructive
55,sync,amphp,10,Move abstract tests,"PullRequestPart(sha=""96e31bb7c363c6c50d5ad4b8dab29d6aec4fc355"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/10,closed,Needed for https://github.com/amphp/file/pull/43,25,14,4,1,2020-05-01 04:42:03,2020-05-02 11:58:26,False,,,0,2020-05-03 07:01:33,False,2020-05-01 20:49:22,Jáchym Toušek,2020-05-01 20:49:22,I really dislike that workaround to be honest. 😅  But if that's what you guys prefer... @trowski ?,inclusive,constructive
56,sync,amphp,10,Move abstract tests,"PullRequestPart(sha=""96e31bb7c363c6c50d5ad4b8dab29d6aec4fc355"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/10,closed,Needed for https://github.com/amphp/file/pull/43,25,14,4,1,2020-05-01 04:42:03,2020-05-02 11:58:26,False,,,0,2020-05-03 07:01:33,False,2020-05-02 11:58:20,Jáchym Toušek,2020-05-02 11:58:20,The workaround was used instead so this is now obsolete. Closing.,inclusive,constructive
57,sync,amphp,11,Fix docblock type,"PullRequestPart(sha=""db5558d8da5aa527aaa0d8059cd6a82a65d36928"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/11,closed,I'd also like to mark the class as final and set release method as protected but that would be a BC break.,1,1,1,1,2020-05-02 08:58:17,2020-05-02 09:00:58,True,2020-05-02 09:00:58,Niklas Keller,0,2020-05-02 09:01:09,False,2020-05-02 09:01:09,Niklas Keller,2020-05-02 09:01:09,"Thanks! We can fix that in the next major, yes.",neutral,not constructive
58,sync,amphp,13,Improve docblock type,"PullRequestPart(sha=""0e153e033854a2496d2665e682a56d00071824bf"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/13,closed,,1,2,0,2,2020-05-02 09:44:21,2020-05-02 10:18:35,True,2020-05-02 10:18:34,Niklas Keller,3,2020-05-02 10:18:35,True,2020-05-02 09:47:11,Niklas Keller,2020-05-02 09:48:06,It gets nulled in `::release()`.,neutral,constructive
59,sync,amphp,13,Improve docblock type,"PullRequestPart(sha=""0e153e033854a2496d2665e682a56d00071824bf"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/13,closed,,1,2,0,2,2020-05-02 09:44:21,2020-05-02 10:18:35,True,2020-05-02 10:18:34,Niklas Keller,3,2020-05-02 10:18:35,True,2020-05-02 09:48:01,Jáchym Toušek,2020-05-02 09:48:06,"```suggestion
    /** @var callable|null The function to be called on release or null if the lock has been released. */
```",inclusive,constructive
60,sync,amphp,13,Improve docblock type,"PullRequestPart(sha=""0e153e033854a2496d2665e682a56d00071824bf"")",Jáchym Toušek,[],https://api.github.com/repos/amphp/sync/pulls/13,closed,,1,2,0,2,2020-05-02 09:44:21,2020-05-02 10:18:35,True,2020-05-02 10:18:34,Niklas Keller,3,2020-05-02 10:18:35,True,2020-05-02 09:48:22,Jáchym Toušek,2020-05-02 09:48:22,"Missed that, sorry.",inclusive,neutral
61,sync,amphp,15,Add concurrent iterator functions,"PullRequestPart(sha=""0eadd35c9cbce4b700e7b7b37c41364b2f37a544"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/15,closed,"This allows simplifying https://github.com/Insolita/php-async-benchmarks/pull/2.

```php
private function processRequests(Iterator $urls): Promise
{
    return call(function () use ($urls) {
        $this->goodFile = yield File\open($this->tempDir . '/ok.txt', 'a');
        $this->badFile = yield File\open($this->tempDir . '/bad.txt', 'a');

        try {
            yield Queue::fromIterator($urls)->process(new LocalSemaphore($this->concurrency),
                function (string $url) {
                    /** @var Response $response */
                    $response = yield $this->client->request(new Request($url));
                    yield $this->processHtml(yield $response->getBody()->buffer(), $url);
                }, function (\Throwable $error, string $url) {
                    yield $this->badFile->write($url . \PHP_EOL);
                }
            );
        } finally {
            yield $this->goodFile->close();
            yield $this->badFile->close();
        }
    });
}",657,25,6,26,2020-05-03 16:56:41,2020-05-07 18:55:03,True,2020-05-07 18:55:03,Niklas Keller,9,2020-05-07 18:55:05,False,2020-05-03 17:17:03,Insolita,2020-05-03 17:24:20,"@kelunik this is good for my example task when we have a predefined set of urls, but what about a crawling task, when we will want add to queue additional urls from a response handler. Is it will be not overcomplicated if we will wrap links scraped from page to iterator and call processRequests() recursively? ",inclusive,constructive
62,sync,amphp,15,Add concurrent iterator functions,"PullRequestPart(sha=""0eadd35c9cbce4b700e7b7b37c41364b2f37a544"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/15,closed,"This allows simplifying https://github.com/Insolita/php-async-benchmarks/pull/2.

```php
private function processRequests(Iterator $urls): Promise
{
    return call(function () use ($urls) {
        $this->goodFile = yield File\open($this->tempDir . '/ok.txt', 'a');
        $this->badFile = yield File\open($this->tempDir . '/bad.txt', 'a');

        try {
            yield Queue::fromIterator($urls)->process(new LocalSemaphore($this->concurrency),
                function (string $url) {
                    /** @var Response $response */
                    $response = yield $this->client->request(new Request($url));
                    yield $this->processHtml(yield $response->getBody()->buffer(), $url);
                }, function (\Throwable $error, string $url) {
                    yield $this->badFile->write($url . \PHP_EOL);
                }
            );
        } finally {
            yield $this->goodFile->close();
            yield $this->badFile->close();
        }
    });
}",657,25,6,26,2020-05-03 16:56:41,2020-05-07 18:55:03,True,2020-05-07 18:55:03,Niklas Keller,9,2020-05-07 18:55:05,False,2020-05-03 17:34:32,Niklas Keller,2020-05-03 17:34:32,"@Insolita It shouldn't use recursion, no. You can use `Amp\Emitter` instead, the only thing you need to know is when to call `Emitter::complete()`. I've added an example, do you think that's fine?",inclusive,constructive
63,sync,amphp,15,Add concurrent iterator functions,"PullRequestPart(sha=""0eadd35c9cbce4b700e7b7b37c41364b2f37a544"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/15,closed,"This allows simplifying https://github.com/Insolita/php-async-benchmarks/pull/2.

```php
private function processRequests(Iterator $urls): Promise
{
    return call(function () use ($urls) {
        $this->goodFile = yield File\open($this->tempDir . '/ok.txt', 'a');
        $this->badFile = yield File\open($this->tempDir . '/bad.txt', 'a');

        try {
            yield Queue::fromIterator($urls)->process(new LocalSemaphore($this->concurrency),
                function (string $url) {
                    /** @var Response $response */
                    $response = yield $this->client->request(new Request($url));
                    yield $this->processHtml(yield $response->getBody()->buffer(), $url);
                }, function (\Throwable $error, string $url) {
                    yield $this->badFile->write($url . \PHP_EOL);
                }
            );
        } finally {
            yield $this->goodFile->close();
            yield $this->badFile->close();
        }
    });
}",657,25,6,26,2020-05-03 16:56:41,2020-05-07 18:55:03,True,2020-05-07 18:55:03,Niklas Keller,9,2020-05-07 18:55:05,False,2020-05-04 16:07:47,Aaron Piotrowski,2020-05-04 16:10:26,"@kelunik How about rolling this into a function returning an `Iterator`. Since an iterator can only be transversed once, holding it in an object doesn't really make sense IMO.

```php
function concurrentMap(Iterator $iterator, Semaphore $semaphore, callable $processor): Iterator
{
    return new Producer(function (callable $emit) use ($iterator, $semaphore, $processor): \Generator {
        $pending = [];

        while (yield $iterator->advance()) {
            /** @var Lock $lock */
            $lock = yield $semaphore->acquire();

            $job = $iterator->getCurrent();

            $promise = call(function () use ($lock, $job, $processor, $emit): \Generator {
                try {
                    yield $emit(call($processor, $job));
                } finally {
                    $lock->release();
                }
            });

            $promiseId = \spl_object_id($promise);

            $pending[$promiseId] = $promise;
            $promise->onResolve(function () use (&$pending, $promiseId): void {
                unset($pending[$promiseId]);
            });
        }

        yield Promise\any($pending);
    });
}
```",inclusive,constructive
64,sync,amphp,15,Add concurrent iterator functions,"PullRequestPart(sha=""0eadd35c9cbce4b700e7b7b37c41364b2f37a544"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/15,closed,"This allows simplifying https://github.com/Insolita/php-async-benchmarks/pull/2.

```php
private function processRequests(Iterator $urls): Promise
{
    return call(function () use ($urls) {
        $this->goodFile = yield File\open($this->tempDir . '/ok.txt', 'a');
        $this->badFile = yield File\open($this->tempDir . '/bad.txt', 'a');

        try {
            yield Queue::fromIterator($urls)->process(new LocalSemaphore($this->concurrency),
                function (string $url) {
                    /** @var Response $response */
                    $response = yield $this->client->request(new Request($url));
                    yield $this->processHtml(yield $response->getBody()->buffer(), $url);
                }, function (\Throwable $error, string $url) {
                    yield $this->badFile->write($url . \PHP_EOL);
                }
            );
        } finally {
            yield $this->goodFile->close();
            yield $this->badFile->close();
        }
    });
}",657,25,6,26,2020-05-03 16:56:41,2020-05-07 18:55:03,True,2020-05-07 18:55:03,Niklas Keller,9,2020-05-07 18:55:05,False,2020-05-04 17:01:36,Niklas Keller,2020-05-04 17:01:36,"@trowski Seems fine, too, but we still need the error handler, otherwise you can only react to the first failure.",inclusive,constructive
65,sync,amphp,15,Add concurrent iterator functions,"PullRequestPart(sha=""0eadd35c9cbce4b700e7b7b37c41364b2f37a544"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/15,closed,"This allows simplifying https://github.com/Insolita/php-async-benchmarks/pull/2.

```php
private function processRequests(Iterator $urls): Promise
{
    return call(function () use ($urls) {
        $this->goodFile = yield File\open($this->tempDir . '/ok.txt', 'a');
        $this->badFile = yield File\open($this->tempDir . '/bad.txt', 'a');

        try {
            yield Queue::fromIterator($urls)->process(new LocalSemaphore($this->concurrency),
                function (string $url) {
                    /** @var Response $response */
                    $response = yield $this->client->request(new Request($url));
                    yield $this->processHtml(yield $response->getBody()->buffer(), $url);
                }, function (\Throwable $error, string $url) {
                    yield $this->badFile->write($url . \PHP_EOL);
                }
            );
        } finally {
            yield $this->goodFile->close();
            yield $this->badFile->close();
        }
    });
}",657,25,6,26,2020-05-03 16:56:41,2020-05-07 18:55:03,True,2020-05-07 18:55:03,Niklas Keller,9,2020-05-07 18:55:05,False,2020-05-04 17:43:26,Aaron Piotrowski,2020-05-04 17:43:26,"> @trowski Seems fine, too, but we still need the error handler, otherwise you can only react to the first failure.

I guess that depends. `Amp\Iterator\map()` fails the returned `Iterator` the first time the callback throws. So I'd say the same should happen here.",inclusive,constructive
66,sync,amphp,15,Add concurrent iterator functions,"PullRequestPart(sha=""0eadd35c9cbce4b700e7b7b37c41364b2f37a544"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/15,closed,"This allows simplifying https://github.com/Insolita/php-async-benchmarks/pull/2.

```php
private function processRequests(Iterator $urls): Promise
{
    return call(function () use ($urls) {
        $this->goodFile = yield File\open($this->tempDir . '/ok.txt', 'a');
        $this->badFile = yield File\open($this->tempDir . '/bad.txt', 'a');

        try {
            yield Queue::fromIterator($urls)->process(new LocalSemaphore($this->concurrency),
                function (string $url) {
                    /** @var Response $response */
                    $response = yield $this->client->request(new Request($url));
                    yield $this->processHtml(yield $response->getBody()->buffer(), $url);
                }, function (\Throwable $error, string $url) {
                    yield $this->badFile->write($url . \PHP_EOL);
                }
            );
        } finally {
            yield $this->goodFile->close();
            yield $this->badFile->close();
        }
    });
}",657,25,6,26,2020-05-03 16:56:41,2020-05-07 18:55:03,True,2020-05-07 18:55:03,Niklas Keller,9,2020-05-07 18:55:05,False,2020-05-05 18:09:35,Niklas Keller,2020-05-05 18:09:35,Got it working with correct GC behavior \o/,inclusive,constructive
67,sync,amphp,15,Add concurrent iterator functions,"PullRequestPart(sha=""0eadd35c9cbce4b700e7b7b37c41364b2f37a544"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/15,closed,"This allows simplifying https://github.com/Insolita/php-async-benchmarks/pull/2.

```php
private function processRequests(Iterator $urls): Promise
{
    return call(function () use ($urls) {
        $this->goodFile = yield File\open($this->tempDir . '/ok.txt', 'a');
        $this->badFile = yield File\open($this->tempDir . '/bad.txt', 'a');

        try {
            yield Queue::fromIterator($urls)->process(new LocalSemaphore($this->concurrency),
                function (string $url) {
                    /** @var Response $response */
                    $response = yield $this->client->request(new Request($url));
                    yield $this->processHtml(yield $response->getBody()->buffer(), $url);
                }, function (\Throwable $error, string $url) {
                    yield $this->badFile->write($url . \PHP_EOL);
                }
            );
        } finally {
            yield $this->goodFile->close();
            yield $this->badFile->close();
        }
    });
}",657,25,6,26,2020-05-03 16:56:41,2020-05-07 18:55:03,True,2020-05-07 18:55:03,Niklas Keller,9,2020-05-07 18:55:05,True,2020-05-03 17:17:24,Jáchym Toušek,2020-05-07 18:16:20,add newline?,neutral,not constructive
68,sync,amphp,15,Add concurrent iterator functions,"PullRequestPart(sha=""0eadd35c9cbce4b700e7b7b37c41364b2f37a544"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/15,closed,"This allows simplifying https://github.com/Insolita/php-async-benchmarks/pull/2.

```php
private function processRequests(Iterator $urls): Promise
{
    return call(function () use ($urls) {
        $this->goodFile = yield File\open($this->tempDir . '/ok.txt', 'a');
        $this->badFile = yield File\open($this->tempDir . '/bad.txt', 'a');

        try {
            yield Queue::fromIterator($urls)->process(new LocalSemaphore($this->concurrency),
                function (string $url) {
                    /** @var Response $response */
                    $response = yield $this->client->request(new Request($url));
                    yield $this->processHtml(yield $response->getBody()->buffer(), $url);
                }, function (\Throwable $error, string $url) {
                    yield $this->badFile->write($url . \PHP_EOL);
                }
            );
        } finally {
            yield $this->goodFile->close();
            yield $this->badFile->close();
        }
    });
}",657,25,6,26,2020-05-03 16:56:41,2020-05-07 18:55:03,True,2020-05-07 18:55:03,Niklas Keller,9,2020-05-07 18:55:05,True,2020-05-03 17:35:36,Jáchym Toušek,2020-05-07 18:16:20,Perhaps use SplObjectStorage instead?,inclusive,constructive
69,sync,amphp,15,Add concurrent iterator functions,"PullRequestPart(sha=""0eadd35c9cbce4b700e7b7b37c41364b2f37a544"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/15,closed,"This allows simplifying https://github.com/Insolita/php-async-benchmarks/pull/2.

```php
private function processRequests(Iterator $urls): Promise
{
    return call(function () use ($urls) {
        $this->goodFile = yield File\open($this->tempDir . '/ok.txt', 'a');
        $this->badFile = yield File\open($this->tempDir . '/bad.txt', 'a');

        try {
            yield Queue::fromIterator($urls)->process(new LocalSemaphore($this->concurrency),
                function (string $url) {
                    /** @var Response $response */
                    $response = yield $this->client->request(new Request($url));
                    yield $this->processHtml(yield $response->getBody()->buffer(), $url);
                }, function (\Throwable $error, string $url) {
                    yield $this->badFile->write($url . \PHP_EOL);
                }
            );
        } finally {
            yield $this->goodFile->close();
            yield $this->badFile->close();
        }
    });
}",657,25,6,26,2020-05-03 16:56:41,2020-05-07 18:55:03,True,2020-05-07 18:55:03,Niklas Keller,9,2020-05-07 18:55:05,True,2020-05-04 17:19:15,Niklas Keller,2020-05-07 18:16:20,That'd create a circular reference. :-(,neutral,constructive
70,sync,amphp,15,Add concurrent iterator functions,"PullRequestPart(sha=""0eadd35c9cbce4b700e7b7b37c41364b2f37a544"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/15,closed,"This allows simplifying https://github.com/Insolita/php-async-benchmarks/pull/2.

```php
private function processRequests(Iterator $urls): Promise
{
    return call(function () use ($urls) {
        $this->goodFile = yield File\open($this->tempDir . '/ok.txt', 'a');
        $this->badFile = yield File\open($this->tempDir . '/bad.txt', 'a');

        try {
            yield Queue::fromIterator($urls)->process(new LocalSemaphore($this->concurrency),
                function (string $url) {
                    /** @var Response $response */
                    $response = yield $this->client->request(new Request($url));
                    yield $this->processHtml(yield $response->getBody()->buffer(), $url);
                }, function (\Throwable $error, string $url) {
                    yield $this->badFile->write($url . \PHP_EOL);
                }
            );
        } finally {
            yield $this->goodFile->close();
            yield $this->badFile->close();
        }
    });
}",657,25,6,26,2020-05-03 16:56:41,2020-05-07 18:55:03,True,2020-05-07 18:55:03,Niklas Keller,9,2020-05-07 18:55:05,True,2020-05-04 20:21:02,Jáchym Toušek,2020-05-07 18:16:20,Is this necessary? I'm not sure but I think the effect might be the same if you don't catch at all (just keep the finally),inclusive,not constructive
71,sync,amphp,15,Add concurrent iterator functions,"PullRequestPart(sha=""0eadd35c9cbce4b700e7b7b37c41364b2f37a544"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/15,closed,"This allows simplifying https://github.com/Insolita/php-async-benchmarks/pull/2.

```php
private function processRequests(Iterator $urls): Promise
{
    return call(function () use ($urls) {
        $this->goodFile = yield File\open($this->tempDir . '/ok.txt', 'a');
        $this->badFile = yield File\open($this->tempDir . '/bad.txt', 'a');

        try {
            yield Queue::fromIterator($urls)->process(new LocalSemaphore($this->concurrency),
                function (string $url) {
                    /** @var Response $response */
                    $response = yield $this->client->request(new Request($url));
                    yield $this->processHtml(yield $response->getBody()->buffer(), $url);
                }, function (\Throwable $error, string $url) {
                    yield $this->badFile->write($url . \PHP_EOL);
                }
            );
        } finally {
            yield $this->goodFile->close();
            yield $this->badFile->close();
        }
    });
}",657,25,6,26,2020-05-03 16:56:41,2020-05-07 18:55:03,True,2020-05-07 18:55:03,Niklas Keller,9,2020-05-07 18:55:05,True,2020-05-04 20:22:53,Niklas Keller,2020-05-07 18:16:20,In that case `$error` is never set and it never fails?,inclusive,neutral
72,sync,amphp,15,Add concurrent iterator functions,"PullRequestPart(sha=""0eadd35c9cbce4b700e7b7b37c41364b2f37a544"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/15,closed,"This allows simplifying https://github.com/Insolita/php-async-benchmarks/pull/2.

```php
private function processRequests(Iterator $urls): Promise
{
    return call(function () use ($urls) {
        $this->goodFile = yield File\open($this->tempDir . '/ok.txt', 'a');
        $this->badFile = yield File\open($this->tempDir . '/bad.txt', 'a');

        try {
            yield Queue::fromIterator($urls)->process(new LocalSemaphore($this->concurrency),
                function (string $url) {
                    /** @var Response $response */
                    $response = yield $this->client->request(new Request($url));
                    yield $this->processHtml(yield $response->getBody()->buffer(), $url);
                }, function (\Throwable $error, string $url) {
                    yield $this->badFile->write($url . \PHP_EOL);
                }
            );
        } finally {
            yield $this->goodFile->close();
            yield $this->badFile->close();
        }
    });
}",657,25,6,26,2020-05-03 16:56:41,2020-05-07 18:55:03,True,2020-05-07 18:55:03,Niklas Keller,9,2020-05-07 18:55:05,True,2020-05-04 20:29:09,Jáchym Toušek,2020-05-07 18:16:20,"I meant remove the $error variable completely too... just try if the tests pass like that, if not then I missed something",inclusive,not constructive
73,sync,amphp,15,Add concurrent iterator functions,"PullRequestPart(sha=""0eadd35c9cbce4b700e7b7b37c41364b2f37a544"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/15,closed,"This allows simplifying https://github.com/Insolita/php-async-benchmarks/pull/2.

```php
private function processRequests(Iterator $urls): Promise
{
    return call(function () use ($urls) {
        $this->goodFile = yield File\open($this->tempDir . '/ok.txt', 'a');
        $this->badFile = yield File\open($this->tempDir . '/bad.txt', 'a');

        try {
            yield Queue::fromIterator($urls)->process(new LocalSemaphore($this->concurrency),
                function (string $url) {
                    /** @var Response $response */
                    $response = yield $this->client->request(new Request($url));
                    yield $this->processHtml(yield $response->getBody()->buffer(), $url);
                }, function (\Throwable $error, string $url) {
                    yield $this->badFile->write($url . \PHP_EOL);
                }
            );
        } finally {
            yield $this->goodFile->close();
            yield $this->badFile->close();
        }
    });
}",657,25,6,26,2020-05-03 16:56:41,2020-05-07 18:55:03,True,2020-05-07 18:55:03,Niklas Keller,9,2020-05-07 18:55:05,True,2020-05-05 16:59:29,Niklas Keller,2020-05-07 18:16:20,"No, as `$promise` is never yielded or errors otherwise handled.",inclusive,neutral
74,sync,amphp,15,Add concurrent iterator functions,"PullRequestPart(sha=""0eadd35c9cbce4b700e7b7b37c41364b2f37a544"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/15,closed,"This allows simplifying https://github.com/Insolita/php-async-benchmarks/pull/2.

```php
private function processRequests(Iterator $urls): Promise
{
    return call(function () use ($urls) {
        $this->goodFile = yield File\open($this->tempDir . '/ok.txt', 'a');
        $this->badFile = yield File\open($this->tempDir . '/bad.txt', 'a');

        try {
            yield Queue::fromIterator($urls)->process(new LocalSemaphore($this->concurrency),
                function (string $url) {
                    /** @var Response $response */
                    $response = yield $this->client->request(new Request($url));
                    yield $this->processHtml(yield $response->getBody()->buffer(), $url);
                }, function (\Throwable $error, string $url) {
                    yield $this->badFile->write($url . \PHP_EOL);
                }
            );
        } finally {
            yield $this->goodFile->close();
            yield $this->badFile->close();
        }
    });
}",657,25,6,26,2020-05-03 16:56:41,2020-05-07 18:55:03,True,2020-05-07 18:55:03,Niklas Keller,9,2020-05-07 18:55:05,True,2020-05-06 14:34:20,Aaron Piotrowski,2020-05-07 18:16:20,"Consider adding `return` here. Couldn't hurt, right?

EDIT: Realized you don't even need the `call` here, just simply `return Iterator\toArray(…)`.",inclusive,neutral
75,sync,amphp,15,Add concurrent iterator functions,"PullRequestPart(sha=""0eadd35c9cbce4b700e7b7b37c41364b2f37a544"")",Niklas Keller,[],https://api.github.com/repos/amphp/sync/pulls/15,closed,"This allows simplifying https://github.com/Insolita/php-async-benchmarks/pull/2.

```php
private function processRequests(Iterator $urls): Promise
{
    return call(function () use ($urls) {
        $this->goodFile = yield File\open($this->tempDir . '/ok.txt', 'a');
        $this->badFile = yield File\open($this->tempDir . '/bad.txt', 'a');

        try {
            yield Queue::fromIterator($urls)->process(new LocalSemaphore($this->concurrency),
                function (string $url) {
                    /** @var Response $response */
                    $response = yield $this->client->request(new Request($url));
                    yield $this->processHtml(yield $response->getBody()->buffer(), $url);
                }, function (\Throwable $error, string $url) {
                    yield $this->badFile->write($url . \PHP_EOL);
                }
            );
        } finally {
            yield $this->goodFile->close();
            yield $this->badFile->close();
        }
    });
}",657,25,6,26,2020-05-03 16:56:41,2020-05-07 18:55:03,True,2020-05-07 18:55:03,Niklas Keller,9,2020-05-07 18:55:05,True,2020-05-06 15:14:43,Niklas Keller,2020-05-07 18:16:20,"I need it, because the return value shouldn't always be an empty array, but rather `Promise<void>`",inclusive,not constructive
76,sync,amphp,16,Fix typo,"PullRequestPart(sha=""47359e574f0256c4ed860cd03716c2238be24855"")",Anatoly Pashin,[],https://api.github.com/repos/amphp/sync/pulls/16,closed,,2,2,1,1,2020-07-22 00:49:02,2020-07-22 05:47:18,True,2020-07-22 05:47:18,Niklas Keller,0,2020-07-22 06:03:19,False,2020-07-22 05:47:31,Niklas Keller,2020-07-22 05:47:31,Thanks! ,neutral,not constructive
77,sync,amphp,18,PHP 8 support,"PullRequestPart(sha=""07e0aed804e14234c6c5a6c6492ed2f4ebf3dcca"")",Daniil Gentili,[],https://api.github.com/repos/amphp/sync/pulls/18,closed,"On PHP 8, private __sleep methods issue a warning/exception.",3,2,2,2,2021-09-04 16:21:10,2021-09-14 06:36:16,True,2021-09-14 06:36:16,Niklas Keller,0,2021-09-14 08:01:14,False,2021-09-14 06:36:27,Niklas Keller,2021-09-14 06:36:27,Thanks! ,neutral,not constructive
78,sync,amphp,18,PHP 8 support,"PullRequestPart(sha=""07e0aed804e14234c6c5a6c6492ed2f4ebf3dcca"")",Daniil Gentili,[],https://api.github.com/repos/amphp/sync/pulls/18,closed,"On PHP 8, private __sleep methods issue a warning/exception.",3,2,2,2,2021-09-04 16:21:10,2021-09-14 06:36:16,True,2021-09-14 06:36:16,Niklas Keller,0,2021-09-14 08:01:14,False,2021-09-14 08:01:14,Daniil Gentili,2021-09-14 08:01:14,"Yay!
Can I haz tag? <3",inclusive,not constructive
79,discord.js,discordjs,6278,types(StartThreadOptions): mark autoArchiveDuration as optional,"PullRequestPart(sha=""8419783bcf66f32eda19a2176b517d6f80bd0579"")",Rodry,"[Label(name=""documentation""), Label(name=""typings""), Label(name=""threads"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6278,open,"**Please describe the changes this PR makes and why it should be merged:**
Since the addition of default auto archive durations to Discord, the autoArchiveDuration parameter is now optional on the Discord API (tested). This PR marks that parameter as optional on the docs and types. Also moved the ThreadAutoArchiveDuration typedef to the Message.js file since it's only used there, no changes in the content of the typdef however.

穴 Upstream PR: 
- https://github.com/discord/discord-api-docs/pull/3567

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",22,15,4,2,2021-08-02 21:05:33,,False,,,0,2021-10-14 16:52:12,False,2021-08-04 20:57:42,Rodry,2021-08-04 20:57:42,Made `this.channel.defaultArchiveDuration` the default for autoArchiveDuration due to the conversation on the upstream PR where we found that Discord always defaults to 24h no matter what this is set to and passing null is ignored so it will replicate the default behavior of the API,inclusive,constructive
80,discord.js,discordjs,6278,types(StartThreadOptions): mark autoArchiveDuration as optional,"PullRequestPart(sha=""8419783bcf66f32eda19a2176b517d6f80bd0579"")",Rodry,"[Label(name=""documentation""), Label(name=""typings""), Label(name=""threads"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6278,open,"**Please describe the changes this PR makes and why it should be merged:**
Since the addition of default auto archive durations to Discord, the autoArchiveDuration parameter is now optional on the Discord API (tested). This PR marks that parameter as optional on the docs and types. Also moved the ThreadAutoArchiveDuration typedef to the Message.js file since it's only used there, no changes in the content of the typdef however.

穴 Upstream PR: 
- https://github.com/discord/discord-api-docs/pull/3567

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",22,15,4,2,2021-08-02 21:05:33,,False,,,0,2021-10-14 16:52:12,False,2021-08-05 15:41:49,Noel,2021-08-05 15:41:49,I'm honestly not sure what to do with this PR in its current state and what seems to me like a Discord API bug.,inclusive,constructive
81,discord.js,discordjs,6278,types(StartThreadOptions): mark autoArchiveDuration as optional,"PullRequestPart(sha=""8419783bcf66f32eda19a2176b517d6f80bd0579"")",Rodry,"[Label(name=""documentation""), Label(name=""typings""), Label(name=""threads"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6278,open,"**Please describe the changes this PR makes and why it should be merged:**
Since the addition of default auto archive durations to Discord, the autoArchiveDuration parameter is now optional on the Discord API (tested). This PR marks that parameter as optional on the docs and types. Also moved the ThreadAutoArchiveDuration typedef to the Message.js file since it's only used there, no changes in the content of the typdef however.

穴 Upstream PR: 
- https://github.com/discord/discord-api-docs/pull/3567

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",22,15,4,2,2021-08-02 21:05:33,,False,,,0,2021-10-14 16:52:12,False,2021-08-05 15:46:24,Rodry,2021-08-05 15:46:24,"> I'm honestly not sure what to do with this PR in its current state and what seems to me like a Discord API bug.

I think we should wait to see what the dapi maintainers say about the other PR and if the bug gets fixed. If it does I can revert the last commit",inclusive,constructive
82,discord.js,discordjs,6278,types(StartThreadOptions): mark autoArchiveDuration as optional,"PullRequestPart(sha=""8419783bcf66f32eda19a2176b517d6f80bd0579"")",Rodry,"[Label(name=""documentation""), Label(name=""typings""), Label(name=""threads"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6278,open,"**Please describe the changes this PR makes and why it should be merged:**
Since the addition of default auto archive durations to Discord, the autoArchiveDuration parameter is now optional on the Discord API (tested). This PR marks that parameter as optional on the docs and types. Also moved the ThreadAutoArchiveDuration typedef to the Message.js file since it's only used there, no changes in the content of the typdef however.

穴 Upstream PR: 
- https://github.com/discord/discord-api-docs/pull/3567

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",22,15,4,2,2021-08-02 21:05:33,,False,,,0,2021-10-14 16:52:12,False,2021-10-14 16:52:12,Rodry,2021-10-14 16:52:12,Upstream PR has been merged,neutral,constructive
83,discord.js,discordjs,6324,refactor(MessageCreate): remove message event,"PullRequestPart(sha=""2bb744d378333b3de2123d18bbd2ee07688ba19f"")",Matt (IPv4) Cowley,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6324,open,"**Please describe the changes this PR makes and why it should be merged:**

First(?) semver major PR ready for v14 -- removes the deprecated client `message` event.

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)",1,16,1,2,2021-08-06 21:24:24,,False,,,0,2021-10-13 13:05:47,False,2021-08-06 21:31:01,Noel,2021-08-06 21:31:01,Slash commands only 乖,inclusive,constructive
84,discord.js,discordjs,6326,refactor(InteractionCreate): remove interaction event,"PullRequestPart(sha=""3a6ecfae839b63200b6ec471a92f7e8d7d06f541"")",Matt (IPv4) Cowley,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6326,open,"**Please describe the changes this PR makes and why it should be merged:**

Akin to #6324, removes the deprecated client `interaction` event.

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)",1,16,2,2,2021-08-06 21:33:53,,False,,,0,2021-10-13 13:05:27,False,2021-10-02 11:58:29,Noel,2021-10-02 11:58:29,This needs a rebase.,neutral,neutral
85,discord.js,discordjs,6326,refactor(InteractionCreate): remove interaction event,"PullRequestPart(sha=""3a6ecfae839b63200b6ec471a92f7e8d7d06f541"")",Matt (IPv4) Cowley,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6326,open,"**Please describe the changes this PR makes and why it should be merged:**

Akin to #6324, removes the deprecated client `interaction` event.

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)",1,16,2,2,2021-08-06 21:33:53,,False,,,0,2021-10-13 13:05:27,False,2021-10-03 12:38:42,Matt (IPv4) Cowley,2021-10-03 12:38:42,笨� Rebased,neutral,neutral
86,discord.js,discordjs,6327,refactor(Client): remove message sweeping options,"PullRequestPart(sha=""15b83ebf56299bf9ce13d8b2285b00af64b3f47a"")",Matt (IPv4) Cowley,"[Label(name=""caching""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6327,open,"**Please describe the changes this PR makes and why it should be merged:**

Removes the deprecated `messageSweepInterval` and `messageCacheLifetime` client options, and the `sweepMessages` client method that they used.

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
",0,72,2,1,2021-08-06 21:43:34,,False,,,0,2021-10-13 13:05:56,False,2021-10-02 11:58:33,Noel,2021-10-02 11:58:33,This needs a rebase.,neutral,neutral
87,discord.js,discordjs,6327,refactor(Client): remove message sweeping options,"PullRequestPart(sha=""15b83ebf56299bf9ce13d8b2285b00af64b3f47a"")",Matt (IPv4) Cowley,"[Label(name=""caching""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6327,open,"**Please describe the changes this PR makes and why it should be merged:**

Removes the deprecated `messageSweepInterval` and `messageCacheLifetime` client options, and the `sweepMessages` client method that they used.

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
",0,72,2,1,2021-08-06 21:43:34,,False,,,0,2021-10-13 13:05:56,False,2021-10-03 12:38:13,Matt (IPv4) Cowley,2021-10-03 12:38:13,笨� Rebased,neutral,neutral
88,discord.js,discordjs,6377,fix(VoiceState): Ensure `suppress` & `streaming` have proper fallback values,"PullRequestPart(sha=""29ade69be2d6e6db44ade67a23226ebc9444fae6"")",,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6377,open,"**Please describe the changes this PR makes and why it should be merged:**
`VoiceState#suppress` can be `undefined`. This is achieved by not knowing the state of a `GuildMember`'s `VoiceState` upon them joining a voice channel or a stage channel.

This can be reproduced by starting the bot up using the following code:
```JavaScript
const Client = new (require(""discord.js"")).Client({
  intents: [
    ""GUILD_VOICE_STATES""
  ]
});

Client.on(""voiceStateUpdate"", oldState => console.log(oldState));

Client.login(""token"");
```
<details>
<summary><code>console.log(oldState)</code></summary>

```JavaScript
VoiceState {
  guild: <ref *1> Guild {
    id: '534940241002233896',
    name: undefined,
    icon: undefined,
    features: undefined,
    commands: GuildApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager],
      guild: [Circular *1]
    },
    members: GuildMemberManager { guild: [Circular *1] },
    channels: GuildChannelManager { guild: [Circular *1] },
    bans: GuildBanManager { guild: [Circular *1] },
    roles: RoleManager { guild: [Circular *1] },
    presences: PresenceManager {},
    voiceStates: VoiceStateManager { guild: [Circular *1] },
    stageInstances: StageInstanceManager { guild: [Circular *1] },
    invites: GuildInviteManager { guild: [Circular *1] },
    deleted: false,
    available: false,
    shardId: 0
  },
  id: '618976181026422814',
  serverDeaf: null,
  serverMute: null,
  selfDeaf: null,
  selfMute: null,
  selfVideo: null,
  sessionId: null,
  streaming: false,
  channelId: null,
  suppress: undefined,
  requestToSpeakTimestamp: null
}
```
</details>

It seems this happens because of this:
https://github.com/discordjs/discord.js/blob/622f398f4b36b00d0a347b548f63524703c2d395/src/client/actions/VoiceStateUpdate.js#L14

Since the guild member's voice state was not cached, a new `VoiceState` was being made. But there is no default value for `VoiceState#suppress`:
https://github.com/discordjs/discord.js/blob/006edca410f5df53f3272f7a402f2305f73ad14b/src/structures/VoiceState.js#L74
This is the source of it being `undefined`.

This pull request ensures the default value of `VoiceState#suppress` is `true`, as it can be assumed that upon joining a stage channel that they are suppressed from speaking.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",6,4,7,7,2021-08-10 19:44:22,,False,,,7,2021-10-03 22:16:14,False,2021-08-10 20:33:20,,2021-08-10 20:33:20,"Actually, it looks like the received packet includes `suppress`, so I just went ahead and supplied that when a new `VoiceState` was being created.",inclusive,constructive
89,discord.js,discordjs,6377,fix(VoiceState): Ensure `suppress` & `streaming` have proper fallback values,"PullRequestPart(sha=""29ade69be2d6e6db44ade67a23226ebc9444fae6"")",,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6377,open,"**Please describe the changes this PR makes and why it should be merged:**
`VoiceState#suppress` can be `undefined`. This is achieved by not knowing the state of a `GuildMember`'s `VoiceState` upon them joining a voice channel or a stage channel.

This can be reproduced by starting the bot up using the following code:
```JavaScript
const Client = new (require(""discord.js"")).Client({
  intents: [
    ""GUILD_VOICE_STATES""
  ]
});

Client.on(""voiceStateUpdate"", oldState => console.log(oldState));

Client.login(""token"");
```
<details>
<summary><code>console.log(oldState)</code></summary>

```JavaScript
VoiceState {
  guild: <ref *1> Guild {
    id: '534940241002233896',
    name: undefined,
    icon: undefined,
    features: undefined,
    commands: GuildApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager],
      guild: [Circular *1]
    },
    members: GuildMemberManager { guild: [Circular *1] },
    channels: GuildChannelManager { guild: [Circular *1] },
    bans: GuildBanManager { guild: [Circular *1] },
    roles: RoleManager { guild: [Circular *1] },
    presences: PresenceManager {},
    voiceStates: VoiceStateManager { guild: [Circular *1] },
    stageInstances: StageInstanceManager { guild: [Circular *1] },
    invites: GuildInviteManager { guild: [Circular *1] },
    deleted: false,
    available: false,
    shardId: 0
  },
  id: '618976181026422814',
  serverDeaf: null,
  serverMute: null,
  selfDeaf: null,
  selfMute: null,
  selfVideo: null,
  sessionId: null,
  streaming: false,
  channelId: null,
  suppress: undefined,
  requestToSpeakTimestamp: null
}
```
</details>

It seems this happens because of this:
https://github.com/discordjs/discord.js/blob/622f398f4b36b00d0a347b548f63524703c2d395/src/client/actions/VoiceStateUpdate.js#L14

Since the guild member's voice state was not cached, a new `VoiceState` was being made. But there is no default value for `VoiceState#suppress`:
https://github.com/discordjs/discord.js/blob/006edca410f5df53f3272f7a402f2305f73ad14b/src/structures/VoiceState.js#L74
This is the source of it being `undefined`.

This pull request ensures the default value of `VoiceState#suppress` is `true`, as it can be assumed that upon joining a stage channel that they are suppressed from speaking.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",6,4,7,7,2021-08-10 19:44:22,,False,,,7,2021-10-03 22:16:14,False,2021-08-11 15:53:42,,2021-08-11 15:53:42,"This issue also applies to `VoiceState#streaming`. By not knowing the state of a guild member's `VoiceState` upon them stopping streaming or leaving voice (whilst streaming) etc., `VoiceState#streaming` will be `false`, but in actual fact, this should have been `true`.

This wasn't much of an issue before, but since we have adopted this awesome caching behaviour which means sweeping the cache or setting a limit, there now exists a possibility that this is improperly set.

Should a new pull request be made for this, or should I modify this one to expand it also to the other property?",inclusive,constructive
90,discord.js,discordjs,6377,fix(VoiceState): Ensure `suppress` & `streaming` have proper fallback values,"PullRequestPart(sha=""29ade69be2d6e6db44ade67a23226ebc9444fae6"")",,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6377,open,"**Please describe the changes this PR makes and why it should be merged:**
`VoiceState#suppress` can be `undefined`. This is achieved by not knowing the state of a `GuildMember`'s `VoiceState` upon them joining a voice channel or a stage channel.

This can be reproduced by starting the bot up using the following code:
```JavaScript
const Client = new (require(""discord.js"")).Client({
  intents: [
    ""GUILD_VOICE_STATES""
  ]
});

Client.on(""voiceStateUpdate"", oldState => console.log(oldState));

Client.login(""token"");
```
<details>
<summary><code>console.log(oldState)</code></summary>

```JavaScript
VoiceState {
  guild: <ref *1> Guild {
    id: '534940241002233896',
    name: undefined,
    icon: undefined,
    features: undefined,
    commands: GuildApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager],
      guild: [Circular *1]
    },
    members: GuildMemberManager { guild: [Circular *1] },
    channels: GuildChannelManager { guild: [Circular *1] },
    bans: GuildBanManager { guild: [Circular *1] },
    roles: RoleManager { guild: [Circular *1] },
    presences: PresenceManager {},
    voiceStates: VoiceStateManager { guild: [Circular *1] },
    stageInstances: StageInstanceManager { guild: [Circular *1] },
    invites: GuildInviteManager { guild: [Circular *1] },
    deleted: false,
    available: false,
    shardId: 0
  },
  id: '618976181026422814',
  serverDeaf: null,
  serverMute: null,
  selfDeaf: null,
  selfMute: null,
  selfVideo: null,
  sessionId: null,
  streaming: false,
  channelId: null,
  suppress: undefined,
  requestToSpeakTimestamp: null
}
```
</details>

It seems this happens because of this:
https://github.com/discordjs/discord.js/blob/622f398f4b36b00d0a347b548f63524703c2d395/src/client/actions/VoiceStateUpdate.js#L14

Since the guild member's voice state was not cached, a new `VoiceState` was being made. But there is no default value for `VoiceState#suppress`:
https://github.com/discordjs/discord.js/blob/006edca410f5df53f3272f7a402f2305f73ad14b/src/structures/VoiceState.js#L74
This is the source of it being `undefined`.

This pull request ensures the default value of `VoiceState#suppress` is `true`, as it can be assumed that upon joining a stage channel that they are suppressed from speaking.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",6,4,7,7,2021-08-10 19:44:22,,False,,,7,2021-10-03 22:16:14,False,2021-08-11 19:49:08,Noel,2021-08-11 19:49:08,"Since it's the same scope: VoiceState in this case, I think it should be fine putting it into this PR.",inclusive,constructive
91,discord.js,discordjs,6377,fix(VoiceState): Ensure `suppress` & `streaming` have proper fallback values,"PullRequestPart(sha=""29ade69be2d6e6db44ade67a23226ebc9444fae6"")",,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6377,open,"**Please describe the changes this PR makes and why it should be merged:**
`VoiceState#suppress` can be `undefined`. This is achieved by not knowing the state of a `GuildMember`'s `VoiceState` upon them joining a voice channel or a stage channel.

This can be reproduced by starting the bot up using the following code:
```JavaScript
const Client = new (require(""discord.js"")).Client({
  intents: [
    ""GUILD_VOICE_STATES""
  ]
});

Client.on(""voiceStateUpdate"", oldState => console.log(oldState));

Client.login(""token"");
```
<details>
<summary><code>console.log(oldState)</code></summary>

```JavaScript
VoiceState {
  guild: <ref *1> Guild {
    id: '534940241002233896',
    name: undefined,
    icon: undefined,
    features: undefined,
    commands: GuildApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager],
      guild: [Circular *1]
    },
    members: GuildMemberManager { guild: [Circular *1] },
    channels: GuildChannelManager { guild: [Circular *1] },
    bans: GuildBanManager { guild: [Circular *1] },
    roles: RoleManager { guild: [Circular *1] },
    presences: PresenceManager {},
    voiceStates: VoiceStateManager { guild: [Circular *1] },
    stageInstances: StageInstanceManager { guild: [Circular *1] },
    invites: GuildInviteManager { guild: [Circular *1] },
    deleted: false,
    available: false,
    shardId: 0
  },
  id: '618976181026422814',
  serverDeaf: null,
  serverMute: null,
  selfDeaf: null,
  selfMute: null,
  selfVideo: null,
  sessionId: null,
  streaming: false,
  channelId: null,
  suppress: undefined,
  requestToSpeakTimestamp: null
}
```
</details>

It seems this happens because of this:
https://github.com/discordjs/discord.js/blob/622f398f4b36b00d0a347b548f63524703c2d395/src/client/actions/VoiceStateUpdate.js#L14

Since the guild member's voice state was not cached, a new `VoiceState` was being made. But there is no default value for `VoiceState#suppress`:
https://github.com/discordjs/discord.js/blob/006edca410f5df53f3272f7a402f2305f73ad14b/src/structures/VoiceState.js#L74
This is the source of it being `undefined`.

This pull request ensures the default value of `VoiceState#suppress` is `true`, as it can be assumed that upon joining a stage channel that they are suppressed from speaking.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",6,4,7,7,2021-08-10 19:44:22,,False,,,7,2021-10-03 22:16:14,False,2021-08-11 20:02:33,,2021-08-11 20:12:05,"> Since it's the same scope: VoiceState in this case, I think it should be fine putting it into this PR.

I have now done this!",inclusive,constructive
92,discord.js,discordjs,6377,fix(VoiceState): Ensure `suppress` & `streaming` have proper fallback values,"PullRequestPart(sha=""29ade69be2d6e6db44ade67a23226ebc9444fae6"")",,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6377,open,"**Please describe the changes this PR makes and why it should be merged:**
`VoiceState#suppress` can be `undefined`. This is achieved by not knowing the state of a `GuildMember`'s `VoiceState` upon them joining a voice channel or a stage channel.

This can be reproduced by starting the bot up using the following code:
```JavaScript
const Client = new (require(""discord.js"")).Client({
  intents: [
    ""GUILD_VOICE_STATES""
  ]
});

Client.on(""voiceStateUpdate"", oldState => console.log(oldState));

Client.login(""token"");
```
<details>
<summary><code>console.log(oldState)</code></summary>

```JavaScript
VoiceState {
  guild: <ref *1> Guild {
    id: '534940241002233896',
    name: undefined,
    icon: undefined,
    features: undefined,
    commands: GuildApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager],
      guild: [Circular *1]
    },
    members: GuildMemberManager { guild: [Circular *1] },
    channels: GuildChannelManager { guild: [Circular *1] },
    bans: GuildBanManager { guild: [Circular *1] },
    roles: RoleManager { guild: [Circular *1] },
    presences: PresenceManager {},
    voiceStates: VoiceStateManager { guild: [Circular *1] },
    stageInstances: StageInstanceManager { guild: [Circular *1] },
    invites: GuildInviteManager { guild: [Circular *1] },
    deleted: false,
    available: false,
    shardId: 0
  },
  id: '618976181026422814',
  serverDeaf: null,
  serverMute: null,
  selfDeaf: null,
  selfMute: null,
  selfVideo: null,
  sessionId: null,
  streaming: false,
  channelId: null,
  suppress: undefined,
  requestToSpeakTimestamp: null
}
```
</details>

It seems this happens because of this:
https://github.com/discordjs/discord.js/blob/622f398f4b36b00d0a347b548f63524703c2d395/src/client/actions/VoiceStateUpdate.js#L14

Since the guild member's voice state was not cached, a new `VoiceState` was being made. But there is no default value for `VoiceState#suppress`:
https://github.com/discordjs/discord.js/blob/006edca410f5df53f3272f7a402f2305f73ad14b/src/structures/VoiceState.js#L74
This is the source of it being `undefined`.

This pull request ensures the default value of `VoiceState#suppress` is `true`, as it can be assumed that upon joining a stage channel that they are suppressed from speaking.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",6,4,7,7,2021-08-10 19:44:22,,False,,,7,2021-10-03 22:16:14,False,2021-08-11 20:13:55,Noel,2021-08-11 20:13:55,"Now that I see it, maybe we should do a different PR if you want at least the `suppress` fix inside of v13.

If you don't care too much, thats fine.",inclusive,constructive
93,discord.js,discordjs,6377,fix(VoiceState): Ensure `suppress` & `streaming` have proper fallback values,"PullRequestPart(sha=""29ade69be2d6e6db44ade67a23226ebc9444fae6"")",,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6377,open,"**Please describe the changes this PR makes and why it should be merged:**
`VoiceState#suppress` can be `undefined`. This is achieved by not knowing the state of a `GuildMember`'s `VoiceState` upon them joining a voice channel or a stage channel.

This can be reproduced by starting the bot up using the following code:
```JavaScript
const Client = new (require(""discord.js"")).Client({
  intents: [
    ""GUILD_VOICE_STATES""
  ]
});

Client.on(""voiceStateUpdate"", oldState => console.log(oldState));

Client.login(""token"");
```
<details>
<summary><code>console.log(oldState)</code></summary>

```JavaScript
VoiceState {
  guild: <ref *1> Guild {
    id: '534940241002233896',
    name: undefined,
    icon: undefined,
    features: undefined,
    commands: GuildApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager],
      guild: [Circular *1]
    },
    members: GuildMemberManager { guild: [Circular *1] },
    channels: GuildChannelManager { guild: [Circular *1] },
    bans: GuildBanManager { guild: [Circular *1] },
    roles: RoleManager { guild: [Circular *1] },
    presences: PresenceManager {},
    voiceStates: VoiceStateManager { guild: [Circular *1] },
    stageInstances: StageInstanceManager { guild: [Circular *1] },
    invites: GuildInviteManager { guild: [Circular *1] },
    deleted: false,
    available: false,
    shardId: 0
  },
  id: '618976181026422814',
  serverDeaf: null,
  serverMute: null,
  selfDeaf: null,
  selfMute: null,
  selfVideo: null,
  sessionId: null,
  streaming: false,
  channelId: null,
  suppress: undefined,
  requestToSpeakTimestamp: null
}
```
</details>

It seems this happens because of this:
https://github.com/discordjs/discord.js/blob/622f398f4b36b00d0a347b548f63524703c2d395/src/client/actions/VoiceStateUpdate.js#L14

Since the guild member's voice state was not cached, a new `VoiceState` was being made. But there is no default value for `VoiceState#suppress`:
https://github.com/discordjs/discord.js/blob/006edca410f5df53f3272f7a402f2305f73ad14b/src/structures/VoiceState.js#L74
This is the source of it being `undefined`.

This pull request ensures the default value of `VoiceState#suppress` is `true`, as it can be assumed that upon joining a stage channel that they are suppressed from speaking.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",6,4,7,7,2021-08-10 19:44:22,,False,,,7,2021-10-03 22:16:14,False,2021-08-11 20:20:47,,2021-08-11 20:20:47,"I think it's fine to wait for version 14 for this.

I don't think `suppress` will be that much of an issue (`undefined` vs. `null`; both falsey) compared to a possibly wrong default value of `streaming` (`false` when it might actually be `true`), so I think it's fine to wait it out.",inclusive,constructive
94,discord.js,discordjs,6377,fix(VoiceState): Ensure `suppress` & `streaming` have proper fallback values,"PullRequestPart(sha=""29ade69be2d6e6db44ade67a23226ebc9444fae6"")",,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6377,open,"**Please describe the changes this PR makes and why it should be merged:**
`VoiceState#suppress` can be `undefined`. This is achieved by not knowing the state of a `GuildMember`'s `VoiceState` upon them joining a voice channel or a stage channel.

This can be reproduced by starting the bot up using the following code:
```JavaScript
const Client = new (require(""discord.js"")).Client({
  intents: [
    ""GUILD_VOICE_STATES""
  ]
});

Client.on(""voiceStateUpdate"", oldState => console.log(oldState));

Client.login(""token"");
```
<details>
<summary><code>console.log(oldState)</code></summary>

```JavaScript
VoiceState {
  guild: <ref *1> Guild {
    id: '534940241002233896',
    name: undefined,
    icon: undefined,
    features: undefined,
    commands: GuildApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager],
      guild: [Circular *1]
    },
    members: GuildMemberManager { guild: [Circular *1] },
    channels: GuildChannelManager { guild: [Circular *1] },
    bans: GuildBanManager { guild: [Circular *1] },
    roles: RoleManager { guild: [Circular *1] },
    presences: PresenceManager {},
    voiceStates: VoiceStateManager { guild: [Circular *1] },
    stageInstances: StageInstanceManager { guild: [Circular *1] },
    invites: GuildInviteManager { guild: [Circular *1] },
    deleted: false,
    available: false,
    shardId: 0
  },
  id: '618976181026422814',
  serverDeaf: null,
  serverMute: null,
  selfDeaf: null,
  selfMute: null,
  selfVideo: null,
  sessionId: null,
  streaming: false,
  channelId: null,
  suppress: undefined,
  requestToSpeakTimestamp: null
}
```
</details>

It seems this happens because of this:
https://github.com/discordjs/discord.js/blob/622f398f4b36b00d0a347b548f63524703c2d395/src/client/actions/VoiceStateUpdate.js#L14

Since the guild member's voice state was not cached, a new `VoiceState` was being made. But there is no default value for `VoiceState#suppress`:
https://github.com/discordjs/discord.js/blob/006edca410f5df53f3272f7a402f2305f73ad14b/src/structures/VoiceState.js#L74
This is the source of it being `undefined`.

This pull request ensures the default value of `VoiceState#suppress` is `true`, as it can be assumed that upon joining a stage channel that they are suppressed from speaking.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",6,4,7,7,2021-08-10 19:44:22,,False,,,7,2021-10-03 22:16:14,False,2021-10-03 20:56:55,Noel,2021-10-03 20:56:55,This needs a rebase.,neutral,neutral
95,discord.js,discordjs,6377,fix(VoiceState): Ensure `suppress` & `streaming` have proper fallback values,"PullRequestPart(sha=""29ade69be2d6e6db44ade67a23226ebc9444fae6"")",,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6377,open,"**Please describe the changes this PR makes and why it should be merged:**
`VoiceState#suppress` can be `undefined`. This is achieved by not knowing the state of a `GuildMember`'s `VoiceState` upon them joining a voice channel or a stage channel.

This can be reproduced by starting the bot up using the following code:
```JavaScript
const Client = new (require(""discord.js"")).Client({
  intents: [
    ""GUILD_VOICE_STATES""
  ]
});

Client.on(""voiceStateUpdate"", oldState => console.log(oldState));

Client.login(""token"");
```
<details>
<summary><code>console.log(oldState)</code></summary>

```JavaScript
VoiceState {
  guild: <ref *1> Guild {
    id: '534940241002233896',
    name: undefined,
    icon: undefined,
    features: undefined,
    commands: GuildApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager],
      guild: [Circular *1]
    },
    members: GuildMemberManager { guild: [Circular *1] },
    channels: GuildChannelManager { guild: [Circular *1] },
    bans: GuildBanManager { guild: [Circular *1] },
    roles: RoleManager { guild: [Circular *1] },
    presences: PresenceManager {},
    voiceStates: VoiceStateManager { guild: [Circular *1] },
    stageInstances: StageInstanceManager { guild: [Circular *1] },
    invites: GuildInviteManager { guild: [Circular *1] },
    deleted: false,
    available: false,
    shardId: 0
  },
  id: '618976181026422814',
  serverDeaf: null,
  serverMute: null,
  selfDeaf: null,
  selfMute: null,
  selfVideo: null,
  sessionId: null,
  streaming: false,
  channelId: null,
  suppress: undefined,
  requestToSpeakTimestamp: null
}
```
</details>

It seems this happens because of this:
https://github.com/discordjs/discord.js/blob/622f398f4b36b00d0a347b548f63524703c2d395/src/client/actions/VoiceStateUpdate.js#L14

Since the guild member's voice state was not cached, a new `VoiceState` was being made. But there is no default value for `VoiceState#suppress`:
https://github.com/discordjs/discord.js/blob/006edca410f5df53f3272f7a402f2305f73ad14b/src/structures/VoiceState.js#L74
This is the source of it being `undefined`.

This pull request ensures the default value of `VoiceState#suppress` is `true`, as it can be assumed that upon joining a stage channel that they are suppressed from speaking.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",6,4,7,7,2021-08-10 19:44:22,,False,,,7,2021-10-03 22:16:14,True,2021-08-11 7:25:28,Vlad Frangu,2021-08-11 7:25:29,why don't we just spread the object as a whole? will that cause issues?,inclusive,constructive
96,discord.js,discordjs,6377,fix(VoiceState): Ensure `suppress` & `streaming` have proper fallback values,"PullRequestPart(sha=""29ade69be2d6e6db44ade67a23226ebc9444fae6"")",,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6377,open,"**Please describe the changes this PR makes and why it should be merged:**
`VoiceState#suppress` can be `undefined`. This is achieved by not knowing the state of a `GuildMember`'s `VoiceState` upon them joining a voice channel or a stage channel.

This can be reproduced by starting the bot up using the following code:
```JavaScript
const Client = new (require(""discord.js"")).Client({
  intents: [
    ""GUILD_VOICE_STATES""
  ]
});

Client.on(""voiceStateUpdate"", oldState => console.log(oldState));

Client.login(""token"");
```
<details>
<summary><code>console.log(oldState)</code></summary>

```JavaScript
VoiceState {
  guild: <ref *1> Guild {
    id: '534940241002233896',
    name: undefined,
    icon: undefined,
    features: undefined,
    commands: GuildApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager],
      guild: [Circular *1]
    },
    members: GuildMemberManager { guild: [Circular *1] },
    channels: GuildChannelManager { guild: [Circular *1] },
    bans: GuildBanManager { guild: [Circular *1] },
    roles: RoleManager { guild: [Circular *1] },
    presences: PresenceManager {},
    voiceStates: VoiceStateManager { guild: [Circular *1] },
    stageInstances: StageInstanceManager { guild: [Circular *1] },
    invites: GuildInviteManager { guild: [Circular *1] },
    deleted: false,
    available: false,
    shardId: 0
  },
  id: '618976181026422814',
  serverDeaf: null,
  serverMute: null,
  selfDeaf: null,
  selfMute: null,
  selfVideo: null,
  sessionId: null,
  streaming: false,
  channelId: null,
  suppress: undefined,
  requestToSpeakTimestamp: null
}
```
</details>

It seems this happens because of this:
https://github.com/discordjs/discord.js/blob/622f398f4b36b00d0a347b548f63524703c2d395/src/client/actions/VoiceStateUpdate.js#L14

Since the guild member's voice state was not cached, a new `VoiceState` was being made. But there is no default value for `VoiceState#suppress`:
https://github.com/discordjs/discord.js/blob/006edca410f5df53f3272f7a402f2305f73ad14b/src/structures/VoiceState.js#L74
This is the source of it being `undefined`.

This pull request ensures the default value of `VoiceState#suppress` is `true`, as it can be assumed that upon joining a stage channel that they are suppressed from speaking.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",6,4,7,7,2021-08-10 19:44:22,,False,,,7,2021-10-03 22:16:14,True,2021-08-11 10:17:44,,2021-08-11 10:17:44,"That will cause both voice states to be identical, that doesn't sound ideal.
I think it'd be better to default `suppress` to `true` as the PR initially did.",inclusive,constructive
97,discord.js,discordjs,6377,fix(VoiceState): Ensure `suppress` & `streaming` have proper fallback values,"PullRequestPart(sha=""29ade69be2d6e6db44ade67a23226ebc9444fae6"")",,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6377,open,"**Please describe the changes this PR makes and why it should be merged:**
`VoiceState#suppress` can be `undefined`. This is achieved by not knowing the state of a `GuildMember`'s `VoiceState` upon them joining a voice channel or a stage channel.

This can be reproduced by starting the bot up using the following code:
```JavaScript
const Client = new (require(""discord.js"")).Client({
  intents: [
    ""GUILD_VOICE_STATES""
  ]
});

Client.on(""voiceStateUpdate"", oldState => console.log(oldState));

Client.login(""token"");
```
<details>
<summary><code>console.log(oldState)</code></summary>

```JavaScript
VoiceState {
  guild: <ref *1> Guild {
    id: '534940241002233896',
    name: undefined,
    icon: undefined,
    features: undefined,
    commands: GuildApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager],
      guild: [Circular *1]
    },
    members: GuildMemberManager { guild: [Circular *1] },
    channels: GuildChannelManager { guild: [Circular *1] },
    bans: GuildBanManager { guild: [Circular *1] },
    roles: RoleManager { guild: [Circular *1] },
    presences: PresenceManager {},
    voiceStates: VoiceStateManager { guild: [Circular *1] },
    stageInstances: StageInstanceManager { guild: [Circular *1] },
    invites: GuildInviteManager { guild: [Circular *1] },
    deleted: false,
    available: false,
    shardId: 0
  },
  id: '618976181026422814',
  serverDeaf: null,
  serverMute: null,
  selfDeaf: null,
  selfMute: null,
  selfVideo: null,
  sessionId: null,
  streaming: false,
  channelId: null,
  suppress: undefined,
  requestToSpeakTimestamp: null
}
```
</details>

It seems this happens because of this:
https://github.com/discordjs/discord.js/blob/622f398f4b36b00d0a347b548f63524703c2d395/src/client/actions/VoiceStateUpdate.js#L14

Since the guild member's voice state was not cached, a new `VoiceState` was being made. But there is no default value for `VoiceState#suppress`:
https://github.com/discordjs/discord.js/blob/006edca410f5df53f3272f7a402f2305f73ad14b/src/structures/VoiceState.js#L74
This is the source of it being `undefined`.

This pull request ensures the default value of `VoiceState#suppress` is `true`, as it can be assumed that upon joining a stage channel that they are suppressed from speaking.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",6,4,7,7,2021-08-10 19:44:22,,False,,,7,2021-10-03 22:16:14,True,2021-08-11 10:41:29,,2021-08-11 10:41:29,"I see your point! The other option I was thinking of was making it `null`, just in case `VoiceState` is swept by the `makeCache` `ClientOption`, since we can't tell what that was? I'm not familiar with the new cache stuff, but if it's no longer in cache and removed whilst they're a speaker in a stage channel, defaulting to `true` if they leave wouldn't be correct here? If I'm totally wrong, let me know and I'll change the default back to `true` (:",inclusive,constructive
98,discord.js,discordjs,6377,fix(VoiceState): Ensure `suppress` & `streaming` have proper fallback values,"PullRequestPart(sha=""29ade69be2d6e6db44ade67a23226ebc9444fae6"")",,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6377,open,"**Please describe the changes this PR makes and why it should be merged:**
`VoiceState#suppress` can be `undefined`. This is achieved by not knowing the state of a `GuildMember`'s `VoiceState` upon them joining a voice channel or a stage channel.

This can be reproduced by starting the bot up using the following code:
```JavaScript
const Client = new (require(""discord.js"")).Client({
  intents: [
    ""GUILD_VOICE_STATES""
  ]
});

Client.on(""voiceStateUpdate"", oldState => console.log(oldState));

Client.login(""token"");
```
<details>
<summary><code>console.log(oldState)</code></summary>

```JavaScript
VoiceState {
  guild: <ref *1> Guild {
    id: '534940241002233896',
    name: undefined,
    icon: undefined,
    features: undefined,
    commands: GuildApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager],
      guild: [Circular *1]
    },
    members: GuildMemberManager { guild: [Circular *1] },
    channels: GuildChannelManager { guild: [Circular *1] },
    bans: GuildBanManager { guild: [Circular *1] },
    roles: RoleManager { guild: [Circular *1] },
    presences: PresenceManager {},
    voiceStates: VoiceStateManager { guild: [Circular *1] },
    stageInstances: StageInstanceManager { guild: [Circular *1] },
    invites: GuildInviteManager { guild: [Circular *1] },
    deleted: false,
    available: false,
    shardId: 0
  },
  id: '618976181026422814',
  serverDeaf: null,
  serverMute: null,
  selfDeaf: null,
  selfMute: null,
  selfVideo: null,
  sessionId: null,
  streaming: false,
  channelId: null,
  suppress: undefined,
  requestToSpeakTimestamp: null
}
```
</details>

It seems this happens because of this:
https://github.com/discordjs/discord.js/blob/622f398f4b36b00d0a347b548f63524703c2d395/src/client/actions/VoiceStateUpdate.js#L14

Since the guild member's voice state was not cached, a new `VoiceState` was being made. But there is no default value for `VoiceState#suppress`:
https://github.com/discordjs/discord.js/blob/006edca410f5df53f3272f7a402f2305f73ad14b/src/structures/VoiceState.js#L74
This is the source of it being `undefined`.

This pull request ensures the default value of `VoiceState#suppress` is `true`, as it can be assumed that upon joining a stage channel that they are suppressed from speaking.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",6,4,7,7,2021-08-10 19:44:22,,False,,,7,2021-10-03 22:16:14,True,2021-08-11 11:24:44,,2021-08-11 11:24:45,"I have just tested this out with this:
```JavaScript
const { Client, Options } = require(""discord.js"");

const client = new Client({
  intents: [
    ""GUILD_VOICE_STATES""
  ],
  makeCache: Options.cacheWithLimits({
    VoiceStateManager: 3
  })
});

client.on(""voiceStateUpdate"", oldState => console.log(oldState)); // Let >= 3 people do whatever first, then leave as a speaker

client.login(""token"");
```
With a couple of accounts (3), their voice states were created accordingly. However, as a speaker of the stage channel, leaving still rendered `suppress` as `undefined`, so I believe defaulting to `null` would be more appropriate than `true` here. Thoughts?",inclusive,constructive
99,discord.js,discordjs,6377,fix(VoiceState): Ensure `suppress` & `streaming` have proper fallback values,"PullRequestPart(sha=""29ade69be2d6e6db44ade67a23226ebc9444fae6"")",,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6377,open,"**Please describe the changes this PR makes and why it should be merged:**
`VoiceState#suppress` can be `undefined`. This is achieved by not knowing the state of a `GuildMember`'s `VoiceState` upon them joining a voice channel or a stage channel.

This can be reproduced by starting the bot up using the following code:
```JavaScript
const Client = new (require(""discord.js"")).Client({
  intents: [
    ""GUILD_VOICE_STATES""
  ]
});

Client.on(""voiceStateUpdate"", oldState => console.log(oldState));

Client.login(""token"");
```
<details>
<summary><code>console.log(oldState)</code></summary>

```JavaScript
VoiceState {
  guild: <ref *1> Guild {
    id: '534940241002233896',
    name: undefined,
    icon: undefined,
    features: undefined,
    commands: GuildApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager],
      guild: [Circular *1]
    },
    members: GuildMemberManager { guild: [Circular *1] },
    channels: GuildChannelManager { guild: [Circular *1] },
    bans: GuildBanManager { guild: [Circular *1] },
    roles: RoleManager { guild: [Circular *1] },
    presences: PresenceManager {},
    voiceStates: VoiceStateManager { guild: [Circular *1] },
    stageInstances: StageInstanceManager { guild: [Circular *1] },
    invites: GuildInviteManager { guild: [Circular *1] },
    deleted: false,
    available: false,
    shardId: 0
  },
  id: '618976181026422814',
  serverDeaf: null,
  serverMute: null,
  selfDeaf: null,
  selfMute: null,
  selfVideo: null,
  sessionId: null,
  streaming: false,
  channelId: null,
  suppress: undefined,
  requestToSpeakTimestamp: null
}
```
</details>

It seems this happens because of this:
https://github.com/discordjs/discord.js/blob/622f398f4b36b00d0a347b548f63524703c2d395/src/client/actions/VoiceStateUpdate.js#L14

Since the guild member's voice state was not cached, a new `VoiceState` was being made. But there is no default value for `VoiceState#suppress`:
https://github.com/discordjs/discord.js/blob/006edca410f5df53f3272f7a402f2305f73ad14b/src/structures/VoiceState.js#L74
This is the source of it being `undefined`.

This pull request ensures the default value of `VoiceState#suppress` is `true`, as it can be assumed that upon joining a stage channel that they are suppressed from speaking.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",6,4,7,7,2021-08-10 19:44:22,,False,,,7,2021-10-03 22:16:14,True,2021-08-11 11:59:40,Vlad Frangu,2021-08-11 11:59:40,Personally I think `null` might be more adequate than defaulting to true... @SpaceEEC @discordjs/the-big-3?,inclusive,constructive
100,discord.js,discordjs,6377,fix(VoiceState): Ensure `suppress` & `streaming` have proper fallback values,"PullRequestPart(sha=""29ade69be2d6e6db44ade67a23226ebc9444fae6"")",,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6377,open,"**Please describe the changes this PR makes and why it should be merged:**
`VoiceState#suppress` can be `undefined`. This is achieved by not knowing the state of a `GuildMember`'s `VoiceState` upon them joining a voice channel or a stage channel.

This can be reproduced by starting the bot up using the following code:
```JavaScript
const Client = new (require(""discord.js"")).Client({
  intents: [
    ""GUILD_VOICE_STATES""
  ]
});

Client.on(""voiceStateUpdate"", oldState => console.log(oldState));

Client.login(""token"");
```
<details>
<summary><code>console.log(oldState)</code></summary>

```JavaScript
VoiceState {
  guild: <ref *1> Guild {
    id: '534940241002233896',
    name: undefined,
    icon: undefined,
    features: undefined,
    commands: GuildApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager],
      guild: [Circular *1]
    },
    members: GuildMemberManager { guild: [Circular *1] },
    channels: GuildChannelManager { guild: [Circular *1] },
    bans: GuildBanManager { guild: [Circular *1] },
    roles: RoleManager { guild: [Circular *1] },
    presences: PresenceManager {},
    voiceStates: VoiceStateManager { guild: [Circular *1] },
    stageInstances: StageInstanceManager { guild: [Circular *1] },
    invites: GuildInviteManager { guild: [Circular *1] },
    deleted: false,
    available: false,
    shardId: 0
  },
  id: '618976181026422814',
  serverDeaf: null,
  serverMute: null,
  selfDeaf: null,
  selfMute: null,
  selfVideo: null,
  sessionId: null,
  streaming: false,
  channelId: null,
  suppress: undefined,
  requestToSpeakTimestamp: null
}
```
</details>

It seems this happens because of this:
https://github.com/discordjs/discord.js/blob/622f398f4b36b00d0a347b548f63524703c2d395/src/client/actions/VoiceStateUpdate.js#L14

Since the guild member's voice state was not cached, a new `VoiceState` was being made. But there is no default value for `VoiceState#suppress`:
https://github.com/discordjs/discord.js/blob/006edca410f5df53f3272f7a402f2305f73ad14b/src/structures/VoiceState.js#L74
This is the source of it being `undefined`.

This pull request ensures the default value of `VoiceState#suppress` is `true`, as it can be assumed that upon joining a stage channel that they are suppressed from speaking.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",6,4,7,7,2021-08-10 19:44:22,,False,,,7,2021-10-03 22:16:14,True,2021-08-11 12:10:30,,2021-08-11 12:10:30,"I'd like us emitting `null` as voice state if we have none in cache, but that's v14 area.

I think making `supress` nullable falls into that area too, but it wouldn't be as drastic.
So it's probably fine? ､ｷ 

I definitely prefer `null` over `true`, if that is possible.",inclusive,neutral
101,discord.js,discordjs,6377,fix(VoiceState): Ensure `suppress` & `streaming` have proper fallback values,"PullRequestPart(sha=""29ade69be2d6e6db44ade67a23226ebc9444fae6"")",,"[Label(name=""gateway""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6377,open,"**Please describe the changes this PR makes and why it should be merged:**
`VoiceState#suppress` can be `undefined`. This is achieved by not knowing the state of a `GuildMember`'s `VoiceState` upon them joining a voice channel or a stage channel.

This can be reproduced by starting the bot up using the following code:
```JavaScript
const Client = new (require(""discord.js"")).Client({
  intents: [
    ""GUILD_VOICE_STATES""
  ]
});

Client.on(""voiceStateUpdate"", oldState => console.log(oldState));

Client.login(""token"");
```
<details>
<summary><code>console.log(oldState)</code></summary>

```JavaScript
VoiceState {
  guild: <ref *1> Guild {
    id: '534940241002233896',
    name: undefined,
    icon: undefined,
    features: undefined,
    commands: GuildApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager],
      guild: [Circular *1]
    },
    members: GuildMemberManager { guild: [Circular *1] },
    channels: GuildChannelManager { guild: [Circular *1] },
    bans: GuildBanManager { guild: [Circular *1] },
    roles: RoleManager { guild: [Circular *1] },
    presences: PresenceManager {},
    voiceStates: VoiceStateManager { guild: [Circular *1] },
    stageInstances: StageInstanceManager { guild: [Circular *1] },
    invites: GuildInviteManager { guild: [Circular *1] },
    deleted: false,
    available: false,
    shardId: 0
  },
  id: '618976181026422814',
  serverDeaf: null,
  serverMute: null,
  selfDeaf: null,
  selfMute: null,
  selfVideo: null,
  sessionId: null,
  streaming: false,
  channelId: null,
  suppress: undefined,
  requestToSpeakTimestamp: null
}
```
</details>

It seems this happens because of this:
https://github.com/discordjs/discord.js/blob/622f398f4b36b00d0a347b548f63524703c2d395/src/client/actions/VoiceStateUpdate.js#L14

Since the guild member's voice state was not cached, a new `VoiceState` was being made. But there is no default value for `VoiceState#suppress`:
https://github.com/discordjs/discord.js/blob/006edca410f5df53f3272f7a402f2305f73ad14b/src/structures/VoiceState.js#L74
This is the source of it being `undefined`.

This pull request ensures the default value of `VoiceState#suppress` is `true`, as it can be assumed that upon joining a stage channel that they are suppressed from speaking.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",6,4,7,7,2021-08-10 19:44:22,,False,,,7,2021-10-03 22:16:14,True,2021-08-11 12:22:23,,2021-08-11 12:22:36,"I think `null` is fine for the next minor version of discord.js (I see this pull request is aiming for version 13.1 release). If so, I'll go ahead and amend this? (:",inclusive,constructive
102,discord.js,discordjs,6453,fix(BaseClient): produce an error for non object options,"PullRequestPart(sha=""95f9052609e1a7c78ed1efac189618fb632e11bb"")",Justin,"[Label(name=""error handling""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6453,open,"**Please describe the changes this PR makes and why it should be merged:**

This throws an error to the user if the `options` provided is not an object. It prevents more confusing and misleading errors given by the process. For example, one may have something like this:
```ts
new WebhookClient('id', 'token');
```
Which is, in fact, an outdated way of creating Webhooks. I wouldn't say we *shouldn't* place it because it's the user's fault, though. Since the options parameter is a string, it cannot append the default arguments, hence producing a misleading error:
`cannot append property shardCount on string ""...""`
I've seen lots of users in the server that have errors like the above. 

Furthermore, this prevents using the wrong data in other parts of client-related things. Some users don't have a proper IDE, hence they won't receive any feedback from the typings either, this does it for the interpreter.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",5,0,3,3,2021-08-16 5:45:43,,False,,,3,2021-10-05 6:23:25,False,2021-08-16 6:45:42,Kevin,2021-08-16 6:45:42,"Documentation is pretty clear on how to build each class, if people don't want to be bothered to check it, it's their problem.
discord.js is a beginner-friendly library (in spite of itself? e.g. the stricter Snowflake type) but its source code should not be containing extra-(useless)-code.

JavaScript being weakly typed is one of its forces, but also one of its drawbacks (which is why TypeScript was born), but imo it's not up to the library to check for those inputs. If people want to code ""safely"", they can switch to TypeScript, get a good linter, or even better (but maybe a little bit too much) read documentation.

All of this to say I'm not really a big fan of that, as it would probably start up a trend of implementing type checks everywhere in the source code that'd end up taking a little bit of performance at runtime.",neutral,not constructive
103,discord.js,discordjs,6453,fix(BaseClient): produce an error for non object options,"PullRequestPart(sha=""95f9052609e1a7c78ed1efac189618fb632e11bb"")",Justin,"[Label(name=""error handling""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6453,open,"**Please describe the changes this PR makes and why it should be merged:**

This throws an error to the user if the `options` provided is not an object. It prevents more confusing and misleading errors given by the process. For example, one may have something like this:
```ts
new WebhookClient('id', 'token');
```
Which is, in fact, an outdated way of creating Webhooks. I wouldn't say we *shouldn't* place it because it's the user's fault, though. Since the options parameter is a string, it cannot append the default arguments, hence producing a misleading error:
`cannot append property shardCount on string ""...""`
I've seen lots of users in the server that have errors like the above. 

Furthermore, this prevents using the wrong data in other parts of client-related things. Some users don't have a proper IDE, hence they won't receive any feedback from the typings either, this does it for the interpreter.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",5,0,3,3,2021-08-16 5:45:43,,False,,,3,2021-10-05 6:23:25,False,2021-10-02 11:58:37,Noel,2021-10-02 11:58:37,This needs a rebase.,neutral,neutral
104,discord.js,discordjs,6453,fix(BaseClient): produce an error for non object options,"PullRequestPart(sha=""95f9052609e1a7c78ed1efac189618fb632e11bb"")",Justin,"[Label(name=""error handling""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6453,open,"**Please describe the changes this PR makes and why it should be merged:**

This throws an error to the user if the `options` provided is not an object. It prevents more confusing and misleading errors given by the process. For example, one may have something like this:
```ts
new WebhookClient('id', 'token');
```
Which is, in fact, an outdated way of creating Webhooks. I wouldn't say we *shouldn't* place it because it's the user's fault, though. Since the options parameter is a string, it cannot append the default arguments, hence producing a misleading error:
`cannot append property shardCount on string ""...""`
I've seen lots of users in the server that have errors like the above. 

Furthermore, this prevents using the wrong data in other parts of client-related things. Some users don't have a proper IDE, hence they won't receive any feedback from the typings either, this does it for the interpreter.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",5,0,3,3,2021-08-16 5:45:43,,False,,,3,2021-10-05 6:23:25,False,2021-10-02 23:53:55,Justin,2021-10-02 23:53:55,Done,neutral,neutral
105,discord.js,discordjs,6453,fix(BaseClient): produce an error for non object options,"PullRequestPart(sha=""95f9052609e1a7c78ed1efac189618fb632e11bb"")",Justin,"[Label(name=""error handling""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6453,open,"**Please describe the changes this PR makes and why it should be merged:**

This throws an error to the user if the `options` provided is not an object. It prevents more confusing and misleading errors given by the process. For example, one may have something like this:
```ts
new WebhookClient('id', 'token');
```
Which is, in fact, an outdated way of creating Webhooks. I wouldn't say we *shouldn't* place it because it's the user's fault, though. Since the options parameter is a string, it cannot append the default arguments, hence producing a misleading error:
`cannot append property shardCount on string ""...""`
I've seen lots of users in the server that have errors like the above. 

Furthermore, this prevents using the wrong data in other parts of client-related things. Some users don't have a proper IDE, hence they won't receive any feedback from the typings either, this does it for the interpreter.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",5,0,3,3,2021-08-16 5:45:43,,False,,,3,2021-10-05 6:23:25,True,2021-08-18 8:40:28,Sugden,2021-08-18 8:40:51,"i think it would be cleaner to
```js
if (typeof options !== 'object' || options === null) {
  throw [...];
}

this.options = [...];
```",inclusive,constructive
106,discord.js,discordjs,6453,fix(BaseClient): produce an error for non object options,"PullRequestPart(sha=""95f9052609e1a7c78ed1efac189618fb632e11bb"")",Justin,"[Label(name=""error handling""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6453,open,"**Please describe the changes this PR makes and why it should be merged:**

This throws an error to the user if the `options` provided is not an object. It prevents more confusing and misleading errors given by the process. For example, one may have something like this:
```ts
new WebhookClient('id', 'token');
```
Which is, in fact, an outdated way of creating Webhooks. I wouldn't say we *shouldn't* place it because it's the user's fault, though. Since the options parameter is a string, it cannot append the default arguments, hence producing a misleading error:
`cannot append property shardCount on string ""...""`
I've seen lots of users in the server that have errors like the above. 

Furthermore, this prevents using the wrong data in other parts of client-related things. Some users don't have a proper IDE, hence they won't receive any feedback from the typings either, this does it for the interpreter.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",5,0,3,3,2021-08-16 5:45:43,,False,,,3,2021-10-05 6:23:25,True,2021-08-18 10:27:07,Antonio Romﾃ｡n,2021-08-18 10:27:42,"```suggestion
      throw new TypeError('INVALID_TYPE', 'options', 'object', true);
```",inclusive,constructive
107,discord.js,discordjs,6453,fix(BaseClient): produce an error for non object options,"PullRequestPart(sha=""95f9052609e1a7c78ed1efac189618fb632e11bb"")",Justin,"[Label(name=""error handling""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6453,open,"**Please describe the changes this PR makes and why it should be merged:**

This throws an error to the user if the `options` provided is not an object. It prevents more confusing and misleading errors given by the process. For example, one may have something like this:
```ts
new WebhookClient('id', 'token');
```
Which is, in fact, an outdated way of creating Webhooks. I wouldn't say we *shouldn't* place it because it's the user's fault, though. Since the options parameter is a string, it cannot append the default arguments, hence producing a misleading error:
`cannot append property shardCount on string ""...""`
I've seen lots of users in the server that have errors like the above. 

Furthermore, this prevents using the wrong data in other parts of client-related things. Some users don't have a proper IDE, hence they won't receive any feedback from the typings either, this does it for the interpreter.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",5,0,3,3,2021-08-16 5:45:43,,False,,,3,2021-10-05 6:23:25,True,2021-08-18 10:27:13,Antonio Romﾃ｡n,2021-08-18 10:27:42,"```suggestion
const { TypeError } = require('../errors');
```",inclusive,constructive
108,discord.js,discordjs,6492,refactor(Client): remove applicationCommand events,"PullRequestPart(sha=""f0f119846c9f44c930f0f0a9460cf19d3014ea42"")",Rodry,"[Label(name=""api changes""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6492,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR removes applicationCommand events as a Discord developer said they were not meant to be sent to bots (https://github.com/discord/discord-api-docs/issues/3690#issuecomment-902915187). This can be a semver minor since the events never fired anyway.
Upstream PR: 
- https://github.com/discord/discord-api-docs/pull/3691

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",0,73,1,2,2021-08-21 18:58:12,,False,,,0,2021-10-10 15:20:13,False,2021-08-21 19:38:07,Rodry,2021-08-21 19:38:07,Sorry I fixed and forgot to push xD,inclusive,neutral
109,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-08-21 19:55:52,Rodry,2021-08-21 19:59:49,"Once the upstream PR lands, please add the `@see` link (maybe add a TODO comment so you don't forget)",inclusive,constructive
110,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-08-21 19:55:59,Rodry,2021-08-21 19:59:49,Same as above,neutral,neutral
111,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-08-21 19:57:04,Rodry,2021-08-21 19:59:49,"Once the upstream PR lands, please add the `@external` API docs link (maybe add a TODO comment so you don't forget)",inclusive,constructive
112,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-08-21 19:58:33,Rodry,2021-08-21 19:59:49,You can probably make the typedef for this already,inclusive,constructive
113,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-08-21 20:06:33,Shubham Parihar,2021-08-21 20:06:33,"sure, I'll resolve these convos only when it's done so that I don't forget",inclusive,constructive
114,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-08-21 20:19:06,Rodry,2021-08-21 20:19:06,"Oh forgot this but this is why the CI is failing
```suggestion
       * The id of the stage channel this event belongs to
       * @type {Snowflake}
```",inclusive,constructive
115,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-08-23 16:03:41,Sugden,2021-08-23 16:08:01,"```suggestion
    const id = this.resolveId(options.guildEvent ?? options);
```
this would probably make more sense",inclusive,constructive
116,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-08-23 16:06:30,Sugden,2021-08-23 16:08:01,"this would throw on `0`, granted 0 is not a valid privacy level but the error would seem to indicate that neither a string or a number was passed",inclusive,constructive
117,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-08-23 16:10:15,Rodry,2021-08-23 16:10:55,You窶囘 need to add optional chaining then because options might be a snowflake,inclusive,constructive
118,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-08-23 16:25:44,Sugden,2021-08-23 16:25:44,a snowflake isn't null/undefined,neutral,constructive
119,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-08-23 16:28:13,Rodry,2021-08-23 16:28:13,Ah nvm I thought that would throw an error but I just confused it for sth else,inclusive,constructive
120,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-08-23 17:23:43,Shubham Parihar,2021-08-23 17:23:43,Not sure why I chose to validate `privacyLevel` here. The lib leaves the validation of these types of required values for the api. Changed it in f1e6d8e,inclusive,constructive
121,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-08-29 18:22:43,,2021-08-29 18:22:44,"You could create a `StageChannelResolvable` `@typedef` for this, akin to others such as [`VoiceChannelResolvable`](https://discord.js.org/#/docs/main/main/typedef/VoiceChannelResolvable) and [TextChannelResolvable](https://discord.js.org/#/docs/main/main/typedef/TextChannelResolvable) etc.",inclusive,constructive
122,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-08-30 6:47:30,Shubham Parihar,2021-08-30 6:47:30,"upstream changed these to just `channel id` now, so it won't be required here. This combination is referenced in a lot of places, so a new PR adding the typedef replacing all of them will be a better idea.",neutral,constructive
123,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-08-30 15:11:50,,2021-08-30 15:11:51,"> This combination is referenced in a lot of places

I see that now! I have opened #6568 then.",inclusive,constructive
124,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-09-28 19:59:02,Rodry,2021-09-28 20:06:47,"I suggest renaming this to scheduledStartAt to match the naming convention for Date types across the library (xAt) in contrast with timestamps which usually go by xTimestamp (should probably also create a getter for the timestamp from this property with Date.getTime())
```suggestion
    this.scheduledStartAt = new Date(data.scheduled_start_time);
```",inclusive,constructive
125,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-09-28 20:01:17,Rodry,2021-09-28 20:06:47,"Same reason as above, should also create a timestamp getter imo
```suggestion
    this.scheduledEndAt = new Date(data.scheduled_end_time);
```",neutral,constructive
126,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-09-28 20:02:07,Rodry,2021-09-28 20:06:47,"Just like threads, we probably don't need a class for this and the properties from the metadata can be added directly on the GuildEvent structure",neutral,constructive
127,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-09-28 20:03:10,Rodry,2021-09-28 20:06:47,Should add a `@see` link (note for the future once upstream PR is merged),inclusive,constructive
128,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-09-28 20:03:17,Rodry,2021-09-28 20:06:47,Should add a `@see` link (note for the future once upstream PR is merged),inclusive,constructive
129,discord.js,discordjs,6493,feat: add support for GuildEvent,"PullRequestPart(sha=""061966784bdd36962704f0d4d532a572f8dbfe01"")",Shubham Parihar,"[Label(name=""api support"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6493,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR starts the work of adding support for `GuildEvent` structure:
- discord/discord-api-docs#3586

Todo:
- [x] Add `GuildEvent` class
- [ ] Define all properties of the `GuildEvent` class
- [ ] Add Complete Documentation
- [ ] Add Complete Typings
- [x] `Get` List of guild events in a guild
- [x] `Post` Create a guild event
- [ ] ~~`Get` List of guild events available to the bot~~ (bots can't use this endpoint)
- [x] `Get` A guild event by id
- [x] `Delete` Delete a guild event
- [x] `Patch` Modify a guild event
- [x] Add `GuildEventManager`
- [x] Add `MANAGE_EVENTS` permission
- [ ] Add Gateway Events:
   - [x] GUILD_SCHEDULED_EVENT_CREATE
   - [x] GUILD_SCHEDULED_EVENT_UPDATE
   - [x] GUILD_SCHEDULED_EVENT_DELETE
   - [ ] GUILD_SCHEDULED_EVENT_USER_CREATE
   - [ ] GUILD_SCHEDULED_EVENT_USER_DELETE
- [x] Add `GuildEvent` related audit logs


**Status and versioning classification:**
- TBD

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",554,3,0,24,2021-08-21 19:19:06,,False,,,22,2021-10-04 22:24:18,True,2021-09-29 3:58:24,Shubham Parihar,2021-09-29 4:24:56,"The property you are referring to is creation time constructed using id which I *definitely didn't forget* to implement ､�. About these start and end fields, I believe they should be kept as it is for keeping consistency with API naming. I could add a `scheduledStartAt` getter to return the `Date` object and do the same for the end time.",inclusive,constructive
130,discord.js,discordjs,6496,feat(Invite): support friend invites,"PullRequestPart(sha=""83fafeef2bf305b6393d45e1560a240f7bf9a8c4"")",Advaith,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6496,open,"**Please describe the changes this PR makes and why it should be merged:**
Adds support for friend invites:
* https://github.com/discord/discord-api-docs/pull/3659

To be non-breaking, this PR adds a `supportFriendInvites` ClientOption: by default, it is `false`, and fetching a friend invite will continue to throw an error. If it is set to `true`, fetching a friend invite will return an Invite with channel as null.

The guide should recommend setting `supportFriendInvites` to true.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",13,4,3,2,2021-08-21 22:52:06,,False,,,4,2021-10-04 22:23:57,False,2021-08-27 17:12:39,Rodry,2021-08-27 17:12:39,"> Should this change?
> https://github.com/discordjs/discord.js/blob/83fafeef2bf305b6393d45e1560a240f7bf9a8c4/src/structures/Invite.js#L234

What to? From what I can see in the upstream PR, friend invites look identical to channel invites",inclusive,constructive
131,discord.js,discordjs,6496,feat(Invite): support friend invites,"PullRequestPart(sha=""83fafeef2bf305b6393d45e1560a240f7bf9a8c4"")",Advaith,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6496,open,"**Please describe the changes this PR makes and why it should be merged:**
Adds support for friend invites:
* https://github.com/discord/discord-api-docs/pull/3659

To be non-breaking, this PR adds a `supportFriendInvites` ClientOption: by default, it is `false`, and fetching a friend invite will continue to throw an error. If it is set to `true`, fetching a friend invite will return an Invite with channel as null.

The guide should recommend setting `supportFriendInvites` to true.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",13,4,3,2,2021-08-21 22:52:06,,False,,,4,2021-10-04 22:23:57,False,2021-08-27 18:42:06,Advaith,2021-08-27 18:42:06,Discord added discord.com/friend-invite/_ although it does the same thing as /invite/_ (https://discord.com/friend-invite/djs),neutral,constructive
132,discord.js,discordjs,6496,feat(Invite): support friend invites,"PullRequestPart(sha=""83fafeef2bf305b6393d45e1560a240f7bf9a8c4"")",Advaith,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6496,open,"**Please describe the changes this PR makes and why it should be merged:**
Adds support for friend invites:
* https://github.com/discord/discord-api-docs/pull/3659

To be non-breaking, this PR adds a `supportFriendInvites` ClientOption: by default, it is `false`, and fetching a friend invite will continue to throw an error. If it is set to `true`, fetching a friend invite will return an Invite with channel as null.

The guide should recommend setting `supportFriendInvites` to true.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",13,4,3,2,2021-08-21 22:52:06,,False,,,4,2021-10-04 22:23:57,False,2021-10-04 7:43:20,Noel,2021-10-04 7:43:20,This needs a rebase.,neutral,neutral
133,discord.js,discordjs,6496,feat(Invite): support friend invites,"PullRequestPart(sha=""83fafeef2bf305b6393d45e1560a240f7bf9a8c4"")",Advaith,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6496,open,"**Please describe the changes this PR makes and why it should be merged:**
Adds support for friend invites:
* https://github.com/discord/discord-api-docs/pull/3659

To be non-breaking, this PR adds a `supportFriendInvites` ClientOption: by default, it is `false`, and fetching a friend invite will continue to throw an error. If it is set to `true`, fetching a friend invite will return an Invite with channel as null.

The guide should recommend setting `supportFriendInvites` to true.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",13,4,3,2,2021-08-21 22:52:06,,False,,,4,2021-10-04 22:23:57,True,2021-08-23 12:30:46,Vlad Frangu,2021-08-23 12:31:15,"If we want to move forward with feature flags, we should probably group them under one object. Thoughts @discordjs/the-big-3?",inclusive,constructive
134,discord.js,discordjs,6496,feat(Invite): support friend invites,"PullRequestPart(sha=""83fafeef2bf305b6393d45e1560a240f7bf9a8c4"")",Advaith,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6496,open,"**Please describe the changes this PR makes and why it should be merged:**
Adds support for friend invites:
* https://github.com/discord/discord-api-docs/pull/3659

To be non-breaking, this PR adds a `supportFriendInvites` ClientOption: by default, it is `false`, and fetching a friend invite will continue to throw an error. If it is set to `true`, fetching a friend invite will return an Invite with channel as null.

The guide should recommend setting `supportFriendInvites` to true.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",13,4,3,2,2021-08-21 22:52:06,,False,,,4,2021-10-04 22:23:57,True,2021-08-23 14:01:33,,2021-08-23 14:01:33,"If we are going that way, grouping them would in my opinion be the best way to go about this.",inclusive,constructive
135,discord.js,discordjs,6496,feat(Invite): support friend invites,"PullRequestPart(sha=""83fafeef2bf305b6393d45e1560a240f7bf9a8c4"")",Advaith,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6496,open,"**Please describe the changes this PR makes and why it should be merged:**
Adds support for friend invites:
* https://github.com/discord/discord-api-docs/pull/3659

To be non-breaking, this PR adds a `supportFriendInvites` ClientOption: by default, it is `false`, and fetching a friend invite will continue to throw an error. If it is set to `true`, fetching a friend invite will return an Invite with channel as null.

The guide should recommend setting `supportFriendInvites` to true.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",13,4,3,2,2021-08-21 22:52:06,,False,,,4,2021-10-04 22:23:57,True,2021-08-25 6:21:21,Advaith,2021-08-25 6:21:21,what should it be called? `features`?,inclusive,constructive
136,discord.js,discordjs,6496,feat(Invite): support friend invites,"PullRequestPart(sha=""83fafeef2bf305b6393d45e1560a240f7bf9a8c4"")",Advaith,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6496,open,"**Please describe the changes this PR makes and why it should be merged:**
Adds support for friend invites:
* https://github.com/discord/discord-api-docs/pull/3659

To be non-breaking, this PR adds a `supportFriendInvites` ClientOption: by default, it is `false`, and fetching a friend invite will continue to throw an error. If it is set to `true`, fetching a friend invite will return an Invite with channel as null.

The guide should recommend setting `supportFriendInvites` to true.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",13,4,3,2,2021-08-21 22:52:06,,False,,,4,2021-10-04 22:23:57,True,2021-08-26 9:54:57,Vlad Frangu,2021-08-26 9:54:57,`featureFlags` maybe? @discordjs/the-big-3,inclusive,constructive
137,discord.js,discordjs,6530,refactor: Remove `Util.removeMentions()`,"PullRequestPart(sha=""772aaa664a8b282bf095a18341e4d126d4656f0d"")",,"[Label(name=""refactor""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6530,open,"**Please describe the changes this PR makes and why it should be merged:**
This method removes the user & role mentioning ability by inserting `\u200b` after the `@`. This essentially sanitises input to prevent mention injections when running `Message#cleanContent`. However, `Message#cleanContent` should only return the content with mentions replaced with names. Otherwise, this ruins the original message. 

`allowedMentions` has been implemented into discord.js for quite some time now and supersedes this ""workaround"". Therefore, I believe it's time we remove this method. Users should sanitise their own sending of messages via the `allowedMentions` feature if they don't want mentions to occur.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",3,13,2,2,2021-08-27 5:34:10,,False,,,0,2021-09-27 9:44:36,False,2021-08-27 13:33:58,Vlad Frangu,2021-08-27 13:33:58,"> One important note is that those mention removals were for preventing `here` and `everyone` (suffixed with `@`) from mentioning.

Should we replace just those then? Or is it just not needed since, well, allowedMentions?",inclusive,constructive
138,discord.js,discordjs,6530,refactor: Remove `Util.removeMentions()`,"PullRequestPart(sha=""772aaa664a8b282bf095a18341e4d126d4656f0d"")",,"[Label(name=""refactor""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6530,open,"**Please describe the changes this PR makes and why it should be merged:**
This method removes the user & role mentioning ability by inserting `\u200b` after the `@`. This essentially sanitises input to prevent mention injections when running `Message#cleanContent`. However, `Message#cleanContent` should only return the content with mentions replaced with names. Otherwise, this ruins the original message. 

`allowedMentions` has been implemented into discord.js for quite some time now and supersedes this ""workaround"". Therefore, I believe it's time we remove this method. Users should sanitise their own sending of messages via the `allowedMentions` feature if they don't want mentions to occur.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",3,13,2,2,2021-08-27 5:34:10,,False,,,0,2021-09-27 9:44:36,False,2021-08-27 15:28:23,,2021-08-27 15:28:23,"> > One important note is that those mention removals were for preventing `here` and `everyone` (suffixed with `@`) from mentioning.
> 
> Should we replace just those then? Or is it just not needed since, well, allowedMentions?

I believe the proper way would be to tell users that `allowedMentions` exist and they should be utilising that to suppress mentions in messages where one was not expecting them.",inclusive,constructive
139,discord.js,discordjs,6559,types(LinkButtonOptions): Add typings for urls in link buttons,"PullRequestPart(sha=""44276a33e7314429d5875a9af712963c3fb47e9a"")",Suneet Tipirneni,"[Label(name=""semver:patch""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6559,open,"**Please describe the changes this PR makes and why it should be merged:**

Discord only allows the following URL schemes for link buttons:
- `https`
- `http`
- `discord`

This enforces URLs in link buttons to use one of the schemes listed above.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
",39,4,4,6,2021-08-29 19:21:09,,False,,,0,2021-10-04 22:10:06,False,2021-08-30 0:04:49,monbrey,2021-08-30 0:04:49,Is this a validation we want to apply in our library? We normally avoid imposing these restrictions in case Discord changes them at some point.,inclusive,constructive
140,discord.js,discordjs,6559,types(LinkButtonOptions): Add typings for urls in link buttons,"PullRequestPart(sha=""44276a33e7314429d5875a9af712963c3fb47e9a"")",Suneet Tipirneni,"[Label(name=""semver:patch""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6559,open,"**Please describe the changes this PR makes and why it should be merged:**

Discord only allows the following URL schemes for link buttons:
- `https`
- `http`
- `discord`

This enforces URLs in link buttons to use one of the schemes listed above.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
",39,4,4,6,2021-08-29 19:21:09,,False,,,0,2021-10-04 22:10:06,False,2021-08-30 0:13:41,Suneet Tipirneni,2021-08-30 0:13:41,"Yeah this might be too premature, but up to you all.",inclusive,neutral
141,discord.js,discordjs,6559,types(LinkButtonOptions): Add typings for urls in link buttons,"PullRequestPart(sha=""44276a33e7314429d5875a9af712963c3fb47e9a"")",Suneet Tipirneni,"[Label(name=""semver:patch""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6559,open,"**Please describe the changes this PR makes and why it should be merged:**

Discord only allows the following URL schemes for link buttons:
- `https`
- `http`
- `discord`

This enforces URLs in link buttons to use one of the schemes listed above.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
",39,4,4,6,2021-08-29 19:21:09,,False,,,0,2021-10-04 22:10:06,False,2021-08-30 7:05:54,Noel,2021-08-30 7:05:54,Yeah I think this case would be ok 総,inclusive,neutral
142,discord.js,discordjs,6559,types(LinkButtonOptions): Add typings for urls in link buttons,"PullRequestPart(sha=""44276a33e7314429d5875a9af712963c3fb47e9a"")",Suneet Tipirneni,"[Label(name=""semver:patch""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6559,open,"**Please describe the changes this PR makes and why it should be merged:**

Discord only allows the following URL schemes for link buttons:
- `https`
- `http`
- `discord`

This enforces URLs in link buttons to use one of the schemes listed above.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
",39,4,4,6,2021-08-29 19:21:09,,False,,,0,2021-10-04 22:10:06,False,2021-10-02 11:58:24,Noel,2021-10-02 11:58:24,This needs a rebase.,neutral,neutral
143,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,False,2021-09-01 6:22:32,Kyler Chin,2021-09-01 6:27:22,"P.S. I've added this to my own bot, cutting the startup time in half in 1 line of code
Before
![Before](https://user-images.githubusercontent.com/7539174/131621857-e358bbe8-5b94-4515-ad7c-cdf58c1b2ffb.png)
![image](https://user-images.githubusercontent.com/7539174/131621958-58c21134-655c-410e-b5f5-b3dc70b59b2f.png)
After 3000ms setting, exact reduction of 12 sec
![After](https://user-images.githubusercontent.com/7539174/131621903-a78e74c0-6a0b-42f7-9c70-040d65ca425c.png)",inclusive,constructive
144,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,False,2021-09-01 8:20:57,Hackerboi 69,2021-09-01 8:20:57,Wouldn't `shardReadyTimeout` be a more appropriate name for this?,inclusive,neutral
145,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,False,2021-09-01 18:50:55,Kyler Chin,2021-09-01 18:50:55,"I've tried my best to make the recommended changes, let me know if we need to change anything else or we have any other thoughts about this before merging.",inclusive,constructive
146,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,False,2021-09-01 19:16:13,Rodry,2021-09-01 19:16:13,"Yeah I窶冦 pretty sure that text you added goes over the 120 char limit, you should install ESLint to be aware of these things since the CI requires approval to run",inclusive,constructive
147,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,False,2021-09-01 22:07:13,D Trombett,2021-09-01 22:12:01,"You can add the default value for this option in the `Options.createDefault()` static method:
https://github.com/discordjs/discord.js/blob/08419561edd710a6574b5e1449bf5dc1040580d5/src/util/Options.js#L110
And add validation in the `Client#_validateOptions()` method:
https://github.com/discordjs/discord.js/blob/08419561edd710a6574b5e1449bf5dc1040580d5/src/client/Client.js#L542",inclusive,constructive
148,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,False,2021-09-01 22:33:55,Kyler Chin,2021-09-01 22:33:55,"I'm debating if this should be titled ""fetchGuildTimeout"" or ""fetchGuildsTimeout"" or something else. I'm happy to discuss this and improve the experience for developers.",inclusive,constructive
149,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,False,2021-09-20 18:59:29,Kyler Chin,2021-09-20 18:59:29,@SpaceEEC the changes have been applied,inclusive,neutral
150,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 7:34:18,D Trombett,2021-09-01 7:36:07,"ｧｹ
```suggestion
    const guildTimeoutAmount = this.manager.client.options.fetchGuildTimeout || 1500;
```",neutral,constructive
151,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 7:35:06,D Trombett,2021-09-01 7:38:01,"*Not sure if this should be a rounded number?*
```suggestion
            `${hasGuildsIntent ? `in ${Math.round(guildTimeoutAmount / 1000)} seconds` : ''}.\n   Unavailable guild count: ${this.expectedGuilds.size}`,
```",inclusive,constructive
152,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 8:48:21,ckohen,2021-09-01 8:48:21,You sure you want 0 to be treated as default? If not use ??,inclusive,constructive
153,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 8:54:45,Sugden,2021-09-01 8:54:45,"what about setting the default here
https://github.com/discordjs/discord.js/blob/d16ada97087e0324134484c9c0724b52a2839bdf/src/util/Options.js#L110-L146",inclusive,neutral
154,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 8:59:01,ckohen,2021-09-01 8:59:02,I mean yes that would be preferred once validation is added ��,inclusive,constructive
155,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 9:15:15,D Trombett,2021-09-01 9:15:27,"> You sure you want 0 to be treated as default? If not use ??

If `15000` is added as a default option this isn't needed as `this.manager.client.options.fetchGuildTimeout` can be used... However, why should you use 0? Does this mean no timeout at all or no guilds at all?",inclusive,constructive
156,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 18:48:16,Kyler Chin,2021-09-01 18:48:16,What if we just used ms?,inclusive,constructive
157,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 19:24:14,Hackerboi 69,2021-09-01 19:27:18,"```suggestion
            `${hasGuildsIntent ? ` in ${guildTimeoutAmount} ms` : ''}.\n   Unavailable guild count: ${this.expectedGuilds.size}`,
```",inclusive,constructive
158,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 19:25:27,Rodry,2021-09-01 19:25:27,Should probably also say ms instead of milliseconds,inclusive,constructive
159,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 20:55:10,Kyler Chin,2021-09-01 20:55:11,"> Yeah I窶冦 pretty sure that text you added goes over the 120 char limit, you should install ESLint to be aware of these things since the CI requires approval to run

thank you! I've corrected this issue now and it passed the lint :) @ImRodry 
I've learned a lot and I hope this PR is helpful to all discord js bot devs!",inclusive,constructive
160,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 20:55:37,Rodry,2021-09-01 20:55:38,I think this isn't allowed either. Just format with prettier and it will adjust it for you,inclusive,constructive
161,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 21:07:24,Kyler Chin,2021-09-01 21:07:24,"Thank you, i will try this in a little bit.",inclusive,constructive
162,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 21:52:54,D Trombett,2021-09-01 21:52:54,"Well, it's the same. I personally think that if the option is in ms maybe the message logged should be in ms too but it's better that official djs collaborators decide lol",inclusive,constructive
163,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 21:56:46,Rodry,2021-09-01 21:56:47,The option should probably be in seconds instead since you're not gonna want nor need a timeout of less than 1 second,inclusive,constructive
164,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 22:02:27,D Trombett,2021-09-01 22:02:27,That's right.,inclusive,neutral
165,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 22:34:54,Kyler Chin,2021-09-01 22:34:54,I've used the prettier version! it looks so much better :) thank you,inclusive,constructive
166,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 22:51:54,Kyler Chin,2021-09-01 22:51:54,I think it's kinda weird to have decimals in the options but I'm not entirely sure. I think the console log and options should be the same formatting (in milliseconds) to make the experience smoother for devs.,inclusive,constructive
167,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 22:56:28,Rodry,2021-09-01 22:56:28,"But you shouldn窶冲 need decimals for the same reason you shouldn窶冲 need milliseconds. Your guilds will never arrive that fast so it窶冱 unreasonable to set a lower timeout. If the dev REALLY wants that then they can use decimals, but I don窶冲 see why they would",not inclusive,constructive
168,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-01 23:01:02,monbrey,2021-09-01 23:01:13,"```suggestion
    const guildTimeoutAmount = this.manager.client.options.fetchGuildTimeout ?? 15000;
```",neutral,constructive
169,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-02 3:35:17,Kyler Chin,2021-09-02 3:35:17,"Thank you for pointing that out. I was looking at the client options and the request-based ones all use milliseconds. Devs are already quite familiar with setTimeout in JS and other similar stuff being based on milliseconds.

Does this change have to be fulfilled for the option to be merged into the repo? ",inclusive,constructive
170,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-02 8:48:03,Hackerboi 69,2021-09-02 8:48:04,"```suggestion
 * @property {number} [fetchGuildTimeout=15000] Time in milliseconds to wait for missing guilds to be received before marking as ready (0 to skip this timeout)
```",neutral,constructive
171,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-02 10:38:57,Rodry,2021-09-02 10:38:57,Yeah that窶冱 true. I窶冦 not a maintainer I窶冦 just giving my personal opinion so let窶冱 wait for one of the @discordjs/the-big-3 to say something about this,inclusive,constructive
172,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-02 22:15:33,Rodry,2021-09-02 22:15:33,"The only good thing about this change is that it mentions that 0 skips the timeout. Other than that, why??
You removed ""Clients with the GUILDS intent"" and ""If not specified, the default is 15 seconds"" which imo are quite important mentions, what's the purpose of this?",not inclusive,constructive
173,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-03 12:05:46,Vlad Frangu,2021-09-03 12:07:48,"```suggestion
    // * The timeout is 15 seconds by default
```",neutral,constructive
174,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-03 12:05:58,Vlad Frangu,2021-09-03 12:07:48,"```suggestion
    // * This can be optionally be changed in the client options via the `fetchGuildTimeout` option
```",neutral,constructive
175,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-03 12:06:43,Vlad Frangu,2021-09-03 12:07:48,"While this is documentation in internal code, users shouldn't use a timeout of 0 without acknowledging the difference it can make",inclusive,constructive
176,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-03 12:06:58,Vlad Frangu,2021-09-03 12:07:48,"Also this default should be in the client option, so no need for `?? 15_000`",not inclusive,constructive
177,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-03 12:07:06,Vlad Frangu,2021-09-03 12:07:48,"```suggestion
      fetchGuildTimeout: 15_000,
```",neutral,constructive
178,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-03 12:07:32,Vlad Frangu,2021-09-03 12:07:48,"```suggestion
 * @property {number} [fetchGuildTimeout=15000] Time in milliseconds that clients with the `GUILDS` intent should hang
```",neutral,constructive
179,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-03 15:09:49,Hackerboi 69,2021-09-03 15:09:49,"```suggestion
 * and wait for missing guilds to be received before starting the bot
```",neutral,constructive
180,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-05 15:08:46,Hackerboi 69,2021-09-05 15:10:19,"```suggestion
    const guildTimeoutAmount = this.manager.client.options.fetchGuildTimeout;
```",neutral,constructive
181,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-05 15:09:35,Hackerboi 69,2021-09-05 15:10:19,"Defaults will be assigned in the client constructor when not specified, so there's no need to specify it here as well",inclusive,constructive
182,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-05 15:14:53,Hackerboi 69,2021-09-05 15:14:54,Is this line really needed? The `[fetchGuildTimeout=15000]` in L72 will already show the default in the docs.,not inclusive,neutral
183,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-06 7:34:08,Yoshida Tomio,2021-09-06 7:34:13,"```suggestion
 * @property {number} [fetchGuildTimeout=15000] Time in milliseconds that bots with the `GUILDS` intent should hang
```

Shouldn't be this called bots instead of clients?",inclusive,constructive
184,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-06 9:52:52,Rodry,2021-09-06 10:01:56,"Not at all, please revert that @kylerchin",neutral,neutral
185,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-20 15:04:29,,2021-09-20 15:32:25,"A few non-binding rephrasing suggestions:
- `hang and wait`: seems redundant
- `missing`: feels a bit misleading (might just be me)
- `starting the bot`: `Client#login` starts it. It's just not ready yet, a small nit.
- `skip this timeout`: `not wait` seems to be a bit more concise

```suggestion
 * @property {number} [waitGuildTimeout=15000] Time in milliseconds that bots with the `GUILDS` intent should wait for
 * initial guild's data to be received before emitting ready. (0 to not wait)
```",inclusive,constructive
186,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-20 18:58:07,Hackerboi 69,2021-09-20 18:59:30,"```suggestion
    const { waitGuildTimeout } = this.manager.client.options;
```",neutral,constructive
187,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-20 18:58:27,Hackerboi 69,2021-09-20 18:59:30,"```suggestion
            `${hasGuildsIntent ? ` in ${waitGuildTimeout} ms` : ''}.\nUnavailable guild count: ${
```",neutral,constructive
188,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-20 18:58:41,Hackerboi 69,2021-09-20 18:59:30,"```suggestion
      hasGuildsIntent ? waitGuildTimeout : 0,
```",neutral,constructive
189,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-20 18:59:23,Hackerboi 69,2021-09-20 18:59:30,"```suggestion
  waitGuildTimeout?: number;
```",neutral,constructive
190,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-20 19:02:02,Hackerboi 69,2021-09-20 19:02:03,"```suggestion
    const { waitGuildTimeout } = this.manager.client.options;
```",neutral,constructive
191,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-27 10:48:52,,2021-09-27 10:51:24,"To comply with the line length limit:
```suggestion
 * @property {number} [waitGuildTimeout=15000] Time in milliseconds that Clients with the GUILDS intent should wait for
 * missing guilds to be recieved before starting the bot. If not specified, the default is 15 seconds.
```",neutral,constructive
192,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-09-27 10:50:50,,2021-09-27 10:51:24,"I don't think we want to revert those:
```suggestion
      restWsBridgeTimeout: 5_000,
      restRequestTimeout: 15_000,
```",inclusive,constructive
193,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-10-03 12:51:59,Vlad Frangu,2021-10-03 12:52:23,Setting this to 0 *might* break many things. Are we sure we should allow it?,inclusive,constructive
194,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-10-11 5:26:49,Kyler Chin,2021-10-11 5:26:49,"I think so, usually it's just like 1 guild blocking the entire flow",inclusive,constructive
195,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-10-11 9:16:00,,2021-10-11 9:24:28,"> This can be optionally be changed

One of the ""be""s need to be removed.",inclusive,neutral
196,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-10-11 9:19:52,,2021-10-11 9:24:28,"Can you change the ""Client"" here to lowercase? Quickly scanning other areas, it looks like this isn't capitalised anywhere else (and I'd rather not see an inconsistency being introduced).",inclusive,constructive
197,discord.js,discordjs,6576,Creates the waitGuildTimeout amount client option,"PullRequestPart(sha=""477a6be70c24af91bd1afc644b1e25684611bf25"")",Kyler Chin,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6576,open,"**Please describe the changes this PR makes and why it should be merged:**

Sometimes bots hang while connecting for 15 seconds because 1 single guild is messed up. For bots with Continuous integration, this can create significant impacts to uptime, user experience, and lag.

This adds the optional `fetchGuildTimeout` option under ClientOptions, where the bot developer can optionally specify how long the client should hang for. If not specified, this will remain the default 15 seconds.

I'm happy to discuss how this can be improved, including the names of the options and variables, and I'd also be happy to write documentation!

痩晶争晶 my first pr to this repo, I'm honoured I can be a part of this community.

EDIT: I'm wondering if the ""in X sec"" should be changed to ""in X ms"".  

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",17,3,7,35,2021-09-01 6:09:05,,False,,,49,2021-10-13 11:47:38,True,2021-10-11 9:23:31,,2021-10-13 11:47:38,"1. Please change ""Clients"" to ""clients"" here (inconsistency) as well has here:
https://github.com/discordjs/discord.js/blob/477a6be70c24af91bd1afc644b1e25684611bf25/src/client/websocket/WebSocketShard.js#L481
2. Put the intent in backticks because it looks amazing (`GUILDS`)
3. Typo: recieved",inclusive,constructive
198,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-09-03 16:00:36,Noel,2021-09-03 16:00:36,"https://github.com/nodejs/undici#undicifetchinput-init-promise

> Only supported on Node 16+.

>This is experimental and is not yet fully compliant with the Fetch Standard. We plan to ship breaking changes to this feature until it is out of experimental.

https://nodejs.org/api/documentation.html#documentation_stability_index

> Stability: 1 - Experimental. The feature is not subject to Semantic Versioning rules. Non-backward compatible changes or removal may occur in any future release. Use of the feature is not recommended in production environments.",inclusive,constructive
199,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-09-03 16:14:09,Khafra,2021-09-03 16:18:03,"> 
> 
> https://github.com/nodejs/undici#undicifetchinput-init-promise
> 
> > Only supported on Node 16+.
> 
> > This is experimental and is not yet fully compliant with the Fetch Standard. We plan to ship breaking changes to this feature until it is out of experimental.
> 
> https://nodejs.org/api/documentation.html#documentation_stability_index
> 
> > Stability: 1 - Experimental. The feature is not subject to Semantic Versioning rules. Non-backward compatible changes or removal may occur in any future release. Use of the feature is not recommended in production environments.

I completely agree with this not being ready yet, just posting it here for some discussion. I assume most of the animosity in the previous discussion linked above was that *someone* had to do the work, so I decided to just see what happens.

Although I believe v16 is about to be LTS which should mean that both Blob and web streams should be removed from experimental status (?).

edit: pretty sure this library also requires v16+ (or at least v15) to use [AbortController](https://nodejs.org/dist/latest-v16.x/docs/api/globals.html#globals_class_abortcontroller) anyways.",inclusive,constructive
200,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-09-03 18:08:18,Khafra,2021-09-29 2:20:25,"EDIT: the reply was deleted

> Why not use axios though?

I've never personally used `axios`, so I don't know what - if any - benefits it provides over a standardized fetch API. However, just looking it over I can point out a few things:

- For Node, Axios wraps around http(s) which means it's much slower than undici (see: https://github.com/nodejs/undici/#benchmarks)
- By using a fetch implementation, it means that the API is standardized and, once spec-compliant, unlikely to change in the future.
- I have no idea if `axios` can handle the weird, non-spec compliant @discordjs/formdata package (for that matter, node-fetch v3 removed this behavior as well). Undici provides an implementation for node without external dependencies.
- Undici is maintained by nodejs maintainers under the nodejs organization. It's possible that this might land in core, and there have been talks of doing so. If it lands in core, we can simply remove the `const { fetch } = require('undici');` and it will work without changes.",inclusive,constructive
201,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-09-29 2:52:20,Advaith,2021-09-29 2:53:17,"From unidici's readme:

> #### Specification Compliance
>
> This section documents parts of the [Fetch Standard](https://fetch.spec.whatwg.org) which Undici does not support or does not fully implement.
>
> ##### Garbage Collection
>
> * https://fetch.spec.whatwg.org/#garbage-collection
>
> The [Fetch Standard](https://fetch.spec.whatwg.org) allows users to skip consuming the response body by relying on [garbage collection](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management#garbage_collection) to release connection resources. Undici does the same. However, garbage collection in Node is less aggressive and deterministic (due to the lack of clear idle periods that browser have through the rendering refresh rate) which means that leaving the release of connection resources to the garbage collector can lead to excessive connection usage, reduced performance (due to less connection re-use), and even stalls or deadlocks when running out of connections. Therefore, it is highly recommended to always either consume or cancel the response body.
>
> ```js
> // Do
> const headers = await fetch(URL)
>   .then(async res => {
>     for await (const chunk of res) {
>       // force consumption of body
>     }
>     return res.headers
>   })
>
> // Do not
> const headers = await fetch(url)
>   .then(res => res.headers)
> ```

will this be an issue?",inclusive,constructive
202,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-09-29 15:30:48,Khafra,2021-09-29 15:56:19,"> 
> will this be an issue?

In some cases, I believe so:
- on ratelimits (429s)
- 500..599 status
- anything outside of 200..599

I can add in a utility to consume the body in these cases if you'd like.

edit: due to it being an issue with node's gc, wouldn't this also affect node-fetch as well?",inclusive,constructive
203,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-09-29 18:44:09,Shubham Parihar,2021-09-29 18:44:09,"`FormData#append` takes a `Blob` as value. `undici` throws an error here, because `file.file` is not an instance of `Blob`.
https://github.com/discordjs/discord.js/blob/72e3958bc4b47b562296a64d683f95ec6995520f/src/rest/APIRequest.js#L53",neutral,constructive
204,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-09-29 20:03:17,Khafra,2021-09-29 20:04:12,"> 
> 
> `FormData#append` takes a `Blob` as value. `undici` throws an error here, because `file.file` is not an instance of `Blob`.
> 
> https://github.com/discordjs/discord.js/blob/72e3958bc4b47b562296a64d683f95ec6995520f/src/rest/APIRequest.js#L53

Can `file.file` be anything other than a Buffer? From testing I haven't seen any other value. ty :)",inclusive,constructive
205,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-09-29 20:55:00,Jimmy Wﾃ､rting,2021-09-29 20:58:28,"> Can file.file be anything other than a Buffer? From testing I haven't seen any other value. ty :)

Using undici is really living on the edge of experimental apis...
undici is using latest stuff from NodeJS and requires the newest and experimental api's there is... which is still unstable

- Now undici is using [require('node:buffer').Blob](https://github.com/nodejs/undici/blob/9f53d8216cc70f35de14a5f43d73f8608ab98a21/lib/fetch/body.js#L7) and not something else throughout their entire codebase (in fetch & FormData)
- undici created a own [File class](https://github.com/nodejs/undici/blob/main/lib/fetch/file.js) that extends the builtin NodeJS Blob
- And theirs FormData instance requires the input to be nothing but a [instance](https://github.com/nodejs/undici/blob/9f53d8216cc70f35de14a5f43d73f8608ab98a21/lib/fetch/formdata.js#L28-L32) of a NodeJS Blob coming from `node:buffer` 

So no... you can't append a buffer into their FormData instance, you have to construct a File using there version of the File implementation. (or creating a Blob using node:buffer - that later gets upgraded by their FormData impl automatically according to spec)

## About Blobs...

One of the reason why fetch-blob haven't switched to using the built in version of NodeJS Blob impl is b/c they are pretty darn useless unless you can't get them backed up by the filesystem somehow, otherwise they are just useless containers that stores a buffers in memory where you could as well use a uint8array or ArrayBuffer directly instead.

With `fetch-blob` you can get a File from the filesystem without holding anything in the memory. 
something of which node's is looking into implementing https://github.com/nodejs/node/issues/37340 But they are blocked by support for async blob sources https://github.com/nodejs/node/issues/37338 and also implementing a File class https://github.com/nodejs/node/issues/39015

Only then when File and blobs backed up by the file system would we over at node-fetch start to consider using the built in impl. and marking fetch-blob as legacy. cuz right now it serves a purpose not even NodeJS have fixed in their version.

## About FormData

Now to the version of undici FormData impl... knowing what i have written earlier about node's wortless Blob container and how strict undici FormData only accept a version of NodeJS own Blob implementation...
Do you think undici dose a grate job at sending large multipart payloads with files embedded up to a few GB of files? the answer is No.
You are required to read all files, construct a new Blob (or a File that extends Blob) with buffers and it's all held in memory.

Unlike one other spec compatible FormData implementations such as [formdata-polyfill](https://www.npmjs.com/package/formdata-polyfill) it dose not use instanceof checks. It can work with other Blob/File implementations as long as they look like a Blob, so it can accept both a fetch-blob and a NodeJS blob

and it can generate a FormData boundary/payload without ever reading the files content.

undici is more focused on writing something they wish to see being implemented into core one day. not something that is best suitable for userland as they require the latest experimental features 
undici is very new and not as much battle tested as node-fetch

if i would choose between undici and node-fetch then i would _maybe_ go with node-fetch 2.x or 3.x b/c it's 
- supported on more node's versions
- have been tested a lot by many users
- is less strict about what Blob, File, AbortSignal, URLSearchParams and FormData you are using. So it can work with files backed up by filesystem or other implementations cuz it dose not use `instanceof` checks instead uses duck typing to check if it looks like a duck and quack like a duck. This have been a feature of node-fetch since a very long beginning b/c nodejs lacks all those things.",inclusive,constructive
206,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-09-30 0:49:54,Khafra,2021-09-30 0:49:54,"The issues you brought up are completely out of scope for this repo and mostly don't apply (either to the platform, usage, or users).",not inclusive,not constructive
207,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-09-30 9:04:49,Shubham Parihar,2021-09-30 9:04:49,"The [`toBlob`](https://github.com/discordjs/discord.js/blob/0207b4a1204d019256c2c73d4754dba4d996884e/src/rest/APIRequest.js#L10) function doesn't work currently. The reason is that [`DataResolver#resolveFile`](https://github.com/discordjs/discord.js/blob/fe9500538e76423e49e16a1e1756eb04b5f40531/src/util/DataResolver.js#L108) returns a [`ReadableStream`](https://nodejs.org/dist/latest-v16.x/docs/api/webstreams.html) (Web Stream) for a **URL**, as that's what [`Response.body`](https://github.com/nodejs/undici#responsebody) is in undici and a [`ReadStream`](https://nodejs.org/api/stream.html#stream_class_stream_readable) (Nodejs Stream) for a **local file path**, as that's what `fs#createReadStream` returns.

Neither of them returns `true` for `Buffer#isBuffer`, hence they can't be converted into a Blob, which results in undici throwing as it expects a Blob as a value in `FormDate#append`.

I did some tinkering and got the `FormData#append` working which results in the bot correctly uploading the attachments. However, <ins>I don't know how **efficient** of an approach it is or what effects it has on the memory</ins>. Still, I'll write down what I did:

1) For a URL, we can directly return `Response.blob()` in [`DataResolver#resolveFile`](https://github.com/discordjs/discord.js/blob/fe9500538e76423e49e16a1e1756eb04b5f40531/src/util/DataResolver.js#L108) :
```js
static async resolveFile(resource) {
  if (typeof resource === 'string') {
    if (/^https?:\/\//.test(resource)) {
      const res = await fetch(resource);
      // return res.body;
      return res.blob();
    }
    // ...
  }
}
```
`Buffer#isBuffer` will return `false` for Blob, hence `toBlob` will pass it as it is to `FormData#append`.

2) For a local file path, we can create a `Buffer` using `fs.readFile`:
```js
static async resolveFile(resource) {
  if (typeof resource === 'string') {
    // ...
    return new Promise((resolve, reject) => {
      const file = path.resolve(resource);
      fs.stat(file, (err, stats) => {
        if (err) return reject(err);
        if (!stats.isFile()) return reject(new DiscordError('FILE_NOT_FOUND', file));
        return fs.readFile(file, (error, buf) => {
          if (error) return reject(error);
          return resolve(buf);
        });
      });
    });
  }
}
``` 
`toBlob` will then convert this `Buffer` into a Blob",inclusive,constructive
208,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-09-30 16:31:07,Khafra,2021-09-30 16:31:21,"I got everything fixed & tested with both `Buffer` and node `Readable streams` - will push the changes in a few hours.

In `resolveFile` I ended up following your suggestions but I converted everything to blobs there and removed the `toBlob` function.",inclusive,constructive
209,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-10-01 17:37:49,Khafra,2021-10-01 17:37:49,"I think this PR should be classified as `semver-major` due to 0618e7f9c22a7f3901669071d79fe2b6521c5a91
- DataResolver.resolveFileAsBuffer is no longer used (not removed however)
- DataResolver.resolveBase64 is now asynchronous (doesn't change behavior of the lib, but will affect anyone using it).
- DataResolver.resolveFile now accepts a `Blob` parameter (ie. MessageAttachment should support Blobs I believe).",inclusive,constructive
210,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-10-02 11:57:56,Noel,2021-10-02 11:57:56,This needs a rebase.,not inclusive,not constructive
211,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-10-03 14:42:07,Khafra,2021-10-03 14:42:07,"> 
> 
> Please fix lint

guess the precommit hook wasn't working, thought it would have caught that for me �� ",inclusive,constructive
212,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-10-03 20:37:46,Antonio Romﾃ｡n,2021-10-03 20:37:46,"> I think this PR should be classified as `semver-major` due to [0618e7f](https://github.com/discordjs/discord.js/commit/0618e7f9c22a7f3901669071d79fe2b6521c5a91)

Done!",inclusive,constructive
213,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-10-05 17:43:06,Noel,2021-10-05 17:43:06,This needs a rebase 総,not inclusive,not constructive
214,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-10-05 22:16:25,Khafra,2021-10-05 22:16:25,How would you guys feel if I used [`stream/consumers`](https://nodejs.org/api/webstreams.html#webstreams_utility_consumers)? They were added in v16.7.0 (so the min node version would have to get bumped from v16.6.0) but they would simplify some logic and allow the lib to support both node streams and web streams without extra logic.,inclusive,constructive
215,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-10-06 3:01:23,Shubham Parihar,2021-10-06 3:01:23,"This PR is `semver:major` now, so a bump in node version wouldn't be an issue 総",inclusive,constructive
216,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-10-06 4:40:06,Khafra,2021-10-06 4:40:06,"> 
> 
> `stream.consumers.blob()` throws error, because `consumers` is undefined

![image](https://user-images.githubusercontent.com/42794878/136141468-705c9a5c-dd87-4e93-83eb-6bacf9c1f0cb.png)
vscode lied to me lol

(fixed in a9dd2fe5ecd6c52bdc6e14e6b4920a8ffe842e75)",inclusive,constructive
217,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-10-08 10:43:56,Noel,2021-10-08 10:43:56,This needs a rebase.,not inclusive,not constructive
218,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-10-08 14:30:54,Khafra,2021-10-08 14:32:52,"> I really don't like that we have to manually consume the body if we won't use it (maybe one day they'll handle that for us ､�), but otherwise LGTM once it gets stable
```
The Fetch Standard allows users to skip consuming the response body by relying on garbage collection
to release connection resources. Undici does the same. However, garbage collection in Node is less aggressive
and deterministic (due to the lack of clear idle periods that browser have through the rendering refresh rate)
which means that leaving the release of connection resources to the garbage collector can lead to excessive
connection usage, reduced performance (due to less connection re-use), and even stalls or deadlocks when
running out of connections. Therefore, it is highly recommended to always either consume or cancel the 
response body.
```
It seems like an issue with NodeJS itself and not the package. Undici only seems to mention it because it's explicitly stated in the fetch spec. The difference between `node-fetch` and `undici` is that undici attempts to follow the spec whereas node-fetch just doesn't really care. It might also be an underlying implementation because nf uses http(s) and undici uses sockets. ",inclusive,constructive
219,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-10-08 14:49:11,Jimmy Wﾃ､rting,2021-10-08 14:49:37,"tip: in node-fetch i was thinking about using [finalizers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry), but they isn't really available in node 12.20

my idea was: If the `Response` is no longer referenced anywhere (as in not available from some variable or property or the global object) then my idea was to automatically consume the body for the developers (or abort the response all togheter)

maybe u could use finalizers... maybe undici should...",inclusive,constructive
220,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,False,2021-10-08 15:02:59,Khafra,2021-10-08 15:03:58,"> tip: in node-fetch i was thinking about using finalizers, but they isn't really available in node 12.20

Undici actually does this (at least to some extent) - https://github.com/nodejs/undici/blob/c32ed9d23dc0e99e7d79c8dd7fd26c40f9423b6d/lib/fetch/index.js#L52",inclusive,constructive
221,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-09-07 15:27:39,Antonio Romﾃ｡n,2021-09-07 15:28:56,"This returns an [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), if it's following the fetch API.

Fortunately, we do not have a method that returns `Promise<Buffer>` from a REST call, so this is not `semver: major` � ",inclusive,constructive
222,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-09-07 18:19:39,Khafra,2021-09-07 18:19:40,"https://github.com/nodejs/undici/blob/main/types/fetch.d.ts#L38 

types say that this returns a Buffer, but after testing this seems to be incorrect ��

will submit a pr/issue over there to get this fixed",inclusive,constructive
223,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-09-07 18:22:51,Khafra,2021-09-07 18:22:51,"If needed, I can convert to buffers with just
```js
Buffer.from(ArrayBuffer)
```",inclusive,constructive
224,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-09-08 12:42:47,Noel,2021-09-08 12:42:47,"I'm sure they were just referring to the fact that this is indeed different now, but since we only use it internally (and even there it can be either a buffer or array buffer) it doesn't matter.",inclusive,constructive
225,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-09-08 18:57:02,Antonio Romﾃ｡n,2021-09-08 18:57:02,"> but since we only use it internally (and even there it can be either a buffer or array buffer) it doesn't matter.

Actually, now that you mention it, it *does* matter:

https://github.com/discordjs/discord.js/blob/8cc3885739127ebc7023b6358ed0259ba7527250/src/managers/GuildMemberManager.js#L114-L116

This is broken after this PR given the current code, we need to either convert it to a buffer, or to use [`util.types.isArrayBuffer()`](https://nodejs.org/dist/latest-v16.x/docs/api/util.html#util_util_types_isarraybuffer_value).",inclusive,constructive
226,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-09-08 20:11:04,Khafra,2021-09-08 20:11:04,converted to Buffer in 6ac0b13,neutral,constructive
227,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-09-08 20:13:51,Noel,2021-09-08 20:13:51,"I'm not sure whats more expensive here.

Just naively glancing over it, checking if its an array buffer instead of creating a new buffer should be lighter?",inclusive,constructive
228,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-09-08 20:21:30,Sugden,2021-09-08 20:21:38,can we use async/await here,inclusive,constructive
229,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-09-08 20:22:38,Antonio Romﾃ｡n,2021-09-08 20:22:39,"We probably can catch all instances of those checks with just `instanceof Buffer` (or `Buffer.isBuffer`), but if I had to choose, I'd go for using `isArrayBuffer`.

~~It's also ironic how this PR is made with the premise of increasing the library's performance, while at the same time, also introducing overhead.~~

Bottom line is that it doesn't matter, because `Buffer` extends `Uint8Array`, which can take an `ArrayBuffer` as parameter, which is also used to efficiently share memory between typed arrays, so it's just a tiny wrapper on it, the memory isn't duplicated.

Of course, we don't read those buffers, so it's a bit useless to do the conversion.",inclusive,constructive
230,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-09-09 0:29:22,Khafra,2021-09-09 0:30:44,"Okay, I removed the conversion and check if the data is an ArrayBuffer instead (other than the tests which were previously buffers so I kept those changes).",inclusive,constructive
231,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-09-09 0:51:50,Jimmy Wﾃ､rting,2021-09-09 0:52:14,"I suggest using ArrayBuffer/Uint8Array instead of Buffer whenever possible, including Buffer to Web & Deno is not good - this is more generally speaking",inclusive,constructive
232,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-09-09 0:53:35,Advaith,2021-09-09 0:53:35,discord.js and unidici are node-only,neutral,constructive
233,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-09-09 1:44:19,Jimmy Wﾃ､rting,2021-09-09 1:44:19,"I just mean that: working with Buffer is considered as a bad practices for cross compatibility support
",inclusive,constructive
234,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-09-09 9:34:43,Antonio Romﾃ｡n,2021-09-09 9:34:43,"First, we intentionally removed browser support a while ago, see #5113.

Second, we have too many dependencies with Node.js to even be able to support Deno (or browser, for that matter).

And working with Buffer isn't a bad practice when the project is Node.js-only, it has a bunch of useful methods Uint8Array lacks of, and is a ""Stability: 2"" feature, which suggests it's both a stable and a recommended API.

Sure, we could change some stuff so we check for `Uint8Array` instances, but as far as Node.js goes, a lot of things take and return `Buffer` instances, and it can also confuse users when they have a `Buffer` but see a method that takes `Uint8Array`, as the names are very different (even though Buffer extends Uint8Array).

If anything, we can always look into cross-platform support with the TypeScript rewrite, but not for v13.",inclusive,constructive
235,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-10-01 3:20:17,Shubham Parihar,2021-10-01 3:24:33,"```suggestion
   * Resolves a BufferResolvable or a Stream to a Blob
```",inclusive,constructive
236,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-10-03 12:25:28,Vlad Frangu,2021-10-03 12:26:09,"Question: don't blobs have a type too? If they do, can't we use that for the `data:content-type`?",neutral,constructive
237,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-10-03 14:41:36,Khafra,2021-10-03 14:41:36,"Yes, fixed in fd18ecf64d2ae364657159eb6128ce235c9c13cc. If the type isn't specified, it's an empty string so I still default it to `image/jpg` though.",inclusive,constructive
238,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-10-06 3:49:53,Shubham Parihar,2021-10-06 3:49:54,"```suggestion
    if (resource?.[Symbol.asyncIterator]) {
```",inclusive,constructive
239,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-10-06 4:01:05,Shubham Parihar,2021-10-06 4:02:02,"```suggestion
const { blob } = require('node:stream/consumers');
```",inclusive,constructive
240,discord.js,discordjs,6586,refactor: node-fetch & @discordjs/formdata -> undici,"PullRequestPart(sha=""37438a6d07a894d7cf4c3acd450f0576b8b274e6"")",Khafra,"[Label(name=""dependencies""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6586,open,"**Please describe the changes this PR makes and why it should be merged:**

Removed the dependencies of `node-fetch` and `@discordjs/formdata` in favor of `undici`.

Undici contains spec-compliant `fetch` and `FormData` implementations, is maintained by
NodeJS contributors, and is just basically all around better. [Repo](https://github.com/nodejs/undici)

Complete list of changes:
- Removed `@discordjs/form-data` package and its 4 dependencies.
- Removed `node-fetch` (still installed as a dev package)
- [MessageAttachment](https://discord.js.org/#/docs/main/stable/class/MessageAttachment) and [MessageAttachment.setFile](https://discord.js.org/#/docs/main/stable/class/MessageAttachment?scrollTo=setFile) now accept a `Blob` parameter. 
- Likewise, [DataResolver.resolveFile](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFile) also accepts a Blob. It also returns a `Blob` now, whereas it used to return a `Buffer` or `ReadableStream`.
- [DataResolver.resolveBase64](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveBase64) now returns `Promise<string>`.
- [DataResolver.resolveFileAsBuffer](https://discord.js.org/#/docs/main/stable/class/DataResolver?scrollTo=s-resolveFileAsBuffer) is no longer used anywhere in the code, so like previously unused utility functions, will likely get removed in v14 (if this pr lands).
- The library now requires Node >=16.7.0 (bumped from Node >=16.6.0)

edit: I've been personally using this on my bot (roughly 21,000 members) that has made thousands of http requests and there has been no issue. This PR is likely ready for production use if anyone reading this wants to try it out. ;)

**Status and versioning classification:**
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",126,108,23,20,2021-09-03 15:48:15,,False,,,20,2021-10-08 15:03:58,True,2021-10-06 4:04:16,Shubham Parihar,2021-10-06 4:04:17,"```suggestion
      return blob(resource);
```",inclusive,constructive
241,discord.js,discordjs,6642,feat(Guild): add ROLE_SUBSCRIPTIONS_ENABLED guild feature,"PullRequestPart(sha=""93a40090fe2504c62c7d6747ed94e071d75d81d3"")",Shubham Parihar,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6642,open,"**Please describe the changes this PR makes and why it should be merged:**

- discord/discord-api-docs#3823
- discord/discord-api-docs#3846

**Status and versioning classification:**
- I know how to update typings and have done so
<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",15,13,2,2,2021-09-15 6:47:32,,False,,,0,2021-10-04 22:23:44,False,2021-09-15 15:05:08,Vlad Frangu,2021-09-15 15:05:08,"Check the linked PR, it literally sorts them alphabetically 操",neutral,constructive
242,discord.js,discordjs,6642,feat(Guild): add ROLE_SUBSCRIPTIONS_ENABLED guild feature,"PullRequestPart(sha=""93a40090fe2504c62c7d6747ed94e071d75d81d3"")",Shubham Parihar,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6642,open,"**Please describe the changes this PR makes and why it should be merged:**

- discord/discord-api-docs#3823
- discord/discord-api-docs#3846

**Status and versioning classification:**
- I know how to update typings and have done so
<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",15,13,2,2,2021-09-15 6:47:32,,False,,,0,2021-10-04 22:23:44,False,2021-09-22 5:10:38,Shubham Parihar,2021-09-22 5:10:38,"Old upstream PR got closed, the new follow up PR seems to add some more stuff. Hence, converting this to a draft for now",inclusive,constructive
243,discord.js,discordjs,6647,types: improve audit logs' typings,"PullRequestPart(sha=""7d8864f2f7e6934f524f27bd55481fec754ccc69"")",Elliot,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6647,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR adds strong typings to Audit Logs. For example, you could fetch them with a type like this:
```ts
const logs1 = await guild.fetchAuditLogs({ type: 'MEMBER_UPDATE' });
// > logs1.target => User
// > logs1.extra => null

const logs2 = await guild.fetchAuditLogs({ type: 'STAGE_INSTANCE_CREATE' });
// > logs2.target => StageInstance
// > logs2.extra => GuildChannel | { id: Snowflake }

// etc.
```

**To think about before merging**

1. Currently, we don't allow `number`s anymore in `GuildAuditLogsFetchOptions.type` because it's not compatible with `GuildAuditLogsAction`.
We could fix that by creating a mapping from numbers to `GuildAuditLogsAction`.
This could be done easily but is not really clean. Tell me what you would prefer, this is why I've made this PR a draft (Crawl told me on discord we should keep numbers, because it would be a too big regression otherwise)

2. I chose to write the current code with generics rather than many interfaces out of simplicity. However, this means that the typing of `logs1` will be `GuildAuditLogs<""MEMBER_UPDATE"">`, and `logs1.entries.first()` will be `GuildAuditLogsEntry<""MEMBER_UPDATE"", ""UPDATE"", ""USER"">` (yeah...)

Tell me if this is a no-no and I should use interfaces instead (which implies more code, which will even be spread around the file if we keep the classes sorted)


As this is my first contribution to the library, don't refrain from suggesting how it could be improved or what I should maybe do differently. I'm happy to discuss! :)

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

This will be ""patch"" once the `GuildAuditLogsFetchOptions.type` issue is resolved
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",113,73,1,6,2021-09-15 17:26:33,,False,,,8,2021-10-11 8:15:04,False,2021-10-02 11:58:14,Noel,2021-10-02 11:58:14,This needs a rebase.,inclusive,constructive
244,discord.js,discordjs,6647,types: improve audit logs' typings,"PullRequestPart(sha=""7d8864f2f7e6934f524f27bd55481fec754ccc69"")",Elliot,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6647,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR adds strong typings to Audit Logs. For example, you could fetch them with a type like this:
```ts
const logs1 = await guild.fetchAuditLogs({ type: 'MEMBER_UPDATE' });
// > logs1.target => User
// > logs1.extra => null

const logs2 = await guild.fetchAuditLogs({ type: 'STAGE_INSTANCE_CREATE' });
// > logs2.target => StageInstance
// > logs2.extra => GuildChannel | { id: Snowflake }

// etc.
```

**To think about before merging**

1. Currently, we don't allow `number`s anymore in `GuildAuditLogsFetchOptions.type` because it's not compatible with `GuildAuditLogsAction`.
We could fix that by creating a mapping from numbers to `GuildAuditLogsAction`.
This could be done easily but is not really clean. Tell me what you would prefer, this is why I've made this PR a draft (Crawl told me on discord we should keep numbers, because it would be a too big regression otherwise)

2. I chose to write the current code with generics rather than many interfaces out of simplicity. However, this means that the typing of `logs1` will be `GuildAuditLogs<""MEMBER_UPDATE"">`, and `logs1.entries.first()` will be `GuildAuditLogsEntry<""MEMBER_UPDATE"", ""UPDATE"", ""USER"">` (yeah...)

Tell me if this is a no-no and I should use interfaces instead (which implies more code, which will even be spread around the file if we keep the classes sorted)


As this is my first contribution to the library, don't refrain from suggesting how it could be improved or what I should maybe do differently. I'm happy to discuss! :)

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

This will be ""patch"" once the `GuildAuditLogsFetchOptions.type` issue is resolved
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",113,73,1,6,2021-09-15 17:26:33,,False,,,8,2021-10-11 8:15:04,True,2021-09-15 17:54:47,Suneet Tipirneni,2021-09-15 17:56:37,"Instead of using long conditional type chains, you should consider using a mapped type instead where `'TYPE'` is mapped to `ObjectType` https://www.typescriptlang.org/docs/handbook/2/mapped-types.html

Then easily reference the variant type later on:
`MyMappedType['USER'] // Returns User Type`

This reduces the work that the typechecker needs to do, and makes it less verbose.",inclusive,constructive
245,discord.js,discordjs,6647,types: improve audit logs' typings,"PullRequestPart(sha=""7d8864f2f7e6934f524f27bd55481fec754ccc69"")",Elliot,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6647,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR adds strong typings to Audit Logs. For example, you could fetch them with a type like this:
```ts
const logs1 = await guild.fetchAuditLogs({ type: 'MEMBER_UPDATE' });
// > logs1.target => User
// > logs1.extra => null

const logs2 = await guild.fetchAuditLogs({ type: 'STAGE_INSTANCE_CREATE' });
// > logs2.target => StageInstance
// > logs2.extra => GuildChannel | { id: Snowflake }

// etc.
```

**To think about before merging**

1. Currently, we don't allow `number`s anymore in `GuildAuditLogsFetchOptions.type` because it's not compatible with `GuildAuditLogsAction`.
We could fix that by creating a mapping from numbers to `GuildAuditLogsAction`.
This could be done easily but is not really clean. Tell me what you would prefer, this is why I've made this PR a draft (Crawl told me on discord we should keep numbers, because it would be a too big regression otherwise)

2. I chose to write the current code with generics rather than many interfaces out of simplicity. However, this means that the typing of `logs1` will be `GuildAuditLogs<""MEMBER_UPDATE"">`, and `logs1.entries.first()` will be `GuildAuditLogsEntry<""MEMBER_UPDATE"", ""UPDATE"", ""USER"">` (yeah...)

Tell me if this is a no-no and I should use interfaces instead (which implies more code, which will even be spread around the file if we keep the classes sorted)


As this is my first contribution to the library, don't refrain from suggesting how it could be improved or what I should maybe do differently. I'm happy to discuss! :)

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

This will be ""patch"" once the `GuildAuditLogsFetchOptions.type` issue is resolved
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",113,73,1,6,2021-09-15 17:26:33,,False,,,8,2021-10-11 8:15:04,True,2021-09-15 18:02:45,Suneet Tipirneni,2021-09-15 18:02:45,An example can be found in this diff: https://github.com/discordjs/discord.js/pull/6476,inclusive,constructive
246,discord.js,discordjs,6647,types: improve audit logs' typings,"PullRequestPart(sha=""7d8864f2f7e6934f524f27bd55481fec754ccc69"")",Elliot,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6647,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR adds strong typings to Audit Logs. For example, you could fetch them with a type like this:
```ts
const logs1 = await guild.fetchAuditLogs({ type: 'MEMBER_UPDATE' });
// > logs1.target => User
// > logs1.extra => null

const logs2 = await guild.fetchAuditLogs({ type: 'STAGE_INSTANCE_CREATE' });
// > logs2.target => StageInstance
// > logs2.extra => GuildChannel | { id: Snowflake }

// etc.
```

**To think about before merging**

1. Currently, we don't allow `number`s anymore in `GuildAuditLogsFetchOptions.type` because it's not compatible with `GuildAuditLogsAction`.
We could fix that by creating a mapping from numbers to `GuildAuditLogsAction`.
This could be done easily but is not really clean. Tell me what you would prefer, this is why I've made this PR a draft (Crawl told me on discord we should keep numbers, because it would be a too big regression otherwise)

2. I chose to write the current code with generics rather than many interfaces out of simplicity. However, this means that the typing of `logs1` will be `GuildAuditLogs<""MEMBER_UPDATE"">`, and `logs1.entries.first()` will be `GuildAuditLogsEntry<""MEMBER_UPDATE"", ""UPDATE"", ""USER"">` (yeah...)

Tell me if this is a no-no and I should use interfaces instead (which implies more code, which will even be spread around the file if we keep the classes sorted)


As this is my first contribution to the library, don't refrain from suggesting how it could be improved or what I should maybe do differently. I'm happy to discuss! :)

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

This will be ""patch"" once the `GuildAuditLogsFetchOptions.type` issue is resolved
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",113,73,1,6,2021-09-15 17:26:33,,False,,,8,2021-10-11 8:15:04,True,2021-09-15 19:43:30,Elliot,2021-09-15 19:43:30,Done in https://github.com/noftaly/discord.js/commit/70a4b72b2f30a4eb037639b21c0f8e958d69ba2c,not inclusive,constructive
247,discord.js,discordjs,6647,types: improve audit logs' typings,"PullRequestPart(sha=""7d8864f2f7e6934f524f27bd55481fec754ccc69"")",Elliot,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6647,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR adds strong typings to Audit Logs. For example, you could fetch them with a type like this:
```ts
const logs1 = await guild.fetchAuditLogs({ type: 'MEMBER_UPDATE' });
// > logs1.target => User
// > logs1.extra => null

const logs2 = await guild.fetchAuditLogs({ type: 'STAGE_INSTANCE_CREATE' });
// > logs2.target => StageInstance
// > logs2.extra => GuildChannel | { id: Snowflake }

// etc.
```

**To think about before merging**

1. Currently, we don't allow `number`s anymore in `GuildAuditLogsFetchOptions.type` because it's not compatible with `GuildAuditLogsAction`.
We could fix that by creating a mapping from numbers to `GuildAuditLogsAction`.
This could be done easily but is not really clean. Tell me what you would prefer, this is why I've made this PR a draft (Crawl told me on discord we should keep numbers, because it would be a too big regression otherwise)

2. I chose to write the current code with generics rather than many interfaces out of simplicity. However, this means that the typing of `logs1` will be `GuildAuditLogs<""MEMBER_UPDATE"">`, and `logs1.entries.first()` will be `GuildAuditLogsEntry<""MEMBER_UPDATE"", ""UPDATE"", ""USER"">` (yeah...)

Tell me if this is a no-no and I should use interfaces instead (which implies more code, which will even be spread around the file if we keep the classes sorted)


As this is my first contribution to the library, don't refrain from suggesting how it could be improved or what I should maybe do differently. I'm happy to discuss! :)

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

This will be ""patch"" once the `GuildAuditLogsFetchOptions.type` issue is resolved
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",113,73,1,6,2021-09-15 17:26:33,,False,,,8,2021-10-11 8:15:04,True,2021-09-16 0:19:33,Suneet Tipirneni,2021-09-16 0:19:57,"These can use mapped types as well, although not as trivial, but can be accomplished like this:

```ts
export type AuditUpdateActions = {
  [key in keyof typeof AuditUpdateTypes]: 'UPDATE';
};

export type AuditDeleteActions = {
  [key in keyof typeof AuditDeleteTypes]: 'DELETE';
};

...

export type AllActions = AuditUpdateActions & AuditDeleteActions & ...;
```

Where `AuditDeleteTypes` and `AuditUpdateTypes` are enums with the subset of values that correspond to `'DELETE'` or `'UPDATE'` ",neutral,constructive
248,discord.js,discordjs,6647,types: improve audit logs' typings,"PullRequestPart(sha=""7d8864f2f7e6934f524f27bd55481fec754ccc69"")",Elliot,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6647,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR adds strong typings to Audit Logs. For example, you could fetch them with a type like this:
```ts
const logs1 = await guild.fetchAuditLogs({ type: 'MEMBER_UPDATE' });
// > logs1.target => User
// > logs1.extra => null

const logs2 = await guild.fetchAuditLogs({ type: 'STAGE_INSTANCE_CREATE' });
// > logs2.target => StageInstance
// > logs2.extra => GuildChannel | { id: Snowflake }

// etc.
```

**To think about before merging**

1. Currently, we don't allow `number`s anymore in `GuildAuditLogsFetchOptions.type` because it's not compatible with `GuildAuditLogsAction`.
We could fix that by creating a mapping from numbers to `GuildAuditLogsAction`.
This could be done easily but is not really clean. Tell me what you would prefer, this is why I've made this PR a draft (Crawl told me on discord we should keep numbers, because it would be a too big regression otherwise)

2. I chose to write the current code with generics rather than many interfaces out of simplicity. However, this means that the typing of `logs1` will be `GuildAuditLogs<""MEMBER_UPDATE"">`, and `logs1.entries.first()` will be `GuildAuditLogsEntry<""MEMBER_UPDATE"", ""UPDATE"", ""USER"">` (yeah...)

Tell me if this is a no-no and I should use interfaces instead (which implies more code, which will even be spread around the file if we keep the classes sorted)


As this is my first contribution to the library, don't refrain from suggesting how it could be improved or what I should maybe do differently. I'm happy to discuss! :)

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

This will be ""patch"" once the `GuildAuditLogsFetchOptions.type` issue is resolved
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",113,73,1,6,2021-09-15 17:26:33,,False,,,8,2021-10-11 8:15:04,True,2021-09-16 16:10:37,Elliot,2021-09-16 16:10:37,"Great idea! I've done it in https://github.com/noftaly/discord.js/commit/65f08d25ed00717b458ce2fe15fea2ea17442cbd and expended it to TTargetType, even though I didn't exactly do it as you proposed to prevent too much duplication",inclusive,constructive
249,discord.js,discordjs,6647,types: improve audit logs' typings,"PullRequestPart(sha=""7d8864f2f7e6934f524f27bd55481fec754ccc69"")",Elliot,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6647,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR adds strong typings to Audit Logs. For example, you could fetch them with a type like this:
```ts
const logs1 = await guild.fetchAuditLogs({ type: 'MEMBER_UPDATE' });
// > logs1.target => User
// > logs1.extra => null

const logs2 = await guild.fetchAuditLogs({ type: 'STAGE_INSTANCE_CREATE' });
// > logs2.target => StageInstance
// > logs2.extra => GuildChannel | { id: Snowflake }

// etc.
```

**To think about before merging**

1. Currently, we don't allow `number`s anymore in `GuildAuditLogsFetchOptions.type` because it's not compatible with `GuildAuditLogsAction`.
We could fix that by creating a mapping from numbers to `GuildAuditLogsAction`.
This could be done easily but is not really clean. Tell me what you would prefer, this is why I've made this PR a draft (Crawl told me on discord we should keep numbers, because it would be a too big regression otherwise)

2. I chose to write the current code with generics rather than many interfaces out of simplicity. However, this means that the typing of `logs1` will be `GuildAuditLogs<""MEMBER_UPDATE"">`, and `logs1.entries.first()` will be `GuildAuditLogsEntry<""MEMBER_UPDATE"", ""UPDATE"", ""USER"">` (yeah...)

Tell me if this is a no-no and I should use interfaces instead (which implies more code, which will even be spread around the file if we keep the classes sorted)


As this is my first contribution to the library, don't refrain from suggesting how it could be improved or what I should maybe do differently. I'm happy to discuss! :)

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

This will be ""patch"" once the `GuildAuditLogsFetchOptions.type` issue is resolved
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",113,73,1,6,2021-09-15 17:26:33,,False,,,8,2021-10-11 8:15:04,True,2021-10-03 12:29:31,Vlad Frangu,2021-10-03 12:29:48,"Isn't it gonna be a resolved Invite, and not a promise when you fetch it?",inclusive,constructive
250,discord.js,discordjs,6647,types: improve audit logs' typings,"PullRequestPart(sha=""7d8864f2f7e6934f524f27bd55481fec754ccc69"")",Elliot,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6647,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR adds strong typings to Audit Logs. For example, you could fetch them with a type like this:
```ts
const logs1 = await guild.fetchAuditLogs({ type: 'MEMBER_UPDATE' });
// > logs1.target => User
// > logs1.extra => null

const logs2 = await guild.fetchAuditLogs({ type: 'STAGE_INSTANCE_CREATE' });
// > logs2.target => StageInstance
// > logs2.extra => GuildChannel | { id: Snowflake }

// etc.
```

**To think about before merging**

1. Currently, we don't allow `number`s anymore in `GuildAuditLogsFetchOptions.type` because it's not compatible with `GuildAuditLogsAction`.
We could fix that by creating a mapping from numbers to `GuildAuditLogsAction`.
This could be done easily but is not really clean. Tell me what you would prefer, this is why I've made this PR a draft (Crawl told me on discord we should keep numbers, because it would be a too big regression otherwise)

2. I chose to write the current code with generics rather than many interfaces out of simplicity. However, this means that the typing of `logs1` will be `GuildAuditLogs<""MEMBER_UPDATE"">`, and `logs1.entries.first()` will be `GuildAuditLogsEntry<""MEMBER_UPDATE"", ""UPDATE"", ""USER"">` (yeah...)

Tell me if this is a no-no and I should use interfaces instead (which implies more code, which will even be spread around the file if we keep the classes sorted)


As this is my first contribution to the library, don't refrain from suggesting how it could be improved or what I should maybe do differently. I'm happy to discuss! :)

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

This will be ""patch"" once the `GuildAuditLogsFetchOptions.type` issue is resolved
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",113,73,1,6,2021-09-15 17:26:33,,False,,,8,2021-10-11 8:15:04,True,2021-10-03 12:32:53,,2021-10-03 12:36:51,"This breaks the ability to use a number, e.g. `guild.fetchAuditLogs({ type: GuildAuditLogs.Actions.BOT_ADD });` (or even a generic `number`)",inclusive,constructive
251,discord.js,discordjs,6647,types: improve audit logs' typings,"PullRequestPart(sha=""7d8864f2f7e6934f524f27bd55481fec754ccc69"")",Elliot,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6647,open,"**Please describe the changes this PR makes and why it should be merged:**

This PR adds strong typings to Audit Logs. For example, you could fetch them with a type like this:
```ts
const logs1 = await guild.fetchAuditLogs({ type: 'MEMBER_UPDATE' });
// > logs1.target => User
// > logs1.extra => null

const logs2 = await guild.fetchAuditLogs({ type: 'STAGE_INSTANCE_CREATE' });
// > logs2.target => StageInstance
// > logs2.extra => GuildChannel | { id: Snowflake }

// etc.
```

**To think about before merging**

1. Currently, we don't allow `number`s anymore in `GuildAuditLogsFetchOptions.type` because it's not compatible with `GuildAuditLogsAction`.
We could fix that by creating a mapping from numbers to `GuildAuditLogsAction`.
This could be done easily but is not really clean. Tell me what you would prefer, this is why I've made this PR a draft (Crawl told me on discord we should keep numbers, because it would be a too big regression otherwise)

2. I chose to write the current code with generics rather than many interfaces out of simplicity. However, this means that the typing of `logs1` will be `GuildAuditLogs<""MEMBER_UPDATE"">`, and `logs1.entries.first()` will be `GuildAuditLogsEntry<""MEMBER_UPDATE"", ""UPDATE"", ""USER"">` (yeah...)

Tell me if this is a no-no and I should use interfaces instead (which implies more code, which will even be spread around the file if we keep the classes sorted)


As this is my first contribution to the library, don't refrain from suggesting how it could be improved or what I should maybe do differently. I'm happy to discuss! :)

**Status and versioning classification:**

- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

This will be ""patch"" once the `GuildAuditLogsFetchOptions.type` issue is resolved
<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",113,73,1,6,2021-09-15 17:26:33,,False,,,8,2021-10-11 8:15:04,True,2021-10-03 13:54:03,Elliot,2021-10-03 13:54:03,"yes, that's written in my PR message and that's why I need your advice before merging ��",inclusive,constructive
252,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,False,2021-09-22 17:23:06,Grey Himmel,2021-09-22 17:23:06,"Do you think it would be better for `getFocused()` to return the whole option instead of just the value of it? Seeing as multiple options can have autocomplete on (afaik) and devs will probably want to know which out of all the options is currently focused using that

I know you can also just check if an individual option is `.focused` but I feel like making `getFocused()` shortcut to the full option, or at least including its name, might be better ､�",inclusive,constructive
253,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,False,2021-09-22 21:29:56,Rodry,2021-09-22 21:29:56,"> Do you think it would be better for `getFocused()` to return the whole option instead of just the value of it? Seeing as multiple options can have autocomplete on (afaik) and devs will probably want to know which out of all the options is currently focused using that
> 
> I know you can also just check if an individual option is `.focused` but I feel like making `getFocused()` shortcut to the full option, or at least including its name, might be better ､�

As for this it could probably be toggleable through a parameter like sendFull and, like one of the discussions above mentioned, the required parameter should be removed since it doesn't make much sense to be there, and should just be replaced by this one IMO",inclusive,constructive
254,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,False,2021-10-03 16:37:52,Rodry,2021-10-03 16:37:52,"Hey @OfficialSirH I think there was a problem in your rebase, could you try again?",inclusive,constructive
255,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,False,2021-10-03 16:54:59,Micah Benac,2021-10-03 16:54:59,"> Hey @OfficialSirH I think there was a problem in your rebase, could you try again?

What's the problem with the rebase?",neutral,neutral
256,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,False,2021-10-03 17:01:24,Almeida,2021-10-03 17:01:24,"> > Hey @OfficialSirH I think there was a problem in your rebase, could you try again?
> 
> What's the problem with the rebase?

Look at the Files Changed tab",neutral,neutral
257,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,False,2021-10-03 17:02:08,Noel,2021-10-03 17:02:08,"Thats normal, because it was a merge not a rebase.",neutral,neutral
258,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,False,2021-10-12 19:13:49,Noel,2021-10-12 19:13:49,This needs a rebase.,inclusive,constructive
259,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 6:11:51,ckohen,2021-09-22 6:19:05,Is this tested? `transformOption` and `transformResolved` don't exist on Interaction.,inclusive,constructive
260,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 6:13:00,ckohen,2021-09-22 6:19:05,The option is not always going to be a string type. It can be any type that accepts the choices / autocomplete parameter,inclusive,constructive
261,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 6:14:10,ckohen,2021-09-22 6:19:05,No need for the targetId check on this one for now.,not inclusive,neutral
262,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 6:15:40,ckohen,2021-09-22 6:19:05,"This example doesn't match the function name, which I don't love right now either. Maybe `sendResult` or something. Not the best at naming things so I'd wait for more input on that though.",neutral,not constructive
263,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 6:17:20,ckohen,2021-09-22 6:19:05,Need to add this to the `applyToClass` function and then go exclude it from other interaction types,neutral,constructive
264,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 6:22:15,monbrey,2021-09-22 6:22:16,"I don't see any reason to make this an option you have to get by name either. There can only ever be one focused option, so I'd design it more like `getSubcommand()` which can only be singular.",inclusive,constructive
265,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 6:24:25,monbrey,2021-09-22 6:24:25,It might be able to extend `CommandInteraction` based on the params,neutral,constructive
266,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 6:25:32,ckohen,2021-09-22 6:26:53,"I don't know what the best option is, but I don't think its to extend `BaseCommandInteraction`  /  `CommandInteraction` though, there's too many properties that don't apply to this interaction type. Need to find some way to have the relevant properties and methods without too much code duplication.",neutral,neutral
267,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 7:09:08,ckohen,2021-09-22 7:09:08,"Update, it appears resolved doesn't exist for these interactions, so the code duplication could be minimal. I think that would be the best approach.",neutral,constructive
268,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 7:10:00,ckohen,2021-09-22 7:10:00,"On second thought, this should probably just go directly in the `AutocompleteInteraction` class. That class cannot use any of the response types and this type cannot be used by anything else, so no need to overcomplicate it.",inclusive,constructive
269,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 8:06:45,Shubham Parihar,2021-09-22 8:08:22,"```suggestion
 * @extends {BaseCommandInteraction}
```",inclusive,constructive
270,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 8:08:13,Shubham Parihar,2021-09-22 8:08:22,This in code extends `BaseCommandInteraction`,not inclusive,not constructive
271,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 14:18:12,Vlad Frangu,2021-09-22 14:18:15,"```suggestion
  public result(options: InteractionResultOptions): Promise<void>;
```",inclusive,constructive
272,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 15:41:28,Shubham Parihar,2021-09-22 15:53:04,"```suggestion
   * Indicates whether this interaction is an {@link AutocompleteInteraction}
```",inclusive,constructive
273,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 15:44:24,Shubham Parihar,2021-09-22 15:53:04,"```suggestion
   * @param {boolean} [required=false] Whether to throw an error if the option is not found
   * @returns {?(string|number)} The value of the option, or null if not set and not required
```",inclusive,constructive
274,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 15:54:10,Shubham Parihar,2021-09-22 15:54:11,"```suggestion
     * The options passed to the command
```",inclusive,constructive
275,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 16:57:22,Shubham Parihar,2021-09-22 16:59:41,"```suggestion
   * @param {boolean} [required=false] Whether to throw an error if the option is not found
```
you forgot to fix this one. Same for the `@return` description below this",inclusive,constructive
276,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 17:39:37,,2021-09-22 17:39:47,`InteractionResultOptions` needs defining!,not inclusive,constructive
277,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 18:00:53,Micah Benac,2021-09-22 18:00:54,Could you clarify what you mean? Cause the type can be found on line 4087 in index.d.ts so I'm unsure of what you mean to define it.,inclusive,not constructive
278,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 18:23:30,,2021-09-22 18:23:30,"This is JSDoc. You've used it without creating a `@typedef` for it, so it won't show up in the documentation. If you search around the repository, you'll see every custom type has an associated `@typedef` for it (and those that don't won't show up on the documentation). All you have to do is create one and you're good to go.

This will actually be the same as [`ApplicationCommandOptionChoice`](https://discord.js.org/#/docs/main/main/typedef/ApplicationCommandOptionChoice), so lucky for you it's just a copy-paste.",inclusive,constructive
279,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 18:23:52,Micah Benac,2021-09-22 18:23:52,"nevermind, my bad.",neutral,not constructive
280,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 19:16:34,Grey Himmel,2021-09-22 19:16:34,"i think `sendResult` works personally, it's pretty clear and concise  
worst case if something similar to `reply` is preferred, `respond` might work? i still like the first better though",inclusive,constructive
281,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 19:22:59,ckohen,2021-09-22 19:29:36,"I was suggesting to continue extending Interaction and duplicate the few necessary parameters and methods, since webhook, ephemeral, deferred (from BaseCommandInteraction) don't apply here",inclusive,constructive
282,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 19:24:04,ckohen,2021-09-22 19:29:36,"We don't get resolved data on this ever right now. It's possible that's a bug, but I doubt it",inclusive,constructive
283,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 19:28:50,ckohen,2021-09-22 19:29:36,"This is kinda annoying to deal with in typings right now. This function exists on normal command interactions, where focussed options will never exist, but when the interaction type is autocomplete then its always present, so passing true to this function feels wrong (you get can't get an autocomplete interaction without a focused option). Maybe this also needs to be part of the `AutocompleteInteraction`? Thoughts?",inclusive,constructive
284,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 19:34:01,Rodry,2021-09-22 19:34:03,"By that logic, getMessage shouldn窶冲 be there either since it窶冱 only used in context menus. I think this is fine and it should throw an error when used on an interaction that isn窶冲 Autocomplete",inclusive,constructive
285,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 19:35:01,Rodry,2021-09-22 19:35:01,Why not just follow the reply naming scheme from every other interaction?,neutral,constructive
286,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 19:38:34,ckohen,2021-09-22 19:38:34,What I'm saying is the required option is a hack for typings purposes here. There's no real reason to actually use it. And yes that applies to context menu interactions too! We should probably be using type generics instead,inclusive,constructive
287,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 20:31:05,Rodry,2021-09-22 20:31:05,I guess since this is the only one that would always be required in an Autocomplete interaction it could be removed without necessarily creating an inconsistency but it should definitely be kept on the option resolver and throw an error when used on other interaction types,not inclusive,constructive
288,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 20:39:06,Grey Himmel,2021-09-22 20:39:07,"if you mean naming the function `reply`, tbh i don't think that's very accurate to what the function does  
mostly because `reply` everywhere else implies sending some kind of message that the user will see, not just a list of options they can choose from in an interface that's not very message-like",inclusive,constructive
289,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 20:47:19,Rodry,2021-09-22 20:47:19,reply and respond are synonyms,not inclusive,neutral
290,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 21:22:07,Grey Himmel,2021-09-22 21:22:07,"and i said i personally preferred `sendResult` over respond for that exact reason �  
i'm easy either way on it, just explaining my line of thought with not naming it `reply`",not inclusive,neutral
291,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-22 21:28:43,Rodry,2021-09-22 21:28:43,"Yeah sure then, sendResult sounds good",neutral,neutral
292,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-23 12:02:52,Vlad Frangu,2021-09-23 12:04:29,"Example isn't identical with example. Also.. the naming is a bit weird, I'd personally name it respond. Thoughts @discordjs/the-big-3?",inclusive,neutral
293,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-23 12:03:27,Vlad Frangu,2021-09-23 12:04:29,"Not at all what this option represents, please update the comment",inclusive,neutral
294,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-23 12:03:51,Vlad Frangu,2021-09-23 12:04:29,You need to define this message in Errors.js,neutral,constructive
295,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-23 12:04:17,Vlad Frangu,2021-09-23 12:04:29,More inconsistency,not inclusive,constructive
296,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-25 9:44:46,Micah Benac,2021-09-25 9:44:46,"> What I'm saying is the required option is a hack for typings purposes here. There's no real reason to actually use it. And yes that applies to context menu interactions too! We should probably be using type generics instead

@ckohen Would this type generic work out for what you were suggesting or do you have a better suggestion for this?",inclusive,constructive
297,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-09-27 20:06:23,ckohen,2021-09-27 20:06:24,"Yes! this works great The functions themselves don't need generics though, just move them like so (not sure why the diff looks so weird here).

```suggestion
 public getFocused(
   getFull: true
 ): InteractionOptionResolverReturn<Type, AutocompleteInteraction, ApplicationCommandOptionChoice>;
 public getFocused(
    getFull?: boolean,
  ): InteractionOptionResolverReturn<Type, AutocompleteInteraction, string | number>;
```",inclusive,constructive
298,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-10-03 12:46:25,Vlad Frangu,2021-10-03 12:49:12,Is this actually needed?,not inclusive,not constructive
299,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-10-03 12:47:00,Vlad Frangu,2021-10-03 12:49:12,Shouldn't this be static?,neutral,not constructive
300,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-10-03 13:01:59,,2021-10-03 13:01:59,"I think so, `AutocompleteInteraction` always has a channelId, which is not guaranteed in `Interaction`.",neutral,constructive
301,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-10-03 13:03:43,,2021-10-03 13:03:43,"It's not static in `BaseCommandInteraction` either, so probably not.",inclusive,constructive
302,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-10-03 13:04:51,,2021-10-03 13:11:43,"This is redundant isn't it? It's identical to the type in the base class:
https://github.com/discordjs/discord.js/blob/34b2ad0d8ee39eb9cc964a4334a803b2ab48cae5/src/structures/Interaction.js#L97-L101",inclusive,constructive
303,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-10-03 13:07:21,,2021-10-03 13:11:43,"What's the reason to name this method `respond` instead of `reply`, which is what `InteractionResponses` is using?",inclusive,constructive
304,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-10-03 13:20:02,Almeida,2021-10-03 13:20:02,https://github.com/discordjs/discord.js/pull/6672#discussion_r714726081,not inclusive,constructive
305,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-10-03 13:30:29,Grey Himmel,2021-10-03 13:30:30,"there's a [conversation](https://github.com/discordjs/discord.js/pull/6672#discussion_r713621675) about it towards the top of the PR, consensus was pretty much ""reply doesn't seem quite right here, respond is close so i suppose it works""

it's mostly because it isn't sending content the command's users will see as a message (or, well, reply), so using the same naming scheme doesn't seem right. it also doesn't accept the same data as the other reply functions, so naming it something else should be less confusing for lib users

(just my 2ﾂ｢ at least)",inclusive,constructive
306,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-10-03 14:56:19,Micah Benac,2021-10-03 14:56:20,"If it's redundant, wouldn't BaseCommandInteraction also be doing something redundant since it also has it despite it already being in the base class?",neutral,constructive
307,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-10-03 15:00:45,,2021-10-03 15:00:46,Probably,neutral,not constructive
308,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-10-08 7:14:43,Hackerboi 69,2021-10-08 7:14:44,"According to the upstream pr a focused field's value can only be a string, maybe add like an `ApplicationCommandFocusedOption`?",inclusive,constructive
309,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-10-08 10:30:17,Vlad Frangu,2021-10-08 10:31:07,"Pretty sure it can be string or number, since autocomplete is available on both ､� 

EDIT: ､� I think I see what you're talking about, will have to double check that",neutral,constructive
310,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-10-08 10:48:27,Hackerboi 69,2021-10-08 10:48:28,"Number autocompletion is kinda working for me, but when I actually pick an option in the Discord client, it says that the option is not a number, even though I'm sure I responded with a number. The upstream pr says that the focused field value can only be a string, so I think that autocompletion with number options isn't meant to be working.",inclusive,constructive
311,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-10-11 16:25:57,Micah Benac,2021-10-11 16:25:58,The fact that Number autocompletion partially works might be a problem as the docs PR says that only string is valid for autocompletion(https://github.com/discord/discord-api-docs/pull/3849/files#diff-eac5037296fa30697ac678095a75beba6d78d1b337263bd2d06d85b147dc616aR78). So would it be best that I change the types to only allow string instead?,inclusive,constructive
312,discord.js,discordjs,6672,feat: add support for autocomplete interactions,"PullRequestPart(sha=""3bebf2e27ec8517c6aa325fe56d59853f70609c7"")",Micah Benac,"[Label(name=""api support""), Label(name=""interactions""), Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6672,open,"**Please describe the changes this PR makes and why it should be merged:**
- https://github.com/discord/discord-api-docs/pull/3849
 

**Status and versioning classification:**
- Code changes have been tested against the Discord API
- I know how to update typings and have done so
- This PR changes the library's interface (methods or parameters added)",180,13,7,44,2021-09-22 5:58:41,,False,,,54,2021-10-12 22:10:41,True,2021-10-11 17:08:49,Vlad Frangu,2021-10-11 17:08:49,I think the ideal thing would be to ask Discord instead... Doesn't make sense to support number autocompletes without...actually supporting them,inclusive,constructive
313,discord.js,discordjs,6737,chore(readme): remove erlpack from optional packages,"PullRequestPart(sha=""747563246f1478e612a35c83f9c1d5fece075b1e"")",Nicholas Christopher,"[Label(name=""documentation"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6737,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR removes [erlpack](https://github.com/discord/erlpack) from the optional packages section of the README. 

Erlpack is __not__ compatible with Node.js v16.6.0 (which discord.js requires) so it can't be used, and shouldn't be listed.

These changes should be reverted if/when https://github.com/discord/erlpack/pull/41 is merged.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR **only** includes non-code changes, like changes to documentation, README, etc.",0,1,1,1,2021-10-01 23:05:48,,False,,,0,2021-10-05 1:08:56,False,2021-10-05 1:08:56,Yoshida Tomio,2021-10-05 1:08:56,Aren't there other alternatives out there? Like [yukikaze-bot/erlpack](https://github.com/yukikaze-bot/erlpack).,inclusive,constructive
314,discord.js,discordjs,6782,feat(GuildMemberUpdate): emit on user updates,"PullRequestPart(sha=""2d65b0b80e983a76a85171246cfb5603519c29ec"")",Bas950,"[Label(name=""refactor""), Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6782,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR changes the guildMemberUpdate event in a (hopefully) `semver: minor` way in order to emit it on user updates like Discord intends us to. The `USER_UPDATE` event will still be emitted on both the `GUILD_MEMBER_UPDATE` and the `PRESENCE_UPDATE` gateway events, however we will not fire presenceUpdate events as presences do not exist on users like it was discussed [here](https://discord.com/channels/222078108977594368/682166281826598932/895689920667062323). There is only 1 possible issue with this which is that the events will fire when we don't have a user's flags cached and they have flags in reality. This is due to the fact that Discord does not send the `public_flags` property on startup and thus it doesn't get cached. The only alternative would be not to emit the event when the old flags are not present, however this would become an issue in scenarios where the first userUpdate received on a session is a flags update.


**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",10,7,1,1,2021-10-07 15:22:25,,False,,,5,2021-10-10 10:43:55,False,2021-10-10 10:43:54,Bas950,2021-10-10 10:43:54,@SpaceEEC Could you please give some details as to why you downvoted?,inclusive,constructive
315,discord.js,discordjs,6782,feat(GuildMemberUpdate): emit on user updates,"PullRequestPart(sha=""2d65b0b80e983a76a85171246cfb5603519c29ec"")",Bas950,"[Label(name=""refactor""), Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6782,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR changes the guildMemberUpdate event in a (hopefully) `semver: minor` way in order to emit it on user updates like Discord intends us to. The `USER_UPDATE` event will still be emitted on both the `GUILD_MEMBER_UPDATE` and the `PRESENCE_UPDATE` gateway events, however we will not fire presenceUpdate events as presences do not exist on users like it was discussed [here](https://discord.com/channels/222078108977594368/682166281826598932/895689920667062323). There is only 1 possible issue with this which is that the events will fire when we don't have a user's flags cached and they have flags in reality. This is due to the fact that Discord does not send the `public_flags` property on startup and thus it doesn't get cached. The only alternative would be not to emit the event when the old flags are not present, however this would become an issue in scenarios where the first userUpdate received on a session is a flags update.


**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",10,7,1,1,2021-10-07 15:22:25,,False,,,5,2021-10-10 10:43:55,True,2021-10-08 10:37:57,Vlad Frangu,2021-10-08 10:38:04,"Always cloning the user here seems like a bad idea... Now you won't be able to do `member.user === client.user` for example (yes I KNOW niche case), AND you'll now create clones of the user object N times (where N is the number of guilds that user is in) instead of referencing to the same 1... Why not clone the user when you process the payload instead? @discordjs/the-big-3 thoughts?",inclusive,constructive
316,discord.js,discordjs,6782,feat(GuildMemberUpdate): emit on user updates,"PullRequestPart(sha=""2d65b0b80e983a76a85171246cfb5603519c29ec"")",Bas950,"[Label(name=""refactor""), Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6782,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR changes the guildMemberUpdate event in a (hopefully) `semver: minor` way in order to emit it on user updates like Discord intends us to. The `USER_UPDATE` event will still be emitted on both the `GUILD_MEMBER_UPDATE` and the `PRESENCE_UPDATE` gateway events, however we will not fire presenceUpdate events as presences do not exist on users like it was discussed [here](https://discord.com/channels/222078108977594368/682166281826598932/895689920667062323). There is only 1 possible issue with this which is that the events will fire when we don't have a user's flags cached and they have flags in reality. This is due to the fact that Discord does not send the `public_flags` property on startup and thus it doesn't get cached. The only alternative would be not to emit the event when the old flags are not present, however this would become an issue in scenarios where the first userUpdate received on a session is a flags update.


**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",10,7,1,1,2021-10-07 15:22:25,,False,,,5,2021-10-10 10:43:55,True,2021-10-08 12:27:30,Rodry,2021-10-08 12:27:31,"The issue with doing that is that you窶囘 only be able to use the cloned user to compare it to the new user, but the user attached to the member object would be updated by the time guildMemberUpdate gets emitted (since userUpdate comes first and that mutates the user object)",inclusive,constructive
317,discord.js,discordjs,6782,feat(GuildMemberUpdate): emit on user updates,"PullRequestPart(sha=""2d65b0b80e983a76a85171246cfb5603519c29ec"")",Bas950,"[Label(name=""refactor""), Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6782,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR changes the guildMemberUpdate event in a (hopefully) `semver: minor` way in order to emit it on user updates like Discord intends us to. The `USER_UPDATE` event will still be emitted on both the `GUILD_MEMBER_UPDATE` and the `PRESENCE_UPDATE` gateway events, however we will not fire presenceUpdate events as presences do not exist on users like it was discussed [here](https://discord.com/channels/222078108977594368/682166281826598932/895689920667062323). There is only 1 possible issue with this which is that the events will fire when we don't have a user's flags cached and they have flags in reality. This is due to the fact that Discord does not send the `public_flags` property on startup and thus it doesn't get cached. The only alternative would be not to emit the event when the old flags are not present, however this would become an issue in scenarios where the first userUpdate received on a session is a flags update.


**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",10,7,1,1,2021-10-07 15:22:25,,False,,,5,2021-10-10 10:43:55,True,2021-10-08 12:35:48,Vlad Frangu,2021-10-08 12:35:48,"So change the code in guildMemberUpdate to
 ```js
const old = member._clone();
old.user = member.user._clone();
member._patch(data);
```
or something",inclusive,constructive
318,discord.js,discordjs,6782,feat(GuildMemberUpdate): emit on user updates,"PullRequestPart(sha=""2d65b0b80e983a76a85171246cfb5603519c29ec"")",Bas950,"[Label(name=""refactor""), Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6782,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR changes the guildMemberUpdate event in a (hopefully) `semver: minor` way in order to emit it on user updates like Discord intends us to. The `USER_UPDATE` event will still be emitted on both the `GUILD_MEMBER_UPDATE` and the `PRESENCE_UPDATE` gateway events, however we will not fire presenceUpdate events as presences do not exist on users like it was discussed [here](https://discord.com/channels/222078108977594368/682166281826598932/895689920667062323). There is only 1 possible issue with this which is that the events will fire when we don't have a user's flags cached and they have flags in reality. This is due to the fact that Discord does not send the `public_flags` property on startup and thus it doesn't get cached. The only alternative would be not to emit the event when the old flags are not present, however this would become an issue in scenarios where the first userUpdate received on a session is a flags update.


**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",10,7,1,1,2021-10-07 15:22:25,,False,,,5,2021-10-10 10:43:55,True,2021-10-08 12:40:12,Rodry,2021-10-08 12:40:12,"Sounded like a hacky solution but it窶冱 definitely better, we窶冤l test",inclusive,neutral
319,discord.js,discordjs,6782,feat(GuildMemberUpdate): emit on user updates,"PullRequestPart(sha=""2d65b0b80e983a76a85171246cfb5603519c29ec"")",Bas950,"[Label(name=""refactor""), Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6782,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR changes the guildMemberUpdate event in a (hopefully) `semver: minor` way in order to emit it on user updates like Discord intends us to. The `USER_UPDATE` event will still be emitted on both the `GUILD_MEMBER_UPDATE` and the `PRESENCE_UPDATE` gateway events, however we will not fire presenceUpdate events as presences do not exist on users like it was discussed [here](https://discord.com/channels/222078108977594368/682166281826598932/895689920667062323). There is only 1 possible issue with this which is that the events will fire when we don't have a user's flags cached and they have flags in reality. This is due to the fact that Discord does not send the `public_flags` property on startup and thus it doesn't get cached. The only alternative would be not to emit the event when the old flags are not present, however this would become an issue in scenarios where the first userUpdate received on a session is a flags update.


**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",10,7,1,1,2021-10-07 15:22:25,,False,,,5,2021-10-10 10:43:55,True,2021-10-08 14:13:10,Bas950,2021-10-08 14:13:18,"Yea sorry @vladfrangu that won't work. 
If we apply your suggestion, `old.user` will already be updated by the time it gets to `guildMemberUpdate` because `presenceUpdate` always seems to fire first (at least from our tests) which then emits a `userUpdate` and modifies the `user` object.

Even if a user doesn't have the `GUILD_PRESENCES` intent, your suggestion would still only work for the first guild that receives the update and not the ones that come after it (when the user is in more than 1 guild).

Hence why we now `._clone()` the `user` objects to fully detach them from eachother.

> Now you won't be able to do `member.user === client.user` for example (yes I KNOW niche case).

yes this is true, but the `.equals` function can be used instead (`member.user.equals(client.user)`).",inclusive,constructive
320,discord.js,discordjs,6788,feat: add student hub support,"PullRequestPart(sha=""2473de613c56bca2b1750f2e4d982a9d0e2a4233"")",Suneet Tipirneni,"[Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6788,open,"**Please describe the changes this PR makes and why it should be merged:**

Adds `GUILD_DIRECTORY` channel type, and the `HUB` guild feature.

- https://github.com/discord/discord-api-docs/pull/3757

**Status and versioning classification:**
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",4,0,2,1,2021-10-07 16:32:03,,False,,,0,2021-10-08 6:25:43,False,2021-10-07 16:34:52,Noel,2021-10-07 16:34:52,Is there no upstream PR for this?,inclusive,neutral
321,discord.js,discordjs,6788,feat: add student hub support,"PullRequestPart(sha=""2473de613c56bca2b1750f2e4d982a9d0e2a4233"")",Suneet Tipirneni,"[Label(name=""semver:minor""), Label(name=""discord"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6788,open,"**Please describe the changes this PR makes and why it should be merged:**

Adds `GUILD_DIRECTORY` channel type, and the `HUB` guild feature.

- https://github.com/discord/discord-api-docs/pull/3757

**Status and versioning classification:**
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)",4,0,2,1,2021-10-07 16:32:03,,False,,,0,2021-10-08 6:25:43,False,2021-10-07 16:37:24,Suneet Tipirneni,2021-10-07 16:37:24,"> Is there no upstream PR for this?

There is: https://github.com/discord/discord-api-docs/pull/3757, forgot to mark this as a draft",inclusive,neutral
322,discord.js,discordjs,6789,fix(User): `bannerURL()` should not throw when not present,"PullRequestPart(sha=""621d5308048041ede1ff298a5a85eba740832bd0"")",Suneet Tipirneni,"[Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6789,open,"**Please describe the changes this PR makes and why it should be merged:**

Makes `User#bannerURL` not throw even if the user hasn't been forced fetched, it will just return `undefined`. (breaking change)

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
",3,7,0,4,2021-10-07 19:18:20,,False,,,7,2021-10-08 10:36:07,True,2021-10-07 19:43:48,Rodry,2021-10-07 19:44:39,"Remove the error message from Messages,js",inclusive,constructive
323,discord.js,discordjs,6789,fix(User): `bannerURL()` should not throw when not present,"PullRequestPart(sha=""621d5308048041ede1ff298a5a85eba740832bd0"")",Suneet Tipirneni,"[Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6789,open,"**Please describe the changes this PR makes and why it should be merged:**

Makes `User#bannerURL` not throw even if the user hasn't been forced fetched, it will just return `undefined`. (breaking change)

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
",3,7,0,4,2021-10-07 19:18:20,,False,,,7,2021-10-08 10:36:07,True,2021-10-07 19:44:05,Rodry,2021-10-07 19:44:39,Should probably change the info tag to say something similar to what accentColor and banner say,inclusive,constructive
324,discord.js,discordjs,6789,fix(User): `bannerURL()` should not throw when not present,"PullRequestPart(sha=""621d5308048041ede1ff298a5a85eba740832bd0"")",Suneet Tipirneni,"[Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6789,open,"**Please describe the changes this PR makes and why it should be merged:**

Makes `User#bannerURL` not throw even if the user hasn't been forced fetched, it will just return `undefined`. (breaking change)

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
",3,7,0,4,2021-10-07 19:18:20,,False,,,7,2021-10-08 10:36:07,True,2021-10-07 19:57:47,Suneet Tipirneni,2021-10-07 19:57:48,"Isn't that why this line is present?

```
See {@link User#banner} for more info</info>
```",inclusive,constructive
325,discord.js,discordjs,6789,fix(User): `bannerURL()` should not throw when not present,"PullRequestPart(sha=""621d5308048041ede1ff298a5a85eba740832bd0"")",Suneet Tipirneni,"[Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6789,open,"**Please describe the changes this PR makes and why it should be merged:**

Makes `User#bannerURL` not throw even if the user hasn't been forced fetched, it will just return `undefined`. (breaking change)

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
",3,7,0,4,2021-10-07 19:18:20,,False,,,7,2021-10-08 10:36:07,True,2021-10-07 19:58:40,Rodry,2021-10-07 19:58:40,Gotta add the info tag back then,inclusive,constructive
326,discord.js,discordjs,6789,fix(User): `bannerURL()` should not throw when not present,"PullRequestPart(sha=""621d5308048041ede1ff298a5a85eba740832bd0"")",Suneet Tipirneni,"[Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6789,open,"**Please describe the changes this PR makes and why it should be merged:**

Makes `User#bannerURL` not throw even if the user hasn't been forced fetched, it will just return `undefined`. (breaking change)

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
",3,7,0,4,2021-10-07 19:18:20,,False,,,7,2021-10-08 10:36:07,True,2021-10-07 20:02:27,Suneet Tipirneni,2021-10-07 20:02:54,"I'm confused, the info tag is present, it's just on the `banner` prop which this `bannerURL` tells you to reference.
https://github.com/discordjs/discord.js/blob/78124aed28727693ae86acb4af90433f8951570f/src/structures/User.js#L77",inclusive,neutral
327,discord.js,discordjs,6789,fix(User): `bannerURL()` should not throw when not present,"PullRequestPart(sha=""621d5308048041ede1ff298a5a85eba740832bd0"")",Suneet Tipirneni,"[Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6789,open,"**Please describe the changes this PR makes and why it should be merged:**

Makes `User#bannerURL` not throw even if the user hasn't been forced fetched, it will just return `undefined`. (breaking change)

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
",3,7,0,4,2021-10-07 19:18:20,,False,,,7,2021-10-08 10:36:07,True,2021-10-07 20:03:26,Rodry,2021-10-07 20:03:26,"Well then remove this, gotta pick either one of them 
![image](https://user-images.githubusercontent.com/38259440/136454239-112c5a97-bddf-41c3-885d-bd4bb93686a8.png)",inclusive,constructive
328,discord.js,discordjs,6789,fix(User): `bannerURL()` should not throw when not present,"PullRequestPart(sha=""621d5308048041ede1ff298a5a85eba740832bd0"")",Suneet Tipirneni,"[Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6789,open,"**Please describe the changes this PR makes and why it should be merged:**

Makes `User#bannerURL` not throw even if the user hasn't been forced fetched, it will just return `undefined`. (breaking change)

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
",3,7,0,4,2021-10-07 19:18:20,,False,,,7,2021-10-08 10:36:07,True,2021-10-07 20:07:20,Rodry,2021-10-07 20:08:47,This can be moved to the line above,inclusive,constructive
329,discord.js,discordjs,6797,fix(CommandInteractionOption): don't set undefined props,"PullRequestPart(sha=""773881b54f9d582c49a2ccf9e82953e6983a22a1"")",Rodry,[],https://api.github.com/repos/discordjs/discord.js/pulls/6797,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR fixes certain props in ApplicationCommand#options being set to undefined where they weren't documented/typed as such. This means that no property should now be set to undefined and will only be present if the user has passed it when creating the command.
Also changed the typings for the ApplicationCommand#transformOption method to include overloads and API types.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",30,13,12,2,2021-10-08 17:09:23,,False,,,0,2021-10-09 13:10:43,False,2021-10-09 8:00:21,Antonio Romﾃ｡n,2021-10-09 8:00:21,"What's the issue with having `undefined`s? It's intentional that we do this because mutating an object's properties affects the over-all performance (due to object shapes shifting) of the method and everything that interacts with its properties, and keys which value is `undefined` aren't JSON-serialized.

Also, this kinda duplicates #5620.

> This PR fixes certain props in ApplicationCommand#options being set to undefined where they weren't documented/typed as such.

To fix this, simply change the types to match.",inclusive,constructive
330,discord.js,discordjs,6797,fix(CommandInteractionOption): don't set undefined props,"PullRequestPart(sha=""773881b54f9d582c49a2ccf9e82953e6983a22a1"")",Rodry,[],https://api.github.com/repos/discordjs/discord.js/pulls/6797,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR fixes certain props in ApplicationCommand#options being set to undefined where they weren't documented/typed as such. This means that no property should now be set to undefined and will only be present if the user has passed it when creating the command.
Also changed the typings for the ApplicationCommand#transformOption method to include overloads and API types.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",30,13,12,2,2021-10-08 17:09:23,,False,,,0,2021-10-09 13:10:43,False,2021-10-09 8:11:33,Rodry,2021-10-09 8:12:03,"There are 2 issues with these properties being undefined:

1. You can have properties set on option types that don't support them (e.g. channelTypes or required in subcommands) and by doing so, you're defining a property that can't and will never be set under any circumstance, which can also be seen as a bug by many people.
2. We never say that passing an explicit undefined is allowed, and neither do Discord's API docs. While yes we could change this, it doesn't make sense to do so in my eyes and this is not something that is usually done across the library. When things are marked as nullable (which none of these properties are) they usually accept null in order to reset said property, which is not the case here.

As for the issue regarding object mutation, I don't think we need to worry about that in this case, since you always need to fetch ApplicationCommand's in order to obtain their data and this is rarely done, meaning that a command's options will not be changing that often and, if they do, it won't be that big of a performance hit because it's not something ran as often as a channel patch method for example.
I was also not aware of the linked PR but it seems like the solution proposed there is even more resource-intensive as it first sets the properties and then deletes the ones that are undefined.

I also discussed this with @vladfrangu before creating the PR and he said this was an oversight and should be fixed (read the conversation [https://canary.discord.com/channels/222078108977594368/682166281826598932/896030558151397407](here)). My only doubt was whether we should set properties that can be present to a default value or not, but he seemed to be against this.",inclusive,neutral
331,discord.js,discordjs,6797,fix(CommandInteractionOption): don't set undefined props,"PullRequestPart(sha=""773881b54f9d582c49a2ccf9e82953e6983a22a1"")",Rodry,[],https://api.github.com/repos/discordjs/discord.js/pulls/6797,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR fixes certain props in ApplicationCommand#options being set to undefined where they weren't documented/typed as such. This means that no property should now be set to undefined and will only be present if the user has passed it when creating the command.
Also changed the typings for the ApplicationCommand#transformOption method to include overloads and API types.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",30,13,12,2,2021-10-08 17:09:23,,False,,,0,2021-10-09 13:10:43,False,2021-10-09 11:59:04,Noel,2021-10-09 11:59:04,"> We never say that passing an explicit undefined is allowed, and neither do Discord's API docs. While yes we could change this, it doesn't make sense to do so in my eyes and this is not something that is usually done across the library. When things are marked as nullable (which none of these properties are) they usually accept null in order to reset said property, which is not the case here.

That makes no sense btw, undefined values when stringified simply ""disappear"", they don't have a value, they are not ""undefined"" they do not exist.",inclusive,constructive
332,discord.js,discordjs,6797,fix(CommandInteractionOption): don't set undefined props,"PullRequestPart(sha=""773881b54f9d582c49a2ccf9e82953e6983a22a1"")",Rodry,[],https://api.github.com/repos/discordjs/discord.js/pulls/6797,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR fixes certain props in ApplicationCommand#options being set to undefined where they weren't documented/typed as such. This means that no property should now be set to undefined and will only be present if the user has passed it when creating the command.
Also changed the typings for the ApplicationCommand#transformOption method to include overloads and API types.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",30,13,12,2,2021-10-08 17:09:23,,False,,,0,2021-10-09 13:10:43,False,2021-10-09 12:00:42,Rodry,2021-10-09 12:00:42,"> That makes no sense btw, undefined values when stringified simply ""disappear"", they don't have a value, they are not ""undefined"" they do not exist.

That still doesn't change the fact that this behavior isn't documented anywhere and isn't expected to some extent",inclusive,constructive
333,discord.js,discordjs,6797,fix(CommandInteractionOption): don't set undefined props,"PullRequestPart(sha=""773881b54f9d582c49a2ccf9e82953e6983a22a1"")",Rodry,[],https://api.github.com/repos/discordjs/discord.js/pulls/6797,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR fixes certain props in ApplicationCommand#options being set to undefined where they weren't documented/typed as such. This means that no property should now be set to undefined and will only be present if the user has passed it when creating the command.
Also changed the typings for the ApplicationCommand#transformOption method to include overloads and API types.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",30,13,12,2,2021-10-08 17:09:23,,False,,,0,2021-10-09 13:10:43,False,2021-10-09 12:01:57,Noel,2021-10-09 12:01:57,"This ""behaviour"" doesn't need to be documented. You do not send the key over the wire.
What are they supposed to say?

""If you do not send the payload, nothing happens""?",inclusive,constructive
334,discord.js,discordjs,6797,fix(CommandInteractionOption): don't set undefined props,"PullRequestPart(sha=""773881b54f9d582c49a2ccf9e82953e6983a22a1"")",Rodry,[],https://api.github.com/repos/discordjs/discord.js/pulls/6797,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR fixes certain props in ApplicationCommand#options being set to undefined where they weren't documented/typed as such. This means that no property should now be set to undefined and will only be present if the user has passed it when creating the command.
Also changed the typings for the ApplicationCommand#transformOption method to include overloads and API types.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",30,13,12,2,2021-10-08 17:09:23,,False,,,0,2021-10-09 13:10:43,False,2021-10-09 12:19:19,Rodry,2021-10-09 12:19:19,"> This ""behaviour"" doesn't need to be documented. You do not send the key over the wire. What are they supposed to say?
> 
> ""If you do not send the payload, nothing happens""?

The point of this change isn窶冲 really what happens with the data sent to the API, more like what happens when you access ApplicationCommand#options. The behavior that was not documented is those options being undefined, which is what I窶冦 fixing here",inclusive,constructive
335,discord.js,discordjs,6797,fix(CommandInteractionOption): don't set undefined props,"PullRequestPart(sha=""773881b54f9d582c49a2ccf9e82953e6983a22a1"")",Rodry,[],https://api.github.com/repos/discordjs/discord.js/pulls/6797,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR fixes certain props in ApplicationCommand#options being set to undefined where they weren't documented/typed as such. This means that no property should now be set to undefined and will only be present if the user has passed it when creating the command.
Also changed the typings for the ApplicationCommand#transformOption method to include overloads and API types.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",30,13,12,2,2021-10-08 17:09:23,,False,,,0,2021-10-09 13:10:43,False,2021-10-09 12:22:46,Noel,2021-10-09 12:22:46,Or you just document them as being undefined and reduce all the overhead it procudes.,inclusive,constructive
336,discord.js,discordjs,6797,fix(CommandInteractionOption): don't set undefined props,"PullRequestPart(sha=""773881b54f9d582c49a2ccf9e82953e6983a22a1"")",Rodry,[],https://api.github.com/repos/discordjs/discord.js/pulls/6797,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR fixes certain props in ApplicationCommand#options being set to undefined where they weren't documented/typed as such. This means that no property should now be set to undefined and will only be present if the user has passed it when creating the command.
Also changed the typings for the ApplicationCommand#transformOption method to include overloads and API types.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",30,13,12,2,2021-10-08 17:09:23,,False,,,0,2021-10-09 13:10:43,False,2021-10-09 12:30:05,Rodry,2021-10-09 12:30:05,"> Or you just document them as being undefined and reduce all the overhead it procudes.

I can document them as undefined but I do not agree with properties that cannot be set being undefined, so something still needs to be changed about that. The only reason I removed **all** undefined props was because of what vlad said on Discord",inclusive,constructive
337,discord.js,discordjs,6797,fix(CommandInteractionOption): don't set undefined props,"PullRequestPart(sha=""773881b54f9d582c49a2ccf9e82953e6983a22a1"")",Rodry,[],https://api.github.com/repos/discordjs/discord.js/pulls/6797,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR fixes certain props in ApplicationCommand#options being set to undefined where they weren't documented/typed as such. This means that no property should now be set to undefined and will only be present if the user has passed it when creating the command.
Also changed the typings for the ApplicationCommand#transformOption method to include overloads and API types.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",30,13,12,2,2021-10-08 17:09:23,,False,,,0,2021-10-09 13:10:43,False,2021-10-09 12:41:35,Vlad Frangu,2021-10-09 12:41:35,"Honestly, now that I see it in action, the overhead it adds outweighs the benefits of just not setting the properties to undefined, so.. I'm with the other two now �",inclusive,constructive
338,discord.js,discordjs,6797,fix(CommandInteractionOption): don't set undefined props,"PullRequestPart(sha=""773881b54f9d582c49a2ccf9e82953e6983a22a1"")",Rodry,[],https://api.github.com/repos/discordjs/discord.js/pulls/6797,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR fixes certain props in ApplicationCommand#options being set to undefined where they weren't documented/typed as such. This means that no property should now be set to undefined and will only be present if the user has passed it when creating the command.
Also changed the typings for the ApplicationCommand#transformOption method to include overloads and API types.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",30,13,12,2,2021-10-08 17:09:23,,False,,,0,2021-10-09 13:10:43,False,2021-10-09 12:53:41,Rodry,2021-10-09 12:53:41,"> Honestly, now that I see it in action, the overhead it adds outweighs the benefits of just not setting the properties to undefined, so.. I'm with the other two now �

What overhead? My initial idea was to keep allowed props in there and just remove the ones that didn't make sense and honestly I'd rather go with that, but I don't think it makes sense for a STRING option to have channelTypes set to undefined",inclusive,constructive
339,discord.js,discordjs,6797,fix(CommandInteractionOption): don't set undefined props,"PullRequestPart(sha=""773881b54f9d582c49a2ccf9e82953e6983a22a1"")",Rodry,[],https://api.github.com/repos/discordjs/discord.js/pulls/6797,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR fixes certain props in ApplicationCommand#options being set to undefined where they weren't documented/typed as such. This means that no property should now be set to undefined and will only be present if the user has passed it when creating the command.
Also changed the typings for the ApplicationCommand#transformOption method to include overloads and API types.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",30,13,12,2,2021-10-08 17:09:23,,False,,,0,2021-10-09 13:10:43,False,2021-10-09 12:55:37,Vlad Frangu,2021-10-09 12:55:37,"All your if checks? That's overhead. Setting them to undefined really doesn't matter since, as I've actually told you before on Discord, once you JSON.stringify they are gone",inclusive,constructive
340,discord.js,discordjs,6797,fix(CommandInteractionOption): don't set undefined props,"PullRequestPart(sha=""773881b54f9d582c49a2ccf9e82953e6983a22a1"")",Rodry,[],https://api.github.com/repos/discordjs/discord.js/pulls/6797,open,"**Please describe the changes this PR makes and why it should be merged:**
This PR fixes certain props in ApplicationCommand#options being set to undefined where they weren't documented/typed as such. This means that no property should now be set to undefined and will only be present if the user has passed it when creating the command.
Also changed the typings for the ApplicationCommand#transformOption method to include overloads and API types.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",30,13,12,2,2021-10-08 17:09:23,,False,,,0,2021-10-09 13:10:43,False,2021-10-09 13:10:43,Rodry,2021-10-09 13:10:43,"> All your if checks? That's overhead. Setting them to undefined really doesn't matter since, as I've actually told you before on Discord, once you JSON.stringify they are gone

If your concern is performance that shouldn't really be an issue since this function isn't called that often (only when commands are fetched). I'm also not talking about using JSON.stringify here, I'm talking about what the actual object holds. Having these set to undefined also doesn't allow us to do `if ('channelTypes' in option)` for example, which we should be able to do.",inclusive,constructive
341,discord.js,discordjs,6804,fix(WebhookClient): Updated webhook url regex,"PullRequestPart(sha=""f5aea4a28fec64b320f7f00729c7e6d6d60fd55d"")",,"[Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6804,open,"**Please describe the changes this PR makes and why it should be merged:**
Made the webhook url regex more inclusive for webhooks that include the api version.


**Status and versioning classification:**

- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
",1,1,1,4,2021-10-09 23:30:14,,False,,,7,2021-10-11 19:58:41,False,2021-10-09 23:50:11,,2021-10-09 23:53:37,"> I don't particularly agree with allowing the old domain. Users should be updating their webhook URLs and should expect things to go wrong when they haven't actioned against Discord's announcement of changing their domain name. This seems lazy to me.

Fair enough, i just wanted to be more tolerant of the urls given by the users",inclusive,constructive
342,discord.js,discordjs,6804,fix(WebhookClient): Updated webhook url regex,"PullRequestPart(sha=""f5aea4a28fec64b320f7f00729c7e6d6d60fd55d"")",,"[Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6804,open,"**Please describe the changes this PR makes and why it should be merged:**
Made the webhook url regex more inclusive for webhooks that include the api version.


**Status and versioning classification:**

- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
",1,1,1,4,2021-10-09 23:30:14,,False,,,7,2021-10-11 19:58:41,True,2021-10-09 23:33:16,,2021-10-09 23:36:48,The `v[6-9]{1}` is too strict and this code will warrant an update when version 10 releases. I suggest just allowing any 1-2 digit number.,inclusive,constructive
343,discord.js,discordjs,6804,fix(WebhookClient): Updated webhook url regex,"PullRequestPart(sha=""f5aea4a28fec64b320f7f00729c7e6d6d60fd55d"")",,"[Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6804,open,"**Please describe the changes this PR makes and why it should be merged:**
Made the webhook url regex more inclusive for webhooks that include the api version.


**Status and versioning classification:**

- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
",1,1,1,4,2021-10-09 23:30:14,,False,,,7,2021-10-11 19:58:41,True,2021-10-09 23:50:36,,2021-10-09 23:50:36,Will adjust this accordingly.,inclusive,constructive
344,discord.js,discordjs,6804,fix(WebhookClient): Updated webhook url regex,"PullRequestPart(sha=""f5aea4a28fec64b320f7f00729c7e6d6d60fd55d"")",,"[Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6804,open,"**Please describe the changes this PR makes and why it should be merged:**
Made the webhook url regex more inclusive for webhooks that include the api version.


**Status and versioning classification:**

- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
",1,1,1,4,2021-10-09 23:30:14,,False,,,7,2021-10-11 19:58:41,True,2021-10-11 8:13:55,Vlad Frangu,2021-10-11 8:13:57,"Pretty sure for most ID regexes we do 17,20 for the \d? Can you check other regexes in the lib and fix accordingly?",inclusive,constructive
345,discord.js,discordjs,6804,fix(WebhookClient): Updated webhook url regex,"PullRequestPart(sha=""f5aea4a28fec64b320f7f00729c7e6d6d60fd55d"")",,"[Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6804,open,"**Please describe the changes this PR makes and why it should be merged:**
Made the webhook url regex more inclusive for webhooks that include the api version.


**Status and versioning classification:**

- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
",1,1,1,4,2021-10-09 23:30:14,,False,,,7,2021-10-11 19:58:41,True,2021-10-11 18:20:40,,2021-10-11 18:21:12,"> Pretty sure for most ID regexes we do 17,20 for the \d? Can you check other regexes in the lib and fix accordingly?

As mentioned by @Jiralite the string comes in the form of ``v6``, ``v7``, ``v8`` and ``v9`` at the moment but could change to ``v10`` whenever discord updates their api version, so I personaly don't think 17,20 will be needed for the ``\d`` character class, as the api version will never reach a 17 digit number in a long time ��",inclusive,constructive
346,discord.js,discordjs,6804,fix(WebhookClient): Updated webhook url regex,"PullRequestPart(sha=""f5aea4a28fec64b320f7f00729c7e6d6d60fd55d"")",,"[Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6804,open,"**Please describe the changes this PR makes and why it should be merged:**
Made the webhook url regex more inclusive for webhooks that include the api version.


**Status and versioning classification:**

- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
",1,1,1,4,2021-10-09 23:30:14,,False,,,7,2021-10-11 19:58:41,True,2021-10-11 18:34:52,,2021-10-11 18:34:52,"I believe the webhook id is what's being referred to here, which is only matched to be 18 characters long. It probably should match 17-19 characters long.",inclusive,constructive
347,discord.js,discordjs,6804,fix(WebhookClient): Updated webhook url regex,"PullRequestPart(sha=""f5aea4a28fec64b320f7f00729c7e6d6d60fd55d"")",,"[Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6804,open,"**Please describe the changes this PR makes and why it should be merged:**
Made the webhook url regex more inclusive for webhooks that include the api version.


**Status and versioning classification:**

- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
",1,1,1,4,2021-10-09 23:30:14,,False,,,7,2021-10-11 19:58:41,True,2021-10-11 19:24:24,,2021-10-11 19:24:25,"> I believe the webhook id is what's being referred to here, which is only matched to be 18 characters long. It probably should match 17-19 characters long.

Oops, my bad I was probably looking at the wrong character class to the one he was mentioning",inclusive,neutral
348,discord.js,discordjs,6804,fix(WebhookClient): Updated webhook url regex,"PullRequestPart(sha=""f5aea4a28fec64b320f7f00729c7e6d6d60fd55d"")",,"[Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6804,open,"**Please describe the changes this PR makes and why it should be merged:**
Made the webhook url regex more inclusive for webhooks that include the api version.


**Status and versioning classification:**

- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- Code changes have been tested against the Discord API, or there are no code changes
",1,1,1,4,2021-10-09 23:30:14,,False,,,7,2021-10-11 19:58:41,True,2021-10-11 19:41:47,,2021-10-11 19:41:47,"Updated, should be resolved!",inclusive,constructive
349,discord.js,discordjs,6818,fix(MessageReaction): Prevent event double fire from uncached messages,"PullRequestPart(sha=""a9f0ccb67afc3a232cdb37b1d5799c10b6046b74"")",,"[Label(name=""bug""), Label(name=""semver:patch"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6818,open,"**Please describe the changes this PR makes and why it should be merged:**
This should resolve #5063.

The problem was that the manual call to the handler was running side-by-side with the payload received from Discord, resulting in the event firing twice (and the cache check being redundant). In this case, I added a new parameter called `fromStructure` to the handler (which is called only from the structure) and removed the existing cache check! This should return the object instead of firing the event when called from the structure and will allow the object to be received without firing the event, which in turn will let the event be fired only from a payload received from Discord.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",14,11,0,9,2021-10-11 23:35:11,,False,,,7,2021-10-14 18:45:45,True,2021-10-12 17:10:15,,2021-10-12 17:28:48,"This change causes `Message#react` called with an `Emoji` to throw (since `Util.parseEmoji` expects a string):
```js
TypeError: text.includes is not a function
```",inclusive,constructive
350,discord.js,discordjs,6818,fix(MessageReaction): Prevent event double fire from uncached messages,"PullRequestPart(sha=""a9f0ccb67afc3a232cdb37b1d5799c10b6046b74"")",,"[Label(name=""bug""), Label(name=""semver:patch"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6818,open,"**Please describe the changes this PR makes and why it should be merged:**
This should resolve #5063.

The problem was that the manual call to the handler was running side-by-side with the payload received from Discord, resulting in the event firing twice (and the cache check being redundant). In this case, I added a new parameter called `fromStructure` to the handler (which is called only from the structure) and removed the existing cache check! This should return the object instead of firing the event when called from the structure and will allow the object to be received without firing the event, which in turn will let the event be fired only from a payload received from Discord.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",14,11,0,9,2021-10-11 23:35:11,,False,,,7,2021-10-14 18:45:45,True,2021-10-12 18:02:15,,2021-10-12 18:02:15,I've changed it down below to `this.client.emojis.resolveIdentifier(emoji)` (no longer uses the utility method).,inclusive,constructive
351,discord.js,discordjs,6818,fix(MessageReaction): Prevent event double fire from uncached messages,"PullRequestPart(sha=""a9f0ccb67afc3a232cdb37b1d5799c10b6046b74"")",,"[Label(name=""bug""), Label(name=""semver:patch"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6818,open,"**Please describe the changes this PR makes and why it should be merged:**
This should resolve #5063.

The problem was that the manual call to the handler was running side-by-side with the payload received from Discord, resulting in the event firing twice (and the cache check being redundant). In this case, I added a new parameter called `fromStructure` to the handler (which is called only from the structure) and removed the existing cache check! This should return the object instead of firing the event when called from the structure and will allow the object to be received without firing the event, which in turn will let the event be fired only from a payload received from Discord.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",14,11,0,9,2021-10-11 23:35:11,,False,,,7,2021-10-14 18:45:45,True,2021-10-12 18:10:40,,2021-10-12 18:11:01,"Now `emoji` is a string, but it should be an object compatible with this:
https://github.com/discordjs/discord.js/blob/b47467755cb5d1dd779d79ad86eb678bb13541e9/src/structures/Emoji.js#L6-L12

(Since it's passed along to the Emoji constructor)",inclusive,constructive
352,discord.js,discordjs,6818,fix(MessageReaction): Prevent event double fire from uncached messages,"PullRequestPart(sha=""a9f0ccb67afc3a232cdb37b1d5799c10b6046b74"")",,"[Label(name=""bug""), Label(name=""semver:patch"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6818,open,"**Please describe the changes this PR makes and why it should be merged:**
This should resolve #5063.

The problem was that the manual call to the handler was running side-by-side with the payload received from Discord, resulting in the event firing twice (and the cache check being redundant). In this case, I added a new parameter called `fromStructure` to the handler (which is called only from the structure) and removed the existing cache check! This should return the object instead of firing the event when called from the structure and will allow the object to be received without firing the event, which in turn will let the event be fired only from a payload received from Discord.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",14,11,0,9,2021-10-11 23:35:11,,False,,,7,2021-10-14 18:45:45,True,2021-10-12 18:27:20,,2021-10-12 18:27:20,I guess we're back to the utility methods! `Util.resolvePartialEmoji()` should be fine here.,inclusive,constructive
353,discord.js,discordjs,6818,fix(MessageReaction): Prevent event double fire from uncached messages,"PullRequestPart(sha=""a9f0ccb67afc3a232cdb37b1d5799c10b6046b74"")",,"[Label(name=""bug""), Label(name=""semver:patch"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6818,open,"**Please describe the changes this PR makes and why it should be merged:**
This should resolve #5063.

The problem was that the manual call to the handler was running side-by-side with the payload received from Discord, resulting in the event firing twice (and the cache check being redundant). In this case, I added a new parameter called `fromStructure` to the handler (which is called only from the structure) and removed the existing cache check! This should return the object instead of firing the event when called from the structure and will allow the object to be received without firing the event, which in turn will let the event be fired only from a payload received from Discord.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",14,11,0,9,2021-10-11 23:35:11,,False,,,7,2021-10-14 18:45:45,True,2021-10-12 20:00:17,,2021-10-12 20:00:18,"Yep, that should work.",neutral,neutral
354,discord.js,discordjs,6818,fix(MessageReaction): Prevent event double fire from uncached messages,"PullRequestPart(sha=""a9f0ccb67afc3a232cdb37b1d5799c10b6046b74"")",,"[Label(name=""bug""), Label(name=""semver:patch"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6818,open,"**Please describe the changes this PR makes and why it should be merged:**
This should resolve #5063.

The problem was that the manual call to the handler was running side-by-side with the payload received from Discord, resulting in the event firing twice (and the cache check being redundant). In this case, I added a new parameter called `fromStructure` to the handler (which is called only from the structure) and removed the existing cache check! This should return the object instead of firing the event when called from the structure and will allow the object to be received without firing the event, which in turn will let the event be fired only from a payload received from Discord.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",14,11,0,9,2021-10-11 23:35:11,,False,,,7,2021-10-14 18:45:45,True,2021-10-13 10:45:52,Vlad Frangu,2021-10-13 10:47:35,This..will throw if the action ever returns `false` 操,inclusive,constructive
355,discord.js,discordjs,6818,fix(MessageReaction): Prevent event double fire from uncached messages,"PullRequestPart(sha=""a9f0ccb67afc3a232cdb37b1d5799c10b6046b74"")",,"[Label(name=""bug""), Label(name=""semver:patch"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6818,open,"**Please describe the changes this PR makes and why it should be merged:**
This should resolve #5063.

The problem was that the manual call to the handler was running side-by-side with the payload received from Discord, resulting in the event firing twice (and the cache check being redundant). In this case, I added a new parameter called `fromStructure` to the handler (which is called only from the structure) and removed the existing cache check! This should return the object instead of firing the event when called from the structure and will allow the object to be received without firing the event, which in turn will let the event be fired only from a payload received from Discord.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",14,11,0,9,2021-10-11 23:35:11,,False,,,7,2021-10-14 18:45:45,True,2021-10-13 11:15:43,,2021-10-13 11:15:43,"True, although it's actually been like this for several years. I can't really think of when this would return `false` to be honest?

All these checks should be fine because we sent them across ourselves:

https://github.com/discordjs/discord.js/blob/a9f0ccb67afc3a232cdb37b1d5799c10b6046b74/src/client/actions/MessageReactionAdd.js#L19-L30

This check is kind of redundant in the scope of acting upon a partial message. If we're subscribing to partial messages, `.getMessage()` would return a partial message. If we're not, we don't receive one.

https://github.com/discordjs/discord.js/blob/a9f0ccb67afc3a232cdb37b1d5799c10b6046b74/src/client/actions/MessageReactionAdd.js#L34

Can `reaction` here even return `false`? We either return the existing object, the clone of it or the new entry into the manager (no really, why is this here?):

https://github.com/discordjs/discord.js/blob/a9f0ccb67afc3a232cdb37b1d5799c10b6046b74/src/client/actions/MessageReactionAdd.js#L35-L40

Ultimately, all should be fine and this should never be `false`, I believe.",inclusive,neutral
356,discord.js,discordjs,6825,feat(Client): add global sweepers,"PullRequestPart(sha=""20e357e15c72ce499fcc6e2334c08322d9d3c562"")",ckohen,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6825,open,"**Please describe the changes this PR makes and why it should be merged:**

| <h3>笞£�ｸ� This is as of yet untested. Due to the scale of this change, it is best tested by many different people since it would be highly unlikely for a single person to be able to test even a good set of the use cases.</h3>|
| - |

- This aims to tackle point 2 in  #6539: Global Sweepers. This does not completely satisfy what was outlined there however, it still relies on `LimitedCollection` to provide max size functionality. After doing the work to get to this point, that seemed out of scope, and can easily be tackled in another PR. This does mean that you are still storing extra properties on LimitedCollection for now, however hopefully not tracking a timeout.

In order to keep this semver: minor, default options have unfortunately <strong>not</strong> been switched to use the sweepers in this PR.

**Status and versioning classification:**

- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",610,50,0,4,2021-10-13 9:22:01,,False,,,10,2021-10-14 18:49:23,True,2021-10-13 10:52:28,Vlad Frangu,2021-10-13 10:54:47,"I don't think you intended to call the filter, did you?",neutral,neutral
357,discord.js,discordjs,6825,feat(Client): add global sweepers,"PullRequestPart(sha=""20e357e15c72ce499fcc6e2334c08322d9d3c562"")",ckohen,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6825,open,"**Please describe the changes this PR makes and why it should be merged:**

| <h3>笞£�ｸ� This is as of yet untested. Due to the scale of this change, it is best tested by many different people since it would be highly unlikely for a single person to be able to test even a good set of the use cases.</h3>|
| - |

- This aims to tackle point 2 in  #6539: Global Sweepers. This does not completely satisfy what was outlined there however, it still relies on `LimitedCollection` to provide max size functionality. After doing the work to get to this point, that seemed out of scope, and can easily be tackled in another PR. This does mean that you are still storing extra properties on LimitedCollection for now, however hopefully not tracking a timeout.

In order to keep this semver: minor, default options have unfortunately <strong>not</strong> been switched to use the sweepers in this PR.

**Status and versioning classification:**

- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",610,50,0,4,2021-10-13 9:22:01,,False,,,10,2021-10-14 18:49:23,True,2021-10-13 10:53:12,Vlad Frangu,2021-10-13 10:54:47,"World's smallest nit, just cache the `guild[key]` as a variable",neutral,constructive
358,discord.js,discordjs,6825,feat(Client): add global sweepers,"PullRequestPart(sha=""20e357e15c72ce499fcc6e2334c08322d9d3c562"")",ckohen,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6825,open,"**Please describe the changes this PR makes and why it should be merged:**

| <h3>笞£�ｸ� This is as of yet untested. Due to the scale of this change, it is best tested by many different people since it would be highly unlikely for a single person to be able to test even a good set of the use cases.</h3>|
| - |

- This aims to tackle point 2 in  #6539: Global Sweepers. This does not completely satisfy what was outlined there however, it still relies on `LimitedCollection` to provide max size functionality. After doing the work to get to this point, that seemed out of scope, and can easily be tackled in another PR. This does mean that you are still storing extra properties on LimitedCollection for now, however hopefully not tracking a timeout.

In order to keep this semver: minor, default options have unfortunately <strong>not</strong> been switched to use the sweepers in this PR.

**Status and versioning classification:**

- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",610,50,0,4,2021-10-13 9:22:01,,False,,,10,2021-10-14 18:49:23,True,2021-10-13 10:54:36,Vlad Frangu,2021-10-13 10:54:47,?,not inclusive,not constructive
359,discord.js,discordjs,6825,feat(Client): add global sweepers,"PullRequestPart(sha=""20e357e15c72ce499fcc6e2334c08322d9d3c562"")",ckohen,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6825,open,"**Please describe the changes this PR makes and why it should be merged:**

| <h3>笞£�ｸ� This is as of yet untested. Due to the scale of this change, it is best tested by many different people since it would be highly unlikely for a single person to be able to test even a good set of the use cases.</h3>|
| - |

- This aims to tackle point 2 in  #6539: Global Sweepers. This does not completely satisfy what was outlined there however, it still relies on `LimitedCollection` to provide max size functionality. After doing the work to get to this point, that seemed out of scope, and can easily be tackled in another PR. This does mean that you are still storing extra properties on LimitedCollection for now, however hopefully not tracking a timeout.

In order to keep this semver: minor, default options have unfortunately <strong>not</strong> been switched to use the sweepers in this PR.

**Status and versioning classification:**

- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",610,50,0,4,2021-10-13 9:22:01,,False,,,10,2021-10-14 18:49:23,True,2021-10-13 19:40:02,ckohen,2021-10-13 19:40:02,"ah, good old auto imports",inclusive,neutral
360,discord.js,discordjs,6825,feat(Client): add global sweepers,"PullRequestPart(sha=""20e357e15c72ce499fcc6e2334c08322d9d3c562"")",ckohen,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6825,open,"**Please describe the changes this PR makes and why it should be merged:**

| <h3>笞£�ｸ� This is as of yet untested. Due to the scale of this change, it is best tested by many different people since it would be highly unlikely for a single person to be able to test even a good set of the use cases.</h3>|
| - |

- This aims to tackle point 2 in  #6539: Global Sweepers. This does not completely satisfy what was outlined there however, it still relies on `LimitedCollection` to provide max size functionality. After doing the work to get to this point, that seemed out of scope, and can easily be tackled in another PR. This does mean that you are still storing extra properties on LimitedCollection for now, however hopefully not tracking a timeout.

In order to keep this semver: minor, default options have unfortunately <strong>not</strong> been switched to use the sweepers in this PR.

**Status and versioning classification:**

- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",610,50,0,4,2021-10-13 9:22:01,,False,,,10,2021-10-14 18:49:23,True,2021-10-13 20:16:48,Rodry,2021-10-13 20:16:48,"This theoretically means that null is a valid option when it shouldn't be
```suggestion
    if (typeof options.sweepers !== 'object' && options.sweepers) {
```",inclusive,constructive
361,discord.js,discordjs,6825,feat(Client): add global sweepers,"PullRequestPart(sha=""20e357e15c72ce499fcc6e2334c08322d9d3c562"")",ckohen,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6825,open,"**Please describe the changes this PR makes and why it should be merged:**

| <h3>笞£�ｸ� This is as of yet untested. Due to the scale of this change, it is best tested by many different people since it would be highly unlikely for a single person to be able to test even a good set of the use cases.</h3>|
| - |

- This aims to tackle point 2 in  #6539: Global Sweepers. This does not completely satisfy what was outlined there however, it still relies on `LimitedCollection` to provide max size functionality. After doing the work to get to this point, that seemed out of scope, and can easily be tackled in another PR. This does mean that you are still storing extra properties on LimitedCollection for now, however hopefully not tracking a timeout.

In order to keep this semver: minor, default options have unfortunately <strong>not</strong> been switched to use the sweepers in this PR.

**Status and versioning classification:**

- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",610,50,0,4,2021-10-13 9:22:01,,False,,,10,2021-10-14 18:49:23,True,2021-10-13 21:43:58,Almeida,2021-10-13 21:44:08,"```suggestion
      const { cache } = guild[key];
```",inclusive,constructive
362,discord.js,discordjs,6825,feat(Client): add global sweepers,"PullRequestPart(sha=""20e357e15c72ce499fcc6e2334c08322d9d3c562"")",ckohen,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6825,open,"**Please describe the changes this PR makes and why it should be merged:**

| <h3>笞£�ｸ� This is as of yet untested. Due to the scale of this change, it is best tested by many different people since it would be highly unlikely for a single person to be able to test even a good set of the use cases.</h3>|
| - |

- This aims to tackle point 2 in  #6539: Global Sweepers. This does not completely satisfy what was outlined there however, it still relies on `LimitedCollection` to provide max size functionality. After doing the work to get to this point, that seemed out of scope, and can easily be tackled in another PR. This does mean that you are still storing extra properties on LimitedCollection for now, however hopefully not tracking a timeout.

In order to keep this semver: minor, default options have unfortunately <strong>not</strong> been switched to use the sweepers in this PR.

**Status and versioning classification:**

- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",610,50,0,4,2021-10-13 9:22:01,,False,,,10,2021-10-14 18:49:23,True,2021-10-13 21:49:34,Almeida,2021-10-13 21:52:53,"Pretty sure this doesn't render correctly. Might be wrong though

```suggestion
 * @typedef {Object} SweeperOptions
```
",inclusive,neutral
363,discord.js,discordjs,6825,feat(Client): add global sweepers,"PullRequestPart(sha=""20e357e15c72ce499fcc6e2334c08322d9d3c562"")",ckohen,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6825,open,"**Please describe the changes this PR makes and why it should be merged:**

| <h3>笞£�ｸ� This is as of yet untested. Due to the scale of this change, it is best tested by many different people since it would be highly unlikely for a single person to be able to test even a good set of the use cases.</h3>|
| - |

- This aims to tackle point 2 in  #6539: Global Sweepers. This does not completely satisfy what was outlined there however, it still relies on `LimitedCollection` to provide max size functionality. After doing the work to get to this point, that seemed out of scope, and can easily be tackled in another PR. This does mean that you are still storing extra properties on LimitedCollection for now, however hopefully not tracking a timeout.

In order to keep this semver: minor, default options have unfortunately <strong>not</strong> been switched to use the sweepers in this PR.

**Status and versioning classification:**

- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",610,50,0,4,2021-10-13 9:22:01,,False,,,10,2021-10-14 18:49:23,True,2021-10-13 22:13:00,Rodry,2021-10-13 22:13:02,Pretty sure I窶况e seen stuff like that and there窶冱 no real reason for it not to work,inclusive,neutral
364,discord.js,discordjs,6825,feat(Client): add global sweepers,"PullRequestPart(sha=""20e357e15c72ce499fcc6e2334c08322d9d3c562"")",ckohen,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6825,open,"**Please describe the changes this PR makes and why it should be merged:**

| <h3>笞£�ｸ� This is as of yet untested. Due to the scale of this change, it is best tested by many different people since it would be highly unlikely for a single person to be able to test even a good set of the use cases.</h3>|
| - |

- This aims to tackle point 2 in  #6539: Global Sweepers. This does not completely satisfy what was outlined there however, it still relies on `LimitedCollection` to provide max size functionality. After doing the work to get to this point, that seemed out of scope, and can easily be tackled in another PR. This does mean that you are still storing extra properties on LimitedCollection for now, however hopefully not tracking a timeout.

In order to keep this semver: minor, default options have unfortunately <strong>not</strong> been switched to use the sweepers in this PR.

**Status and versioning classification:**

- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",610,50,0,4,2021-10-13 9:22:01,,False,,,10,2021-10-14 18:49:23,True,2021-10-14 5:32:27,ckohen,2021-10-14 5:32:27,"Works fine (I did wonder initially, but saw it elsewhere)
![image](https://user-images.githubusercontent.com/8060149/137257625-3dea9572-59b4-4309-9577-1844b5ee079b.png)",inclusive,neutral
365,discord.js,discordjs,6825,feat(Client): add global sweepers,"PullRequestPart(sha=""20e357e15c72ce499fcc6e2334c08322d9d3c562"")",ckohen,"[Label(name=""semver:minor"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6825,open,"**Please describe the changes this PR makes and why it should be merged:**

| <h3>笞£�ｸ� This is as of yet untested. Due to the scale of this change, it is best tested by many different people since it would be highly unlikely for a single person to be able to test even a good set of the use cases.</h3>|
| - |

- This aims to tackle point 2 in  #6539: Global Sweepers. This does not completely satisfy what was outlined there however, it still relies on `LimitedCollection` to provide max size functionality. After doing the work to get to this point, that seemed out of scope, and can easily be tackled in another PR. This does mean that you are still storing extra properties on LimitedCollection for now, however hopefully not tracking a timeout.

In order to keep this semver: minor, default options have unfortunately <strong>not</strong> been switched to use the sweepers in this PR.

**Status and versioning classification:**

- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)

<!--
Please move lines that apply to you out of the comment:
- Code changes have been tested against the Discord API, or there are no code changes
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->",610,50,0,4,2021-10-13 9:22:01,,False,,,10,2021-10-14 18:49:23,True,2021-10-14 18:48:10,Vlad Frangu,2021-10-14 18:49:23,Maybe we should just not slice the key at all.. especially if this will ever change and you forget to change it in both parts of the code.. Thoughts @discordjs/the-big-4?,inclusive,constructive
366,discord.js,discordjs,6832,refactor(CommandInteraction): Use better naming for Command Interactions,"PullRequestPart(sha=""dfc4c098d395bdec8324869715c960c3bccb540e"")",Suneet Tipirneni,"[Label(name=""interactions""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6832,open,"**Please describe the changes this PR makes and why it should be merged:**

Breaking changes ahead:

Because slash commands used to be the only type of ""command"" our typeguards currently have some awkward names. For example `isCommand()` only means a chat input command. This is confusing because a command could be either a chat input command or a context menu command. To get around this recently yet another typeguard was introduced: `#isApplicationCommand`. While this was obviously done to get around making breaking changes, this makes things worse for the naming situation as the differences between `isApplicationCommand` and `isCommand` aren't very obvious.

Instead the interaction typeguards are now renamed to tell exactly *which kind* of command it narrows down to. Or in the case of `#isCommand`, it represents any kind of application command.

This also renames command interaction classes to be more idiomatic to the discord api naming,

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
",259,259,1,7,2021-10-14 1:42:53,,False,,,3,2021-10-14 18:45:34,False,2021-10-14 18:24:12,Noel,2021-10-14 18:24:12,"Thats a rather big PR. I'm ok leaving it open, but it will surely take some time and lots of rebases until the next major. 総",inclusive,neutral
367,discord.js,discordjs,6832,refactor(CommandInteraction): Use better naming for Command Interactions,"PullRequestPart(sha=""dfc4c098d395bdec8324869715c960c3bccb540e"")",Suneet Tipirneni,"[Label(name=""interactions""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6832,open,"**Please describe the changes this PR makes and why it should be merged:**

Breaking changes ahead:

Because slash commands used to be the only type of ""command"" our typeguards currently have some awkward names. For example `isCommand()` only means a chat input command. This is confusing because a command could be either a chat input command or a context menu command. To get around this recently yet another typeguard was introduced: `#isApplicationCommand`. While this was obviously done to get around making breaking changes, this makes things worse for the naming situation as the differences between `isApplicationCommand` and `isCommand` aren't very obvious.

Instead the interaction typeguards are now renamed to tell exactly *which kind* of command it narrows down to. Or in the case of `#isCommand`, it represents any kind of application command.

This also renames command interaction classes to be more idiomatic to the discord api naming,

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
",259,259,1,7,2021-10-14 1:42:53,,False,,,3,2021-10-14 18:45:34,True,2021-10-14 5:23:46,monbrey,2021-10-14 5:23:46,"```suggestion
  isChatInputCommand() {
```",inclusive,constructive
368,discord.js,discordjs,6832,refactor(CommandInteraction): Use better naming for Command Interactions,"PullRequestPart(sha=""dfc4c098d395bdec8324869715c960c3bccb540e"")",Suneet Tipirneni,"[Label(name=""interactions""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6832,open,"**Please describe the changes this PR makes and why it should be merged:**

Breaking changes ahead:

Because slash commands used to be the only type of ""command"" our typeguards currently have some awkward names. For example `isCommand()` only means a chat input command. This is confusing because a command could be either a chat input command or a context menu command. To get around this recently yet another typeguard was introduced: `#isApplicationCommand`. While this was obviously done to get around making breaking changes, this makes things worse for the naming situation as the differences between `isApplicationCommand` and `isCommand` aren't very obvious.

Instead the interaction typeguards are now renamed to tell exactly *which kind* of command it narrows down to. Or in the case of `#isCommand`, it represents any kind of application command.

This also renames command interaction classes to be more idiomatic to the discord api naming,

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
",259,259,1,7,2021-10-14 1:42:53,,False,,,3,2021-10-14 18:45:34,True,2021-10-14 5:25:22,monbrey,2021-10-14 5:25:23,"This, or the typings are incorrectly named. Just guessing as to which is the correct direction.",inclusive,neutral
369,discord.js,discordjs,6832,refactor(CommandInteraction): Use better naming for Command Interactions,"PullRequestPart(sha=""dfc4c098d395bdec8324869715c960c3bccb540e"")",Suneet Tipirneni,"[Label(name=""interactions""), Label(name=""semver:major"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6832,open,"**Please describe the changes this PR makes and why it should be merged:**

Breaking changes ahead:

Because slash commands used to be the only type of ""command"" our typeguards currently have some awkward names. For example `isCommand()` only means a chat input command. This is confusing because a command could be either a chat input command or a context menu command. To get around this recently yet another typeguard was introduced: `#isApplicationCommand`. While this was obviously done to get around making breaking changes, this makes things worse for the naming situation as the differences between `isApplicationCommand` and `isCommand` aren't very obvious.

Instead the interaction typeguards are now renamed to tell exactly *which kind* of command it narrows down to. Or in the case of `#isCommand`, it represents any kind of application command.

This also renames command interaction classes to be more idiomatic to the discord api naming,

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
",259,259,1,7,2021-10-14 1:42:53,,False,,,3,2021-10-14 18:45:34,True,2021-10-14 18:42:35,Vlad Frangu,2021-10-14 18:42:57,"```suggestion
  public isCommand(): this is CommandInteraction;
```",inclusive,constructive
370,discord.js,discordjs,6833,types(BaseMessageComponent): Remove third parameter of `create()`,"PullRequestPart(sha=""27cdddd927a678a039a7ab52d0042297e6af8878"")",,"[Label(name=""semver:patch""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6833,open,"**Please describe the changes this PR makes and why it should be merged:**
This no longer exists.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",1,5,2,1,2021-10-14 9:21:25,,False,,,0,2021-10-14 18:45:23,False,2021-10-14 10:10:43,monbrey,2021-10-14 10:10:43,Can you point to where/why this no longer exists? I feel like we had pretty good reasons for adding it originally,inclusive,neutral
371,discord.js,discordjs,6833,types(BaseMessageComponent): Remove third parameter of `create()`,"PullRequestPart(sha=""27cdddd927a678a039a7ab52d0042297e6af8878"")",,"[Label(name=""semver:patch""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6833,open,"**Please describe the changes this PR makes and why it should be merged:**
This no longer exists.

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating

<!--
Please move lines that apply to you out of the comment:
- This PR changes the library's interface (methods or parameters added)
- This PR includes breaking changes (methods removed or renamed, parameters moved or removed)
- This PR **only** includes non-code changes, like changes to documentation, README, etc.
-->
",1,5,2,1,2021-10-14 9:21:25,,False,,,0,2021-10-14 18:45:23,False,2021-10-14 10:14:07,,2021-10-14 10:14:07,"Sure! It was actually your pull request: https://github.com/discordjs/discord.js/pull/6081

I found this whilst doing something else.",inclusive,neutral
372,discord.js,discordjs,6835,Update MessageComponentInteraction.js,"PullRequestPart(sha=""1ad8dd9e9f8775c61ced4e2e0ec2d11c4f953239"")",,"[Label(name=""interactions""), Label(name=""semver:patch""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6835,open,"__Please describe the changes this PR makes and why it should be merged:__

This refers issue #6481 - The component getter of a MessageComponentInteraction cannot be null.
Removed null coal. from both TS typings/main getter of the component.

(following  init commit of d6e6244)

&nbsp;
__Status and versioning classification:__
- This includes updates on typings index.d.ts and  MessageComponentInteraction core structures.
- Testing layer remains -as-is.",3,3,2,4,2021-10-14 11:34:17,,False,,,3,2021-10-14 18:59:48,False,2021-10-14 12:32:11,Rodry,2021-10-14 12:32:11,Update typings and also please follow the PR template,inclusive,constructive
373,discord.js,discordjs,6835,Update MessageComponentInteraction.js,"PullRequestPart(sha=""1ad8dd9e9f8775c61ced4e2e0ec2d11c4f953239"")",,"[Label(name=""interactions""), Label(name=""semver:patch""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6835,open,"__Please describe the changes this PR makes and why it should be merged:__

This refers issue #6481 - The component getter of a MessageComponentInteraction cannot be null.
Removed null coal. from both TS typings/main getter of the component.

(following  init commit of d6e6244)

&nbsp;
__Status and versioning classification:__
- This includes updates on typings index.d.ts and  MessageComponentInteraction core structures.
- Testing layer remains -as-is.",3,3,2,4,2021-10-14 11:34:17,,False,,,3,2021-10-14 18:59:48,False,2021-10-14 12:48:14,,2021-10-14 14:02:38,"no problem. will do

__[Update 16:56]:__ Added relevant changes to typings, PR adheres to template now.",inclusive,neutral
374,discord.js,discordjs,6835,Update MessageComponentInteraction.js,"PullRequestPart(sha=""1ad8dd9e9f8775c61ced4e2e0ec2d11c4f953239"")",,"[Label(name=""interactions""), Label(name=""semver:patch""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6835,open,"__Please describe the changes this PR makes and why it should be merged:__

This refers issue #6481 - The component getter of a MessageComponentInteraction cannot be null.
Removed null coal. from both TS typings/main getter of the component.

(following  init commit of d6e6244)

&nbsp;
__Status and versioning classification:__
- This includes updates on typings index.d.ts and  MessageComponentInteraction core structures.
- Testing layer remains -as-is.",3,3,2,4,2021-10-14 11:34:17,,False,,,3,2021-10-14 18:59:48,True,2021-10-14 18:38:13,Vlad Frangu,2021-10-14 18:38:14,Please update line 75 to remove the `?`,inclusive,constructive
375,discord.js,discordjs,6835,Update MessageComponentInteraction.js,"PullRequestPart(sha=""1ad8dd9e9f8775c61ced4e2e0ec2d11c4f953239"")",,"[Label(name=""interactions""), Label(name=""semver:patch""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6835,open,"__Please describe the changes this PR makes and why it should be merged:__

This refers issue #6481 - The component getter of a MessageComponentInteraction cannot be null.
Removed null coal. from both TS typings/main getter of the component.

(following  init commit of d6e6244)

&nbsp;
__Status and versioning classification:__
- This includes updates on typings index.d.ts and  MessageComponentInteraction core structures.
- Testing layer remains -as-is.",3,3,2,4,2021-10-14 11:34:17,,False,,,3,2021-10-14 18:59:48,True,2021-10-14 18:44:07,Almeida,2021-10-14 18:44:07,And the parentheses,inclusive,neutral
376,discord.js,discordjs,6835,Update MessageComponentInteraction.js,"PullRequestPart(sha=""1ad8dd9e9f8775c61ced4e2e0ec2d11c4f953239"")",,"[Label(name=""interactions""), Label(name=""semver:patch""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6835,open,"__Please describe the changes this PR makes and why it should be merged:__

This refers issue #6481 - The component getter of a MessageComponentInteraction cannot be null.
Removed null coal. from both TS typings/main getter of the component.

(following  init commit of d6e6244)

&nbsp;
__Status and versioning classification:__
- This includes updates on typings index.d.ts and  MessageComponentInteraction core structures.
- Testing layer remains -as-is.",3,3,2,4,2021-10-14 11:34:17,,False,,,3,2021-10-14 18:59:48,True,2021-10-14 18:45:35,,2021-10-14 18:48:22,"OK, changes applied.",inclusive,constructive
377,discord.js,discordjs,6838,types: allow message cached props to be narrowed,"PullRequestPart(sha=""6ccc2a22b61db2d10bb2053de2133f807467ef3a"")",Suneet Tipirneni,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6838,open,"**Please describe the changes this PR makes and why it should be merged:**

Adds `Message#inGuild` to tell if a message was sent in a guild or not.

Also allows interactions to dictate if messages returned by it are cached or not for example:

```ts
if (interaction.inCachedGuild()) {
      const msg = await interaction.reply({ fetchReply: true });
     
      // btn narrowed to cached message component interaction.
      const btn = await msg.awaitMessageComponent({ componentType: 'BUTTON' });

     // Reply is of type `Message`
      const reply = await btn.reply({ content: 'test', fetchReply: true });
}
```

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
",66,18,0,2,2021-10-14 18:17:25,,False,,,10,2021-10-14 21:40:17,True,2021-10-14 18:21:40,Noel,2021-10-14 18:21:41,"```suggestion
    return !Boolean(this.guild);
```
We usually use the Boolean constructor instead of doing `!!`. This was once decided in the past, so if anything has been merged that still does negation with `!!` it was likely a mistake �� ",inclusive,constructive
378,discord.js,discordjs,6838,types: allow message cached props to be narrowed,"PullRequestPart(sha=""6ccc2a22b61db2d10bb2053de2133f807467ef3a"")",Suneet Tipirneni,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6838,open,"**Please describe the changes this PR makes and why it should be merged:**

Adds `Message#inGuild` to tell if a message was sent in a guild or not.

Also allows interactions to dictate if messages returned by it are cached or not for example:

```ts
if (interaction.inCachedGuild()) {
      const msg = await interaction.reply({ fetchReply: true });
     
      // btn narrowed to cached message component interaction.
      const btn = await msg.awaitMessageComponent({ componentType: 'BUTTON' });

     // Reply is of type `Message`
      const reply = await btn.reply({ content: 'test', fetchReply: true });
}
```

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
",66,18,0,2,2021-10-14 18:17:25,,False,,,10,2021-10-14 21:40:17,True,2021-10-14 18:22:53,Suneet Tipirneni,2021-10-14 18:22:53,gotcha,inclusive,neutral
379,discord.js,discordjs,6838,types: allow message cached props to be narrowed,"PullRequestPart(sha=""6ccc2a22b61db2d10bb2053de2133f807467ef3a"")",Suneet Tipirneni,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6838,open,"**Please describe the changes this PR makes and why it should be merged:**

Adds `Message#inGuild` to tell if a message was sent in a guild or not.

Also allows interactions to dictate if messages returned by it are cached or not for example:

```ts
if (interaction.inCachedGuild()) {
      const msg = await interaction.reply({ fetchReply: true });
     
      // btn narrowed to cached message component interaction.
      const btn = await msg.awaitMessageComponent({ componentType: 'BUTTON' });

     // Reply is of type `Message`
      const reply = await btn.reply({ content: 'test', fetchReply: true });
}
```

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
",66,18,0,2,2021-10-14 18:17:25,,False,,,10,2021-10-14 21:40:17,True,2021-10-14 18:24:39,Almeida,2021-10-14 18:24:45,"```suggestion
  inGuild() {
    return Boolean(this.guild);
  }
```",inclusive,constructive
380,discord.js,discordjs,6838,types: allow message cached props to be narrowed,"PullRequestPart(sha=""6ccc2a22b61db2d10bb2053de2133f807467ef3a"")",Suneet Tipirneni,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6838,open,"**Please describe the changes this PR makes and why it should be merged:**

Adds `Message#inGuild` to tell if a message was sent in a guild or not.

Also allows interactions to dictate if messages returned by it are cached or not for example:

```ts
if (interaction.inCachedGuild()) {
      const msg = await interaction.reply({ fetchReply: true });
     
      // btn narrowed to cached message component interaction.
      const btn = await msg.awaitMessageComponent({ componentType: 'BUTTON' });

     // Reply is of type `Message`
      const reply = await btn.reply({ content: 'test', fetchReply: true });
}
```

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
",66,18,0,2,2021-10-14 18:17:25,,False,,,10,2021-10-14 21:40:17,True,2021-10-14 18:25:21,Noel,2021-10-14 18:25:21,Yeah I probably should have read the method name first �,neutral,neutral
381,discord.js,discordjs,6838,types: allow message cached props to be narrowed,"PullRequestPart(sha=""6ccc2a22b61db2d10bb2053de2133f807467ef3a"")",Suneet Tipirneni,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6838,open,"**Please describe the changes this PR makes and why it should be merged:**

Adds `Message#inGuild` to tell if a message was sent in a guild or not.

Also allows interactions to dictate if messages returned by it are cached or not for example:

```ts
if (interaction.inCachedGuild()) {
      const msg = await interaction.reply({ fetchReply: true });
     
      // btn narrowed to cached message component interaction.
      const btn = await msg.awaitMessageComponent({ componentType: 'BUTTON' });

     // Reply is of type `Message`
      const reply = await btn.reply({ content: 'test', fetchReply: true });
}
```

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
",66,18,0,2,2021-10-14 18:17:25,,False,,,10,2021-10-14 21:40:17,True,2021-10-14 18:46:45,Almeida,2021-10-14 18:47:04,"```suggestion
   * Whether this message is from a guild.
```",inclusive,constructive
382,discord.js,discordjs,6838,types: allow message cached props to be narrowed,"PullRequestPart(sha=""6ccc2a22b61db2d10bb2053de2133f807467ef3a"")",Suneet Tipirneni,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6838,open,"**Please describe the changes this PR makes and why it should be merged:**

Adds `Message#inGuild` to tell if a message was sent in a guild or not.

Also allows interactions to dictate if messages returned by it are cached or not for example:

```ts
if (interaction.inCachedGuild()) {
      const msg = await interaction.reply({ fetchReply: true });
     
      // btn narrowed to cached message component interaction.
      const btn = await msg.awaitMessageComponent({ componentType: 'BUTTON' });

     // Reply is of type `Message`
      const reply = await btn.reply({ content: 'test', fetchReply: true });
}
```

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
",66,18,0,2,2021-10-14 18:17:25,,False,,,10,2021-10-14 21:40:17,True,2021-10-14 18:49:06,Suneet Tipirneni,2021-10-14 18:49:06,Yeah I'm guilty of repeating myself.,neutral,not constructive
383,discord.js,discordjs,6838,types: allow message cached props to be narrowed,"PullRequestPart(sha=""6ccc2a22b61db2d10bb2053de2133f807467ef3a"")",Suneet Tipirneni,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6838,open,"**Please describe the changes this PR makes and why it should be merged:**

Adds `Message#inGuild` to tell if a message was sent in a guild or not.

Also allows interactions to dictate if messages returned by it are cached or not for example:

```ts
if (interaction.inCachedGuild()) {
      const msg = await interaction.reply({ fetchReply: true });
     
      // btn narrowed to cached message component interaction.
      const btn = await msg.awaitMessageComponent({ componentType: 'BUTTON' });

     // Reply is of type `Message`
      const reply = await btn.reply({ content: 'test', fetchReply: true });
}
```

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
",66,18,0,2,2021-10-14 18:17:25,,False,,,10,2021-10-14 21:40:17,True,2021-10-14 18:53:52,Rodry,2021-10-14 18:53:53,Isn't that suggestion the exact opposite of what you want? !! gives you a truthy value and !Boolean gives you a falsy value,inclusive,constructive
384,discord.js,discordjs,6838,types: allow message cached props to be narrowed,"PullRequestPart(sha=""6ccc2a22b61db2d10bb2053de2133f807467ef3a"")",Suneet Tipirneni,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6838,open,"**Please describe the changes this PR makes and why it should be merged:**

Adds `Message#inGuild` to tell if a message was sent in a guild or not.

Also allows interactions to dictate if messages returned by it are cached or not for example:

```ts
if (interaction.inCachedGuild()) {
      const msg = await interaction.reply({ fetchReply: true });
     
      // btn narrowed to cached message component interaction.
      const btn = await msg.awaitMessageComponent({ componentType: 'BUTTON' });

     // Reply is of type `Message`
      const reply = await btn.reply({ content: 'test', fetchReply: true });
}
```

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
",66,18,0,2,2021-10-14 18:17:25,,False,,,10,2021-10-14 21:40:17,True,2021-10-14 18:55:05,Almeida,2021-10-14 18:55:06,https://github.com/discordjs/discord.js/pull/6838#discussion_r729236491,neutral,neutral
385,discord.js,discordjs,6838,types: allow message cached props to be narrowed,"PullRequestPart(sha=""6ccc2a22b61db2d10bb2053de2133f807467ef3a"")",Suneet Tipirneni,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6838,open,"**Please describe the changes this PR makes and why it should be merged:**

Adds `Message#inGuild` to tell if a message was sent in a guild or not.

Also allows interactions to dictate if messages returned by it are cached or not for example:

```ts
if (interaction.inCachedGuild()) {
      const msg = await interaction.reply({ fetchReply: true });
     
      // btn narrowed to cached message component interaction.
      const btn = await msg.awaitMessageComponent({ componentType: 'BUTTON' });

     // Reply is of type `Message`
      const reply = await btn.reply({ content: 'test', fetchReply: true });
}
```

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
",66,18,0,2,2021-10-14 18:17:25,,False,,,10,2021-10-14 21:40:17,True,2021-10-14 18:55:50,Rodry,2021-10-14 18:55:50,oopsies,not inclusive,not constructive
386,discord.js,discordjs,6838,types: allow message cached props to be narrowed,"PullRequestPart(sha=""6ccc2a22b61db2d10bb2053de2133f807467ef3a"")",Suneet Tipirneni,"[Label(name=""semver:minor""), Label(name=""typings"")]",https://api.github.com/repos/discordjs/discord.js/pulls/6838,open,"**Please describe the changes this PR makes and why it should be merged:**

Adds `Message#inGuild` to tell if a message was sent in a guild or not.

Also allows interactions to dictate if messages returned by it are cached or not for example:

```ts
if (interaction.inCachedGuild()) {
      const msg = await interaction.reply({ fetchReply: true });
     
      // btn narrowed to cached message component interaction.
      const btn = await msg.awaitMessageComponent({ componentType: 'BUTTON' });

     // Reply is of type `Message`
      const reply = await btn.reply({ content: 'test', fetchReply: true });
}
```

**Status and versioning classification:**
- Code changes have been tested against the Discord API, or there are no code changes
- I know how to update typings and have done so, or typings don't need updating
- This PR changes the library's interface (methods or parameters added)
",66,18,0,2,2021-10-14 18:17:25,,False,,,10,2021-10-14 21:40:17,True,2021-10-14 20:43:13,Almeida,2021-10-14 20:44:21,"The suggested changes were lost with the force push

```suggestion
  /**
   * Whether this message is from a guild.
   * @returns {boolean}
   */
  inGuild() {
    return Boolean(this.guild);
  }
```",inclusive,neutral
